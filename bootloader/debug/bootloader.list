
bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08004000  08004000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035d0  080040bc  080040bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  0800768c  0800768c  0000468c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007714  08007714  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007714  08007714  00004714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800771c  0800771c  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800771c  0800771c  0000471c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007720  08007720  00004720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08007724  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  2000000c  08007730  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000148  08007730  00005148  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e222  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000207e  00000000  00000000  00013256  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b90  00000000  00000000  000152d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008fc  00000000  00000000  00015e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000201b  00000000  00000000  00016764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e885  00000000  00000000  0001877f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b655d  00000000  00000000  00027004  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dd561  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028ac  00000000  00000000  000dd5a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000dfe50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080040bc <__do_global_dtors_aux>:
 80040bc:	b510      	push	{r4, lr}
 80040be:	4c06      	ldr	r4, [pc, #24]	@ (80040d8 <__do_global_dtors_aux+0x1c>)
 80040c0:	7823      	ldrb	r3, [r4, #0]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d107      	bne.n	80040d6 <__do_global_dtors_aux+0x1a>
 80040c6:	4b05      	ldr	r3, [pc, #20]	@ (80040dc <__do_global_dtors_aux+0x20>)
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d002      	beq.n	80040d2 <__do_global_dtors_aux+0x16>
 80040cc:	4804      	ldr	r0, [pc, #16]	@ (80040e0 <__do_global_dtors_aux+0x24>)
 80040ce:	e000      	b.n	80040d2 <__do_global_dtors_aux+0x16>
 80040d0:	bf00      	nop
 80040d2:	2301      	movs	r3, #1
 80040d4:	7023      	strb	r3, [r4, #0]
 80040d6:	bd10      	pop	{r4, pc}
 80040d8:	2000000c 	.word	0x2000000c
 80040dc:	00000000 	.word	0x00000000
 80040e0:	08007674 	.word	0x08007674

080040e4 <frame_dummy>:
 80040e4:	4b04      	ldr	r3, [pc, #16]	@ (80040f8 <frame_dummy+0x14>)
 80040e6:	b510      	push	{r4, lr}
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d003      	beq.n	80040f4 <frame_dummy+0x10>
 80040ec:	4903      	ldr	r1, [pc, #12]	@ (80040fc <frame_dummy+0x18>)
 80040ee:	4804      	ldr	r0, [pc, #16]	@ (8004100 <frame_dummy+0x1c>)
 80040f0:	e000      	b.n	80040f4 <frame_dummy+0x10>
 80040f2:	bf00      	nop
 80040f4:	bd10      	pop	{r4, pc}
 80040f6:	46c0      	nop			@ (mov r8, r8)
 80040f8:	00000000 	.word	0x00000000
 80040fc:	20000010 	.word	0x20000010
 8004100:	08007674 	.word	0x08007674

08004104 <__udivsi3>:
 8004104:	2200      	movs	r2, #0
 8004106:	0843      	lsrs	r3, r0, #1
 8004108:	428b      	cmp	r3, r1
 800410a:	d374      	bcc.n	80041f6 <__udivsi3+0xf2>
 800410c:	0903      	lsrs	r3, r0, #4
 800410e:	428b      	cmp	r3, r1
 8004110:	d35f      	bcc.n	80041d2 <__udivsi3+0xce>
 8004112:	0a03      	lsrs	r3, r0, #8
 8004114:	428b      	cmp	r3, r1
 8004116:	d344      	bcc.n	80041a2 <__udivsi3+0x9e>
 8004118:	0b03      	lsrs	r3, r0, #12
 800411a:	428b      	cmp	r3, r1
 800411c:	d328      	bcc.n	8004170 <__udivsi3+0x6c>
 800411e:	0c03      	lsrs	r3, r0, #16
 8004120:	428b      	cmp	r3, r1
 8004122:	d30d      	bcc.n	8004140 <__udivsi3+0x3c>
 8004124:	22ff      	movs	r2, #255	@ 0xff
 8004126:	0209      	lsls	r1, r1, #8
 8004128:	ba12      	rev	r2, r2
 800412a:	0c03      	lsrs	r3, r0, #16
 800412c:	428b      	cmp	r3, r1
 800412e:	d302      	bcc.n	8004136 <__udivsi3+0x32>
 8004130:	1212      	asrs	r2, r2, #8
 8004132:	0209      	lsls	r1, r1, #8
 8004134:	d065      	beq.n	8004202 <__udivsi3+0xfe>
 8004136:	0b03      	lsrs	r3, r0, #12
 8004138:	428b      	cmp	r3, r1
 800413a:	d319      	bcc.n	8004170 <__udivsi3+0x6c>
 800413c:	e000      	b.n	8004140 <__udivsi3+0x3c>
 800413e:	0a09      	lsrs	r1, r1, #8
 8004140:	0bc3      	lsrs	r3, r0, #15
 8004142:	428b      	cmp	r3, r1
 8004144:	d301      	bcc.n	800414a <__udivsi3+0x46>
 8004146:	03cb      	lsls	r3, r1, #15
 8004148:	1ac0      	subs	r0, r0, r3
 800414a:	4152      	adcs	r2, r2
 800414c:	0b83      	lsrs	r3, r0, #14
 800414e:	428b      	cmp	r3, r1
 8004150:	d301      	bcc.n	8004156 <__udivsi3+0x52>
 8004152:	038b      	lsls	r3, r1, #14
 8004154:	1ac0      	subs	r0, r0, r3
 8004156:	4152      	adcs	r2, r2
 8004158:	0b43      	lsrs	r3, r0, #13
 800415a:	428b      	cmp	r3, r1
 800415c:	d301      	bcc.n	8004162 <__udivsi3+0x5e>
 800415e:	034b      	lsls	r3, r1, #13
 8004160:	1ac0      	subs	r0, r0, r3
 8004162:	4152      	adcs	r2, r2
 8004164:	0b03      	lsrs	r3, r0, #12
 8004166:	428b      	cmp	r3, r1
 8004168:	d301      	bcc.n	800416e <__udivsi3+0x6a>
 800416a:	030b      	lsls	r3, r1, #12
 800416c:	1ac0      	subs	r0, r0, r3
 800416e:	4152      	adcs	r2, r2
 8004170:	0ac3      	lsrs	r3, r0, #11
 8004172:	428b      	cmp	r3, r1
 8004174:	d301      	bcc.n	800417a <__udivsi3+0x76>
 8004176:	02cb      	lsls	r3, r1, #11
 8004178:	1ac0      	subs	r0, r0, r3
 800417a:	4152      	adcs	r2, r2
 800417c:	0a83      	lsrs	r3, r0, #10
 800417e:	428b      	cmp	r3, r1
 8004180:	d301      	bcc.n	8004186 <__udivsi3+0x82>
 8004182:	028b      	lsls	r3, r1, #10
 8004184:	1ac0      	subs	r0, r0, r3
 8004186:	4152      	adcs	r2, r2
 8004188:	0a43      	lsrs	r3, r0, #9
 800418a:	428b      	cmp	r3, r1
 800418c:	d301      	bcc.n	8004192 <__udivsi3+0x8e>
 800418e:	024b      	lsls	r3, r1, #9
 8004190:	1ac0      	subs	r0, r0, r3
 8004192:	4152      	adcs	r2, r2
 8004194:	0a03      	lsrs	r3, r0, #8
 8004196:	428b      	cmp	r3, r1
 8004198:	d301      	bcc.n	800419e <__udivsi3+0x9a>
 800419a:	020b      	lsls	r3, r1, #8
 800419c:	1ac0      	subs	r0, r0, r3
 800419e:	4152      	adcs	r2, r2
 80041a0:	d2cd      	bcs.n	800413e <__udivsi3+0x3a>
 80041a2:	09c3      	lsrs	r3, r0, #7
 80041a4:	428b      	cmp	r3, r1
 80041a6:	d301      	bcc.n	80041ac <__udivsi3+0xa8>
 80041a8:	01cb      	lsls	r3, r1, #7
 80041aa:	1ac0      	subs	r0, r0, r3
 80041ac:	4152      	adcs	r2, r2
 80041ae:	0983      	lsrs	r3, r0, #6
 80041b0:	428b      	cmp	r3, r1
 80041b2:	d301      	bcc.n	80041b8 <__udivsi3+0xb4>
 80041b4:	018b      	lsls	r3, r1, #6
 80041b6:	1ac0      	subs	r0, r0, r3
 80041b8:	4152      	adcs	r2, r2
 80041ba:	0943      	lsrs	r3, r0, #5
 80041bc:	428b      	cmp	r3, r1
 80041be:	d301      	bcc.n	80041c4 <__udivsi3+0xc0>
 80041c0:	014b      	lsls	r3, r1, #5
 80041c2:	1ac0      	subs	r0, r0, r3
 80041c4:	4152      	adcs	r2, r2
 80041c6:	0903      	lsrs	r3, r0, #4
 80041c8:	428b      	cmp	r3, r1
 80041ca:	d301      	bcc.n	80041d0 <__udivsi3+0xcc>
 80041cc:	010b      	lsls	r3, r1, #4
 80041ce:	1ac0      	subs	r0, r0, r3
 80041d0:	4152      	adcs	r2, r2
 80041d2:	08c3      	lsrs	r3, r0, #3
 80041d4:	428b      	cmp	r3, r1
 80041d6:	d301      	bcc.n	80041dc <__udivsi3+0xd8>
 80041d8:	00cb      	lsls	r3, r1, #3
 80041da:	1ac0      	subs	r0, r0, r3
 80041dc:	4152      	adcs	r2, r2
 80041de:	0883      	lsrs	r3, r0, #2
 80041e0:	428b      	cmp	r3, r1
 80041e2:	d301      	bcc.n	80041e8 <__udivsi3+0xe4>
 80041e4:	008b      	lsls	r3, r1, #2
 80041e6:	1ac0      	subs	r0, r0, r3
 80041e8:	4152      	adcs	r2, r2
 80041ea:	0843      	lsrs	r3, r0, #1
 80041ec:	428b      	cmp	r3, r1
 80041ee:	d301      	bcc.n	80041f4 <__udivsi3+0xf0>
 80041f0:	004b      	lsls	r3, r1, #1
 80041f2:	1ac0      	subs	r0, r0, r3
 80041f4:	4152      	adcs	r2, r2
 80041f6:	1a41      	subs	r1, r0, r1
 80041f8:	d200      	bcs.n	80041fc <__udivsi3+0xf8>
 80041fa:	4601      	mov	r1, r0
 80041fc:	4152      	adcs	r2, r2
 80041fe:	4610      	mov	r0, r2
 8004200:	4770      	bx	lr
 8004202:	e7ff      	b.n	8004204 <__udivsi3+0x100>
 8004204:	b501      	push	{r0, lr}
 8004206:	2000      	movs	r0, #0
 8004208:	f000 f8f0 	bl	80043ec <__aeabi_idiv0>
 800420c:	bd02      	pop	{r1, pc}
 800420e:	46c0      	nop			@ (mov r8, r8)

08004210 <__aeabi_uidivmod>:
 8004210:	2900      	cmp	r1, #0
 8004212:	d0f7      	beq.n	8004204 <__udivsi3+0x100>
 8004214:	e776      	b.n	8004104 <__udivsi3>
 8004216:	4770      	bx	lr

08004218 <__divsi3>:
 8004218:	4603      	mov	r3, r0
 800421a:	430b      	orrs	r3, r1
 800421c:	d47f      	bmi.n	800431e <__divsi3+0x106>
 800421e:	2200      	movs	r2, #0
 8004220:	0843      	lsrs	r3, r0, #1
 8004222:	428b      	cmp	r3, r1
 8004224:	d374      	bcc.n	8004310 <__divsi3+0xf8>
 8004226:	0903      	lsrs	r3, r0, #4
 8004228:	428b      	cmp	r3, r1
 800422a:	d35f      	bcc.n	80042ec <__divsi3+0xd4>
 800422c:	0a03      	lsrs	r3, r0, #8
 800422e:	428b      	cmp	r3, r1
 8004230:	d344      	bcc.n	80042bc <__divsi3+0xa4>
 8004232:	0b03      	lsrs	r3, r0, #12
 8004234:	428b      	cmp	r3, r1
 8004236:	d328      	bcc.n	800428a <__divsi3+0x72>
 8004238:	0c03      	lsrs	r3, r0, #16
 800423a:	428b      	cmp	r3, r1
 800423c:	d30d      	bcc.n	800425a <__divsi3+0x42>
 800423e:	22ff      	movs	r2, #255	@ 0xff
 8004240:	0209      	lsls	r1, r1, #8
 8004242:	ba12      	rev	r2, r2
 8004244:	0c03      	lsrs	r3, r0, #16
 8004246:	428b      	cmp	r3, r1
 8004248:	d302      	bcc.n	8004250 <__divsi3+0x38>
 800424a:	1212      	asrs	r2, r2, #8
 800424c:	0209      	lsls	r1, r1, #8
 800424e:	d065      	beq.n	800431c <__divsi3+0x104>
 8004250:	0b03      	lsrs	r3, r0, #12
 8004252:	428b      	cmp	r3, r1
 8004254:	d319      	bcc.n	800428a <__divsi3+0x72>
 8004256:	e000      	b.n	800425a <__divsi3+0x42>
 8004258:	0a09      	lsrs	r1, r1, #8
 800425a:	0bc3      	lsrs	r3, r0, #15
 800425c:	428b      	cmp	r3, r1
 800425e:	d301      	bcc.n	8004264 <__divsi3+0x4c>
 8004260:	03cb      	lsls	r3, r1, #15
 8004262:	1ac0      	subs	r0, r0, r3
 8004264:	4152      	adcs	r2, r2
 8004266:	0b83      	lsrs	r3, r0, #14
 8004268:	428b      	cmp	r3, r1
 800426a:	d301      	bcc.n	8004270 <__divsi3+0x58>
 800426c:	038b      	lsls	r3, r1, #14
 800426e:	1ac0      	subs	r0, r0, r3
 8004270:	4152      	adcs	r2, r2
 8004272:	0b43      	lsrs	r3, r0, #13
 8004274:	428b      	cmp	r3, r1
 8004276:	d301      	bcc.n	800427c <__divsi3+0x64>
 8004278:	034b      	lsls	r3, r1, #13
 800427a:	1ac0      	subs	r0, r0, r3
 800427c:	4152      	adcs	r2, r2
 800427e:	0b03      	lsrs	r3, r0, #12
 8004280:	428b      	cmp	r3, r1
 8004282:	d301      	bcc.n	8004288 <__divsi3+0x70>
 8004284:	030b      	lsls	r3, r1, #12
 8004286:	1ac0      	subs	r0, r0, r3
 8004288:	4152      	adcs	r2, r2
 800428a:	0ac3      	lsrs	r3, r0, #11
 800428c:	428b      	cmp	r3, r1
 800428e:	d301      	bcc.n	8004294 <__divsi3+0x7c>
 8004290:	02cb      	lsls	r3, r1, #11
 8004292:	1ac0      	subs	r0, r0, r3
 8004294:	4152      	adcs	r2, r2
 8004296:	0a83      	lsrs	r3, r0, #10
 8004298:	428b      	cmp	r3, r1
 800429a:	d301      	bcc.n	80042a0 <__divsi3+0x88>
 800429c:	028b      	lsls	r3, r1, #10
 800429e:	1ac0      	subs	r0, r0, r3
 80042a0:	4152      	adcs	r2, r2
 80042a2:	0a43      	lsrs	r3, r0, #9
 80042a4:	428b      	cmp	r3, r1
 80042a6:	d301      	bcc.n	80042ac <__divsi3+0x94>
 80042a8:	024b      	lsls	r3, r1, #9
 80042aa:	1ac0      	subs	r0, r0, r3
 80042ac:	4152      	adcs	r2, r2
 80042ae:	0a03      	lsrs	r3, r0, #8
 80042b0:	428b      	cmp	r3, r1
 80042b2:	d301      	bcc.n	80042b8 <__divsi3+0xa0>
 80042b4:	020b      	lsls	r3, r1, #8
 80042b6:	1ac0      	subs	r0, r0, r3
 80042b8:	4152      	adcs	r2, r2
 80042ba:	d2cd      	bcs.n	8004258 <__divsi3+0x40>
 80042bc:	09c3      	lsrs	r3, r0, #7
 80042be:	428b      	cmp	r3, r1
 80042c0:	d301      	bcc.n	80042c6 <__divsi3+0xae>
 80042c2:	01cb      	lsls	r3, r1, #7
 80042c4:	1ac0      	subs	r0, r0, r3
 80042c6:	4152      	adcs	r2, r2
 80042c8:	0983      	lsrs	r3, r0, #6
 80042ca:	428b      	cmp	r3, r1
 80042cc:	d301      	bcc.n	80042d2 <__divsi3+0xba>
 80042ce:	018b      	lsls	r3, r1, #6
 80042d0:	1ac0      	subs	r0, r0, r3
 80042d2:	4152      	adcs	r2, r2
 80042d4:	0943      	lsrs	r3, r0, #5
 80042d6:	428b      	cmp	r3, r1
 80042d8:	d301      	bcc.n	80042de <__divsi3+0xc6>
 80042da:	014b      	lsls	r3, r1, #5
 80042dc:	1ac0      	subs	r0, r0, r3
 80042de:	4152      	adcs	r2, r2
 80042e0:	0903      	lsrs	r3, r0, #4
 80042e2:	428b      	cmp	r3, r1
 80042e4:	d301      	bcc.n	80042ea <__divsi3+0xd2>
 80042e6:	010b      	lsls	r3, r1, #4
 80042e8:	1ac0      	subs	r0, r0, r3
 80042ea:	4152      	adcs	r2, r2
 80042ec:	08c3      	lsrs	r3, r0, #3
 80042ee:	428b      	cmp	r3, r1
 80042f0:	d301      	bcc.n	80042f6 <__divsi3+0xde>
 80042f2:	00cb      	lsls	r3, r1, #3
 80042f4:	1ac0      	subs	r0, r0, r3
 80042f6:	4152      	adcs	r2, r2
 80042f8:	0883      	lsrs	r3, r0, #2
 80042fa:	428b      	cmp	r3, r1
 80042fc:	d301      	bcc.n	8004302 <__divsi3+0xea>
 80042fe:	008b      	lsls	r3, r1, #2
 8004300:	1ac0      	subs	r0, r0, r3
 8004302:	4152      	adcs	r2, r2
 8004304:	0843      	lsrs	r3, r0, #1
 8004306:	428b      	cmp	r3, r1
 8004308:	d301      	bcc.n	800430e <__divsi3+0xf6>
 800430a:	004b      	lsls	r3, r1, #1
 800430c:	1ac0      	subs	r0, r0, r3
 800430e:	4152      	adcs	r2, r2
 8004310:	1a41      	subs	r1, r0, r1
 8004312:	d200      	bcs.n	8004316 <__divsi3+0xfe>
 8004314:	4601      	mov	r1, r0
 8004316:	4152      	adcs	r2, r2
 8004318:	4610      	mov	r0, r2
 800431a:	4770      	bx	lr
 800431c:	e05d      	b.n	80043da <__divsi3+0x1c2>
 800431e:	0fca      	lsrs	r2, r1, #31
 8004320:	d000      	beq.n	8004324 <__divsi3+0x10c>
 8004322:	4249      	negs	r1, r1
 8004324:	1003      	asrs	r3, r0, #32
 8004326:	d300      	bcc.n	800432a <__divsi3+0x112>
 8004328:	4240      	negs	r0, r0
 800432a:	4053      	eors	r3, r2
 800432c:	2200      	movs	r2, #0
 800432e:	469c      	mov	ip, r3
 8004330:	0903      	lsrs	r3, r0, #4
 8004332:	428b      	cmp	r3, r1
 8004334:	d32d      	bcc.n	8004392 <__divsi3+0x17a>
 8004336:	0a03      	lsrs	r3, r0, #8
 8004338:	428b      	cmp	r3, r1
 800433a:	d312      	bcc.n	8004362 <__divsi3+0x14a>
 800433c:	22fc      	movs	r2, #252	@ 0xfc
 800433e:	0189      	lsls	r1, r1, #6
 8004340:	ba12      	rev	r2, r2
 8004342:	0a03      	lsrs	r3, r0, #8
 8004344:	428b      	cmp	r3, r1
 8004346:	d30c      	bcc.n	8004362 <__divsi3+0x14a>
 8004348:	0189      	lsls	r1, r1, #6
 800434a:	1192      	asrs	r2, r2, #6
 800434c:	428b      	cmp	r3, r1
 800434e:	d308      	bcc.n	8004362 <__divsi3+0x14a>
 8004350:	0189      	lsls	r1, r1, #6
 8004352:	1192      	asrs	r2, r2, #6
 8004354:	428b      	cmp	r3, r1
 8004356:	d304      	bcc.n	8004362 <__divsi3+0x14a>
 8004358:	0189      	lsls	r1, r1, #6
 800435a:	d03a      	beq.n	80043d2 <__divsi3+0x1ba>
 800435c:	1192      	asrs	r2, r2, #6
 800435e:	e000      	b.n	8004362 <__divsi3+0x14a>
 8004360:	0989      	lsrs	r1, r1, #6
 8004362:	09c3      	lsrs	r3, r0, #7
 8004364:	428b      	cmp	r3, r1
 8004366:	d301      	bcc.n	800436c <__divsi3+0x154>
 8004368:	01cb      	lsls	r3, r1, #7
 800436a:	1ac0      	subs	r0, r0, r3
 800436c:	4152      	adcs	r2, r2
 800436e:	0983      	lsrs	r3, r0, #6
 8004370:	428b      	cmp	r3, r1
 8004372:	d301      	bcc.n	8004378 <__divsi3+0x160>
 8004374:	018b      	lsls	r3, r1, #6
 8004376:	1ac0      	subs	r0, r0, r3
 8004378:	4152      	adcs	r2, r2
 800437a:	0943      	lsrs	r3, r0, #5
 800437c:	428b      	cmp	r3, r1
 800437e:	d301      	bcc.n	8004384 <__divsi3+0x16c>
 8004380:	014b      	lsls	r3, r1, #5
 8004382:	1ac0      	subs	r0, r0, r3
 8004384:	4152      	adcs	r2, r2
 8004386:	0903      	lsrs	r3, r0, #4
 8004388:	428b      	cmp	r3, r1
 800438a:	d301      	bcc.n	8004390 <__divsi3+0x178>
 800438c:	010b      	lsls	r3, r1, #4
 800438e:	1ac0      	subs	r0, r0, r3
 8004390:	4152      	adcs	r2, r2
 8004392:	08c3      	lsrs	r3, r0, #3
 8004394:	428b      	cmp	r3, r1
 8004396:	d301      	bcc.n	800439c <__divsi3+0x184>
 8004398:	00cb      	lsls	r3, r1, #3
 800439a:	1ac0      	subs	r0, r0, r3
 800439c:	4152      	adcs	r2, r2
 800439e:	0883      	lsrs	r3, r0, #2
 80043a0:	428b      	cmp	r3, r1
 80043a2:	d301      	bcc.n	80043a8 <__divsi3+0x190>
 80043a4:	008b      	lsls	r3, r1, #2
 80043a6:	1ac0      	subs	r0, r0, r3
 80043a8:	4152      	adcs	r2, r2
 80043aa:	d2d9      	bcs.n	8004360 <__divsi3+0x148>
 80043ac:	0843      	lsrs	r3, r0, #1
 80043ae:	428b      	cmp	r3, r1
 80043b0:	d301      	bcc.n	80043b6 <__divsi3+0x19e>
 80043b2:	004b      	lsls	r3, r1, #1
 80043b4:	1ac0      	subs	r0, r0, r3
 80043b6:	4152      	adcs	r2, r2
 80043b8:	1a41      	subs	r1, r0, r1
 80043ba:	d200      	bcs.n	80043be <__divsi3+0x1a6>
 80043bc:	4601      	mov	r1, r0
 80043be:	4663      	mov	r3, ip
 80043c0:	4152      	adcs	r2, r2
 80043c2:	105b      	asrs	r3, r3, #1
 80043c4:	4610      	mov	r0, r2
 80043c6:	d301      	bcc.n	80043cc <__divsi3+0x1b4>
 80043c8:	4240      	negs	r0, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d500      	bpl.n	80043d0 <__divsi3+0x1b8>
 80043ce:	4249      	negs	r1, r1
 80043d0:	4770      	bx	lr
 80043d2:	4663      	mov	r3, ip
 80043d4:	105b      	asrs	r3, r3, #1
 80043d6:	d300      	bcc.n	80043da <__divsi3+0x1c2>
 80043d8:	4240      	negs	r0, r0
 80043da:	b501      	push	{r0, lr}
 80043dc:	2000      	movs	r0, #0
 80043de:	f000 f805 	bl	80043ec <__aeabi_idiv0>
 80043e2:	bd02      	pop	{r1, pc}

080043e4 <__aeabi_idivmod>:
 80043e4:	2900      	cmp	r1, #0
 80043e6:	d0f8      	beq.n	80043da <__divsi3+0x1c2>
 80043e8:	e716      	b.n	8004218 <__divsi3>
 80043ea:	4770      	bx	lr

080043ec <__aeabi_idiv0>:
 80043ec:	4770      	bx	lr
 80043ee:	46c0      	nop			@ (mov r8, r8)

080043f0 <__aeabi_uldivmod>:
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d111      	bne.n	8004418 <__aeabi_uldivmod+0x28>
 80043f4:	2a00      	cmp	r2, #0
 80043f6:	d10f      	bne.n	8004418 <__aeabi_uldivmod+0x28>
 80043f8:	2900      	cmp	r1, #0
 80043fa:	d100      	bne.n	80043fe <__aeabi_uldivmod+0xe>
 80043fc:	2800      	cmp	r0, #0
 80043fe:	d002      	beq.n	8004406 <__aeabi_uldivmod+0x16>
 8004400:	2100      	movs	r1, #0
 8004402:	43c9      	mvns	r1, r1
 8004404:	0008      	movs	r0, r1
 8004406:	b407      	push	{r0, r1, r2}
 8004408:	4802      	ldr	r0, [pc, #8]	@ (8004414 <__aeabi_uldivmod+0x24>)
 800440a:	a102      	add	r1, pc, #8	@ (adr r1, 8004414 <__aeabi_uldivmod+0x24>)
 800440c:	1840      	adds	r0, r0, r1
 800440e:	9002      	str	r0, [sp, #8]
 8004410:	bd03      	pop	{r0, r1, pc}
 8004412:	46c0      	nop			@ (mov r8, r8)
 8004414:	ffffffd9 	.word	0xffffffd9
 8004418:	b403      	push	{r0, r1}
 800441a:	4668      	mov	r0, sp
 800441c:	b501      	push	{r0, lr}
 800441e:	9802      	ldr	r0, [sp, #8]
 8004420:	f000 f806 	bl	8004430 <__udivmoddi4>
 8004424:	9b01      	ldr	r3, [sp, #4]
 8004426:	469e      	mov	lr, r3
 8004428:	b002      	add	sp, #8
 800442a:	bc0c      	pop	{r2, r3}
 800442c:	4770      	bx	lr
 800442e:	46c0      	nop			@ (mov r8, r8)

08004430 <__udivmoddi4>:
 8004430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004432:	4657      	mov	r7, sl
 8004434:	464e      	mov	r6, r9
 8004436:	4645      	mov	r5, r8
 8004438:	46de      	mov	lr, fp
 800443a:	b5e0      	push	{r5, r6, r7, lr}
 800443c:	0004      	movs	r4, r0
 800443e:	000d      	movs	r5, r1
 8004440:	4692      	mov	sl, r2
 8004442:	4699      	mov	r9, r3
 8004444:	b083      	sub	sp, #12
 8004446:	428b      	cmp	r3, r1
 8004448:	d830      	bhi.n	80044ac <__udivmoddi4+0x7c>
 800444a:	d02d      	beq.n	80044a8 <__udivmoddi4+0x78>
 800444c:	4649      	mov	r1, r9
 800444e:	4650      	mov	r0, sl
 8004450:	f000 f8ba 	bl	80045c8 <__clzdi2>
 8004454:	0029      	movs	r1, r5
 8004456:	0006      	movs	r6, r0
 8004458:	0020      	movs	r0, r4
 800445a:	f000 f8b5 	bl	80045c8 <__clzdi2>
 800445e:	1a33      	subs	r3, r6, r0
 8004460:	4698      	mov	r8, r3
 8004462:	3b20      	subs	r3, #32
 8004464:	d434      	bmi.n	80044d0 <__udivmoddi4+0xa0>
 8004466:	469b      	mov	fp, r3
 8004468:	4653      	mov	r3, sl
 800446a:	465a      	mov	r2, fp
 800446c:	4093      	lsls	r3, r2
 800446e:	4642      	mov	r2, r8
 8004470:	001f      	movs	r7, r3
 8004472:	4653      	mov	r3, sl
 8004474:	4093      	lsls	r3, r2
 8004476:	001e      	movs	r6, r3
 8004478:	42af      	cmp	r7, r5
 800447a:	d83b      	bhi.n	80044f4 <__udivmoddi4+0xc4>
 800447c:	42af      	cmp	r7, r5
 800447e:	d100      	bne.n	8004482 <__udivmoddi4+0x52>
 8004480:	e079      	b.n	8004576 <__udivmoddi4+0x146>
 8004482:	465b      	mov	r3, fp
 8004484:	1ba4      	subs	r4, r4, r6
 8004486:	41bd      	sbcs	r5, r7
 8004488:	2b00      	cmp	r3, #0
 800448a:	da00      	bge.n	800448e <__udivmoddi4+0x5e>
 800448c:	e076      	b.n	800457c <__udivmoddi4+0x14c>
 800448e:	2200      	movs	r2, #0
 8004490:	2300      	movs	r3, #0
 8004492:	9200      	str	r2, [sp, #0]
 8004494:	9301      	str	r3, [sp, #4]
 8004496:	2301      	movs	r3, #1
 8004498:	465a      	mov	r2, fp
 800449a:	4093      	lsls	r3, r2
 800449c:	9301      	str	r3, [sp, #4]
 800449e:	2301      	movs	r3, #1
 80044a0:	4642      	mov	r2, r8
 80044a2:	4093      	lsls	r3, r2
 80044a4:	9300      	str	r3, [sp, #0]
 80044a6:	e029      	b.n	80044fc <__udivmoddi4+0xcc>
 80044a8:	4282      	cmp	r2, r0
 80044aa:	d9cf      	bls.n	800444c <__udivmoddi4+0x1c>
 80044ac:	2200      	movs	r2, #0
 80044ae:	2300      	movs	r3, #0
 80044b0:	9200      	str	r2, [sp, #0]
 80044b2:	9301      	str	r3, [sp, #4]
 80044b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d001      	beq.n	80044be <__udivmoddi4+0x8e>
 80044ba:	601c      	str	r4, [r3, #0]
 80044bc:	605d      	str	r5, [r3, #4]
 80044be:	9800      	ldr	r0, [sp, #0]
 80044c0:	9901      	ldr	r1, [sp, #4]
 80044c2:	b003      	add	sp, #12
 80044c4:	bcf0      	pop	{r4, r5, r6, r7}
 80044c6:	46bb      	mov	fp, r7
 80044c8:	46b2      	mov	sl, r6
 80044ca:	46a9      	mov	r9, r5
 80044cc:	46a0      	mov	r8, r4
 80044ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044d0:	4642      	mov	r2, r8
 80044d2:	469b      	mov	fp, r3
 80044d4:	2320      	movs	r3, #32
 80044d6:	1a9b      	subs	r3, r3, r2
 80044d8:	4652      	mov	r2, sl
 80044da:	40da      	lsrs	r2, r3
 80044dc:	4641      	mov	r1, r8
 80044de:	0013      	movs	r3, r2
 80044e0:	464a      	mov	r2, r9
 80044e2:	408a      	lsls	r2, r1
 80044e4:	0017      	movs	r7, r2
 80044e6:	4642      	mov	r2, r8
 80044e8:	431f      	orrs	r7, r3
 80044ea:	4653      	mov	r3, sl
 80044ec:	4093      	lsls	r3, r2
 80044ee:	001e      	movs	r6, r3
 80044f0:	42af      	cmp	r7, r5
 80044f2:	d9c3      	bls.n	800447c <__udivmoddi4+0x4c>
 80044f4:	2200      	movs	r2, #0
 80044f6:	2300      	movs	r3, #0
 80044f8:	9200      	str	r2, [sp, #0]
 80044fa:	9301      	str	r3, [sp, #4]
 80044fc:	4643      	mov	r3, r8
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d0d8      	beq.n	80044b4 <__udivmoddi4+0x84>
 8004502:	07fb      	lsls	r3, r7, #31
 8004504:	0872      	lsrs	r2, r6, #1
 8004506:	431a      	orrs	r2, r3
 8004508:	4646      	mov	r6, r8
 800450a:	087b      	lsrs	r3, r7, #1
 800450c:	e00e      	b.n	800452c <__udivmoddi4+0xfc>
 800450e:	42ab      	cmp	r3, r5
 8004510:	d101      	bne.n	8004516 <__udivmoddi4+0xe6>
 8004512:	42a2      	cmp	r2, r4
 8004514:	d80c      	bhi.n	8004530 <__udivmoddi4+0x100>
 8004516:	1aa4      	subs	r4, r4, r2
 8004518:	419d      	sbcs	r5, r3
 800451a:	2001      	movs	r0, #1
 800451c:	1924      	adds	r4, r4, r4
 800451e:	416d      	adcs	r5, r5
 8004520:	2100      	movs	r1, #0
 8004522:	3e01      	subs	r6, #1
 8004524:	1824      	adds	r4, r4, r0
 8004526:	414d      	adcs	r5, r1
 8004528:	2e00      	cmp	r6, #0
 800452a:	d006      	beq.n	800453a <__udivmoddi4+0x10a>
 800452c:	42ab      	cmp	r3, r5
 800452e:	d9ee      	bls.n	800450e <__udivmoddi4+0xde>
 8004530:	3e01      	subs	r6, #1
 8004532:	1924      	adds	r4, r4, r4
 8004534:	416d      	adcs	r5, r5
 8004536:	2e00      	cmp	r6, #0
 8004538:	d1f8      	bne.n	800452c <__udivmoddi4+0xfc>
 800453a:	9800      	ldr	r0, [sp, #0]
 800453c:	9901      	ldr	r1, [sp, #4]
 800453e:	465b      	mov	r3, fp
 8004540:	1900      	adds	r0, r0, r4
 8004542:	4169      	adcs	r1, r5
 8004544:	2b00      	cmp	r3, #0
 8004546:	db24      	blt.n	8004592 <__udivmoddi4+0x162>
 8004548:	002b      	movs	r3, r5
 800454a:	465a      	mov	r2, fp
 800454c:	4644      	mov	r4, r8
 800454e:	40d3      	lsrs	r3, r2
 8004550:	002a      	movs	r2, r5
 8004552:	40e2      	lsrs	r2, r4
 8004554:	001c      	movs	r4, r3
 8004556:	465b      	mov	r3, fp
 8004558:	0015      	movs	r5, r2
 800455a:	2b00      	cmp	r3, #0
 800455c:	db2a      	blt.n	80045b4 <__udivmoddi4+0x184>
 800455e:	0026      	movs	r6, r4
 8004560:	409e      	lsls	r6, r3
 8004562:	0033      	movs	r3, r6
 8004564:	0026      	movs	r6, r4
 8004566:	4647      	mov	r7, r8
 8004568:	40be      	lsls	r6, r7
 800456a:	0032      	movs	r2, r6
 800456c:	1a80      	subs	r0, r0, r2
 800456e:	4199      	sbcs	r1, r3
 8004570:	9000      	str	r0, [sp, #0]
 8004572:	9101      	str	r1, [sp, #4]
 8004574:	e79e      	b.n	80044b4 <__udivmoddi4+0x84>
 8004576:	42a3      	cmp	r3, r4
 8004578:	d8bc      	bhi.n	80044f4 <__udivmoddi4+0xc4>
 800457a:	e782      	b.n	8004482 <__udivmoddi4+0x52>
 800457c:	4642      	mov	r2, r8
 800457e:	2320      	movs	r3, #32
 8004580:	2100      	movs	r1, #0
 8004582:	1a9b      	subs	r3, r3, r2
 8004584:	2200      	movs	r2, #0
 8004586:	9100      	str	r1, [sp, #0]
 8004588:	9201      	str	r2, [sp, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	40da      	lsrs	r2, r3
 800458e:	9201      	str	r2, [sp, #4]
 8004590:	e785      	b.n	800449e <__udivmoddi4+0x6e>
 8004592:	4642      	mov	r2, r8
 8004594:	2320      	movs	r3, #32
 8004596:	1a9b      	subs	r3, r3, r2
 8004598:	002a      	movs	r2, r5
 800459a:	4646      	mov	r6, r8
 800459c:	409a      	lsls	r2, r3
 800459e:	0023      	movs	r3, r4
 80045a0:	40f3      	lsrs	r3, r6
 80045a2:	4644      	mov	r4, r8
 80045a4:	4313      	orrs	r3, r2
 80045a6:	002a      	movs	r2, r5
 80045a8:	40e2      	lsrs	r2, r4
 80045aa:	001c      	movs	r4, r3
 80045ac:	465b      	mov	r3, fp
 80045ae:	0015      	movs	r5, r2
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	dad4      	bge.n	800455e <__udivmoddi4+0x12e>
 80045b4:	4642      	mov	r2, r8
 80045b6:	002f      	movs	r7, r5
 80045b8:	2320      	movs	r3, #32
 80045ba:	0026      	movs	r6, r4
 80045bc:	4097      	lsls	r7, r2
 80045be:	1a9b      	subs	r3, r3, r2
 80045c0:	40de      	lsrs	r6, r3
 80045c2:	003b      	movs	r3, r7
 80045c4:	4333      	orrs	r3, r6
 80045c6:	e7cd      	b.n	8004564 <__udivmoddi4+0x134>

080045c8 <__clzdi2>:
 80045c8:	b510      	push	{r4, lr}
 80045ca:	2900      	cmp	r1, #0
 80045cc:	d103      	bne.n	80045d6 <__clzdi2+0xe>
 80045ce:	f000 f807 	bl	80045e0 <__clzsi2>
 80045d2:	3020      	adds	r0, #32
 80045d4:	e002      	b.n	80045dc <__clzdi2+0x14>
 80045d6:	0008      	movs	r0, r1
 80045d8:	f000 f802 	bl	80045e0 <__clzsi2>
 80045dc:	bd10      	pop	{r4, pc}
 80045de:	46c0      	nop			@ (mov r8, r8)

080045e0 <__clzsi2>:
 80045e0:	211c      	movs	r1, #28
 80045e2:	2301      	movs	r3, #1
 80045e4:	041b      	lsls	r3, r3, #16
 80045e6:	4298      	cmp	r0, r3
 80045e8:	d301      	bcc.n	80045ee <__clzsi2+0xe>
 80045ea:	0c00      	lsrs	r0, r0, #16
 80045ec:	3910      	subs	r1, #16
 80045ee:	0a1b      	lsrs	r3, r3, #8
 80045f0:	4298      	cmp	r0, r3
 80045f2:	d301      	bcc.n	80045f8 <__clzsi2+0x18>
 80045f4:	0a00      	lsrs	r0, r0, #8
 80045f6:	3908      	subs	r1, #8
 80045f8:	091b      	lsrs	r3, r3, #4
 80045fa:	4298      	cmp	r0, r3
 80045fc:	d301      	bcc.n	8004602 <__clzsi2+0x22>
 80045fe:	0900      	lsrs	r0, r0, #4
 8004600:	3904      	subs	r1, #4
 8004602:	a202      	add	r2, pc, #8	@ (adr r2, 800460c <__clzsi2+0x2c>)
 8004604:	5c10      	ldrb	r0, [r2, r0]
 8004606:	1840      	adds	r0, r0, r1
 8004608:	4770      	bx	lr
 800460a:	46c0      	nop			@ (mov r8, r8)
 800460c:	02020304 	.word	0x02020304
 8004610:	01010101 	.word	0x01010101
	...

0800461c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004620:	f000 faec 	bl	8004bfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004624:	f000 f816 	bl	8004654 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004628:	f000 f92c 	bl	8004884 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800462c:	f000 f8dc 	bl	80047e8 <MX_USART2_UART_Init>
  MX_FDCAN1_Init();
 8004630:	f000 f892 	bl	8004758 <MX_FDCAN1_Init>
  MX_CRC_Init();
 8004634:	f000 f86c 	bl	8004710 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  HAL_FDCAN_Start(&hfdcan1);
 8004638:	4b05      	ldr	r3, [pc, #20]	@ (8004650 <main+0x34>)
 800463a:	0018      	movs	r0, r3
 800463c:	f000 fe70 	bl	8005320 <HAL_FDCAN_Start>
  HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 8004640:	4b03      	ldr	r3, [pc, #12]	@ (8004650 <main+0x34>)
 8004642:	2200      	movs	r2, #0
 8004644:	2101      	movs	r1, #1
 8004646:	0018      	movs	r0, r3
 8004648:	f000 fe90 	bl	800536c <HAL_FDCAN_ActivateNotification>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800464c:	46c0      	nop			@ (mov r8, r8)
 800464e:	e7fd      	b.n	800464c <main+0x30>
 8004650:	2000004c 	.word	0x2000004c

08004654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004654:	b590      	push	{r4, r7, lr}
 8004656:	b095      	sub	sp, #84	@ 0x54
 8004658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800465a:	2414      	movs	r4, #20
 800465c:	193b      	adds	r3, r7, r4
 800465e:	0018      	movs	r0, r3
 8004660:	233c      	movs	r3, #60	@ 0x3c
 8004662:	001a      	movs	r2, r3
 8004664:	2100      	movs	r1, #0
 8004666:	f002 ffd9 	bl	800761c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800466a:	1d3b      	adds	r3, r7, #4
 800466c:	0018      	movs	r0, r3
 800466e:	2310      	movs	r3, #16
 8004670:	001a      	movs	r2, r3
 8004672:	2100      	movs	r1, #0
 8004674:	f002 ffd2 	bl	800761c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004678:	2380      	movs	r3, #128	@ 0x80
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	0018      	movs	r0, r3
 800467e:	f001 f941 	bl	8005904 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004682:	193b      	adds	r3, r7, r4
 8004684:	2202      	movs	r2, #2
 8004686:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004688:	193b      	adds	r3, r7, r4
 800468a:	2280      	movs	r2, #128	@ 0x80
 800468c:	0052      	lsls	r2, r2, #1
 800468e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8004690:	0021      	movs	r1, r4
 8004692:	187b      	adds	r3, r7, r1
 8004694:	2200      	movs	r2, #0
 8004696:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004698:	187b      	adds	r3, r7, r1
 800469a:	2240      	movs	r2, #64	@ 0x40
 800469c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800469e:	187b      	adds	r3, r7, r1
 80046a0:	2202      	movs	r2, #2
 80046a2:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80046a4:	187b      	adds	r3, r7, r1
 80046a6:	2202      	movs	r2, #2
 80046a8:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80046aa:	187b      	adds	r3, r7, r1
 80046ac:	2200      	movs	r2, #0
 80046ae:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 80046b0:	187b      	adds	r3, r7, r1
 80046b2:	2208      	movs	r2, #8
 80046b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80046b6:	187b      	adds	r3, r7, r1
 80046b8:	2280      	movs	r2, #128	@ 0x80
 80046ba:	0292      	lsls	r2, r2, #10
 80046bc:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80046be:	187b      	adds	r3, r7, r1
 80046c0:	2280      	movs	r2, #128	@ 0x80
 80046c2:	0492      	lsls	r2, r2, #18
 80046c4:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80046c6:	187b      	adds	r3, r7, r1
 80046c8:	2280      	movs	r2, #128	@ 0x80
 80046ca:	0592      	lsls	r2, r2, #22
 80046cc:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80046ce:	187b      	adds	r3, r7, r1
 80046d0:	0018      	movs	r0, r3
 80046d2:	f001 f963 	bl	800599c <HAL_RCC_OscConfig>
 80046d6:	1e03      	subs	r3, r0, #0
 80046d8:	d001      	beq.n	80046de <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80046da:	f000 f937 	bl	800494c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80046de:	1d3b      	adds	r3, r7, #4
 80046e0:	2207      	movs	r2, #7
 80046e2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80046e4:	1d3b      	adds	r3, r7, #4
 80046e6:	2202      	movs	r2, #2
 80046e8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80046ea:	1d3b      	adds	r3, r7, #4
 80046ec:	2200      	movs	r2, #0
 80046ee:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80046f0:	1d3b      	adds	r3, r7, #4
 80046f2:	2200      	movs	r2, #0
 80046f4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80046f6:	1d3b      	adds	r3, r7, #4
 80046f8:	2102      	movs	r1, #2
 80046fa:	0018      	movs	r0, r3
 80046fc:	f001 fcae 	bl	800605c <HAL_RCC_ClockConfig>
 8004700:	1e03      	subs	r3, r0, #0
 8004702:	d001      	beq.n	8004708 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8004704:	f000 f922 	bl	800494c <Error_Handler>
  }
}
 8004708:	46c0      	nop			@ (mov r8, r8)
 800470a:	46bd      	mov	sp, r7
 800470c:	b015      	add	sp, #84	@ 0x54
 800470e:	bd90      	pop	{r4, r7, pc}

08004710 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8004714:	4b0e      	ldr	r3, [pc, #56]	@ (8004750 <MX_CRC_Init+0x40>)
 8004716:	4a0f      	ldr	r2, [pc, #60]	@ (8004754 <MX_CRC_Init+0x44>)
 8004718:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800471a:	4b0d      	ldr	r3, [pc, #52]	@ (8004750 <MX_CRC_Init+0x40>)
 800471c:	2200      	movs	r2, #0
 800471e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8004720:	4b0b      	ldr	r3, [pc, #44]	@ (8004750 <MX_CRC_Init+0x40>)
 8004722:	2200      	movs	r2, #0
 8004724:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8004726:	4b0a      	ldr	r3, [pc, #40]	@ (8004750 <MX_CRC_Init+0x40>)
 8004728:	2200      	movs	r2, #0
 800472a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800472c:	4b08      	ldr	r3, [pc, #32]	@ (8004750 <MX_CRC_Init+0x40>)
 800472e:	2200      	movs	r2, #0
 8004730:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8004732:	4b07      	ldr	r3, [pc, #28]	@ (8004750 <MX_CRC_Init+0x40>)
 8004734:	2201      	movs	r2, #1
 8004736:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8004738:	4b05      	ldr	r3, [pc, #20]	@ (8004750 <MX_CRC_Init+0x40>)
 800473a:	0018      	movs	r0, r3
 800473c:	f000 fbae 	bl	8004e9c <HAL_CRC_Init>
 8004740:	1e03      	subs	r3, r0, #0
 8004742:	d001      	beq.n	8004748 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8004744:	f000 f902 	bl	800494c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8004748:	46c0      	nop			@ (mov r8, r8)
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	46c0      	nop			@ (mov r8, r8)
 8004750:	20000028 	.word	0x20000028
 8004754:	40023000 	.word	0x40023000

08004758 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800475c:	4b20      	ldr	r3, [pc, #128]	@ (80047e0 <MX_FDCAN1_Init+0x88>)
 800475e:	4a21      	ldr	r2, [pc, #132]	@ (80047e4 <MX_FDCAN1_Init+0x8c>)
 8004760:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8004762:	4b1f      	ldr	r3, [pc, #124]	@ (80047e0 <MX_FDCAN1_Init+0x88>)
 8004764:	2200      	movs	r2, #0
 8004766:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8004768:	4b1d      	ldr	r3, [pc, #116]	@ (80047e0 <MX_FDCAN1_Init+0x88>)
 800476a:	2200      	movs	r2, #0
 800476c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800476e:	4b1c      	ldr	r3, [pc, #112]	@ (80047e0 <MX_FDCAN1_Init+0x88>)
 8004770:	2200      	movs	r2, #0
 8004772:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8004774:	4b1a      	ldr	r3, [pc, #104]	@ (80047e0 <MX_FDCAN1_Init+0x88>)
 8004776:	2200      	movs	r2, #0
 8004778:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800477a:	4b19      	ldr	r3, [pc, #100]	@ (80047e0 <MX_FDCAN1_Init+0x88>)
 800477c:	2200      	movs	r2, #0
 800477e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8004780:	4b17      	ldr	r3, [pc, #92]	@ (80047e0 <MX_FDCAN1_Init+0x88>)
 8004782:	2200      	movs	r2, #0
 8004784:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8004786:	4b16      	ldr	r3, [pc, #88]	@ (80047e0 <MX_FDCAN1_Init+0x88>)
 8004788:	2210      	movs	r2, #16
 800478a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800478c:	4b14      	ldr	r3, [pc, #80]	@ (80047e0 <MX_FDCAN1_Init+0x88>)
 800478e:	2201      	movs	r2, #1
 8004790:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 1;
 8004792:	4b13      	ldr	r3, [pc, #76]	@ (80047e0 <MX_FDCAN1_Init+0x88>)
 8004794:	2201      	movs	r2, #1
 8004796:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 1;
 8004798:	4b11      	ldr	r3, [pc, #68]	@ (80047e0 <MX_FDCAN1_Init+0x88>)
 800479a:	2201      	movs	r2, #1
 800479c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800479e:	4b10      	ldr	r3, [pc, #64]	@ (80047e0 <MX_FDCAN1_Init+0x88>)
 80047a0:	2201      	movs	r2, #1
 80047a2:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80047a4:	4b0e      	ldr	r3, [pc, #56]	@ (80047e0 <MX_FDCAN1_Init+0x88>)
 80047a6:	2201      	movs	r2, #1
 80047a8:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80047aa:	4b0d      	ldr	r3, [pc, #52]	@ (80047e0 <MX_FDCAN1_Init+0x88>)
 80047ac:	2201      	movs	r2, #1
 80047ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80047b0:	4b0b      	ldr	r3, [pc, #44]	@ (80047e0 <MX_FDCAN1_Init+0x88>)
 80047b2:	2201      	movs	r2, #1
 80047b4:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80047b6:	4b0a      	ldr	r3, [pc, #40]	@ (80047e0 <MX_FDCAN1_Init+0x88>)
 80047b8:	2200      	movs	r2, #0
 80047ba:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80047bc:	4b08      	ldr	r3, [pc, #32]	@ (80047e0 <MX_FDCAN1_Init+0x88>)
 80047be:	2200      	movs	r2, #0
 80047c0:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80047c2:	4b07      	ldr	r3, [pc, #28]	@ (80047e0 <MX_FDCAN1_Init+0x88>)
 80047c4:	2200      	movs	r2, #0
 80047c6:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80047c8:	4b05      	ldr	r3, [pc, #20]	@ (80047e0 <MX_FDCAN1_Init+0x88>)
 80047ca:	0018      	movs	r0, r3
 80047cc:	f000 fc42 	bl	8005054 <HAL_FDCAN_Init>
 80047d0:	1e03      	subs	r3, r0, #0
 80047d2:	d001      	beq.n	80047d8 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 80047d4:	f000 f8ba 	bl	800494c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80047d8:	46c0      	nop			@ (mov r8, r8)
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	46c0      	nop			@ (mov r8, r8)
 80047e0:	2000004c 	.word	0x2000004c
 80047e4:	40006400 	.word	0x40006400

080047e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80047ec:	4b22      	ldr	r3, [pc, #136]	@ (8004878 <MX_USART2_UART_Init+0x90>)
 80047ee:	4a23      	ldr	r2, [pc, #140]	@ (800487c <MX_USART2_UART_Init+0x94>)
 80047f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 500000;
 80047f2:	4b21      	ldr	r3, [pc, #132]	@ (8004878 <MX_USART2_UART_Init+0x90>)
 80047f4:	4a22      	ldr	r2, [pc, #136]	@ (8004880 <MX_USART2_UART_Init+0x98>)
 80047f6:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80047f8:	4b1f      	ldr	r3, [pc, #124]	@ (8004878 <MX_USART2_UART_Init+0x90>)
 80047fa:	2200      	movs	r2, #0
 80047fc:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80047fe:	4b1e      	ldr	r3, [pc, #120]	@ (8004878 <MX_USART2_UART_Init+0x90>)
 8004800:	2200      	movs	r2, #0
 8004802:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004804:	4b1c      	ldr	r3, [pc, #112]	@ (8004878 <MX_USART2_UART_Init+0x90>)
 8004806:	2200      	movs	r2, #0
 8004808:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800480a:	4b1b      	ldr	r3, [pc, #108]	@ (8004878 <MX_USART2_UART_Init+0x90>)
 800480c:	220c      	movs	r2, #12
 800480e:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004810:	4b19      	ldr	r3, [pc, #100]	@ (8004878 <MX_USART2_UART_Init+0x90>)
 8004812:	2200      	movs	r2, #0
 8004814:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004816:	4b18      	ldr	r3, [pc, #96]	@ (8004878 <MX_USART2_UART_Init+0x90>)
 8004818:	2200      	movs	r2, #0
 800481a:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800481c:	4b16      	ldr	r3, [pc, #88]	@ (8004878 <MX_USART2_UART_Init+0x90>)
 800481e:	2200      	movs	r2, #0
 8004820:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004822:	4b15      	ldr	r3, [pc, #84]	@ (8004878 <MX_USART2_UART_Init+0x90>)
 8004824:	2200      	movs	r2, #0
 8004826:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004828:	4b13      	ldr	r3, [pc, #76]	@ (8004878 <MX_USART2_UART_Init+0x90>)
 800482a:	2200      	movs	r2, #0
 800482c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800482e:	4b12      	ldr	r3, [pc, #72]	@ (8004878 <MX_USART2_UART_Init+0x90>)
 8004830:	0018      	movs	r0, r3
 8004832:	f001 fff9 	bl	8006828 <HAL_UART_Init>
 8004836:	1e03      	subs	r3, r0, #0
 8004838:	d001      	beq.n	800483e <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 800483a:	f000 f887 	bl	800494c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800483e:	4b0e      	ldr	r3, [pc, #56]	@ (8004878 <MX_USART2_UART_Init+0x90>)
 8004840:	2100      	movs	r1, #0
 8004842:	0018      	movs	r0, r3
 8004844:	f002 fe0a 	bl	800745c <HAL_UARTEx_SetTxFifoThreshold>
 8004848:	1e03      	subs	r3, r0, #0
 800484a:	d001      	beq.n	8004850 <MX_USART2_UART_Init+0x68>
  {
    Error_Handler();
 800484c:	f000 f87e 	bl	800494c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004850:	4b09      	ldr	r3, [pc, #36]	@ (8004878 <MX_USART2_UART_Init+0x90>)
 8004852:	2100      	movs	r1, #0
 8004854:	0018      	movs	r0, r3
 8004856:	f002 fe41 	bl	80074dc <HAL_UARTEx_SetRxFifoThreshold>
 800485a:	1e03      	subs	r3, r0, #0
 800485c:	d001      	beq.n	8004862 <MX_USART2_UART_Init+0x7a>
  {
    Error_Handler();
 800485e:	f000 f875 	bl	800494c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8004862:	4b05      	ldr	r3, [pc, #20]	@ (8004878 <MX_USART2_UART_Init+0x90>)
 8004864:	0018      	movs	r0, r3
 8004866:	f002 fdbf 	bl	80073e8 <HAL_UARTEx_DisableFifoMode>
 800486a:	1e03      	subs	r3, r0, #0
 800486c:	d001      	beq.n	8004872 <MX_USART2_UART_Init+0x8a>
  {
    Error_Handler();
 800486e:	f000 f86d 	bl	800494c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004872:	46c0      	nop			@ (mov r8, r8)
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}
 8004878:	200000b0 	.word	0x200000b0
 800487c:	40004400 	.word	0x40004400
 8004880:	0007a120 	.word	0x0007a120

08004884 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004884:	b590      	push	{r4, r7, lr}
 8004886:	b089      	sub	sp, #36	@ 0x24
 8004888:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800488a:	240c      	movs	r4, #12
 800488c:	193b      	adds	r3, r7, r4
 800488e:	0018      	movs	r0, r3
 8004890:	2314      	movs	r3, #20
 8004892:	001a      	movs	r2, r3
 8004894:	2100      	movs	r1, #0
 8004896:	f002 fec1 	bl	800761c <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800489a:	4b2a      	ldr	r3, [pc, #168]	@ (8004944 <MX_GPIO_Init+0xc0>)
 800489c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800489e:	4b29      	ldr	r3, [pc, #164]	@ (8004944 <MX_GPIO_Init+0xc0>)
 80048a0:	2104      	movs	r1, #4
 80048a2:	430a      	orrs	r2, r1
 80048a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80048a6:	4b27      	ldr	r3, [pc, #156]	@ (8004944 <MX_GPIO_Init+0xc0>)
 80048a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048aa:	2204      	movs	r2, #4
 80048ac:	4013      	ands	r3, r2
 80048ae:	60bb      	str	r3, [r7, #8]
 80048b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80048b2:	4b24      	ldr	r3, [pc, #144]	@ (8004944 <MX_GPIO_Init+0xc0>)
 80048b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80048b6:	4b23      	ldr	r3, [pc, #140]	@ (8004944 <MX_GPIO_Init+0xc0>)
 80048b8:	2120      	movs	r1, #32
 80048ba:	430a      	orrs	r2, r1
 80048bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80048be:	4b21      	ldr	r3, [pc, #132]	@ (8004944 <MX_GPIO_Init+0xc0>)
 80048c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048c2:	2220      	movs	r2, #32
 80048c4:	4013      	ands	r3, r2
 80048c6:	607b      	str	r3, [r7, #4]
 80048c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80048ca:	4b1e      	ldr	r3, [pc, #120]	@ (8004944 <MX_GPIO_Init+0xc0>)
 80048cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80048ce:	4b1d      	ldr	r3, [pc, #116]	@ (8004944 <MX_GPIO_Init+0xc0>)
 80048d0:	2101      	movs	r1, #1
 80048d2:	430a      	orrs	r2, r1
 80048d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80048d6:	4b1b      	ldr	r3, [pc, #108]	@ (8004944 <MX_GPIO_Init+0xc0>)
 80048d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048da:	2201      	movs	r2, #1
 80048dc:	4013      	ands	r3, r2
 80048de:	603b      	str	r3, [r7, #0]
 80048e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80048e2:	23a0      	movs	r3, #160	@ 0xa0
 80048e4:	05db      	lsls	r3, r3, #23
 80048e6:	2200      	movs	r2, #0
 80048e8:	2120      	movs	r1, #32
 80048ea:	0018      	movs	r0, r3
 80048ec:	f000 ffec 	bl	80058c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80048f0:	193b      	adds	r3, r7, r4
 80048f2:	2280      	movs	r2, #128	@ 0x80
 80048f4:	0192      	lsls	r2, r2, #6
 80048f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80048f8:	193b      	adds	r3, r7, r4
 80048fa:	2288      	movs	r2, #136	@ 0x88
 80048fc:	0352      	lsls	r2, r2, #13
 80048fe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004900:	193b      	adds	r3, r7, r4
 8004902:	2200      	movs	r2, #0
 8004904:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004906:	193b      	adds	r3, r7, r4
 8004908:	4a0f      	ldr	r2, [pc, #60]	@ (8004948 <MX_GPIO_Init+0xc4>)
 800490a:	0019      	movs	r1, r3
 800490c:	0010      	movs	r0, r2
 800490e:	f000 fe6f 	bl	80055f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8004912:	0021      	movs	r1, r4
 8004914:	187b      	adds	r3, r7, r1
 8004916:	2220      	movs	r2, #32
 8004918:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800491a:	187b      	adds	r3, r7, r1
 800491c:	2201      	movs	r2, #1
 800491e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004920:	187b      	adds	r3, r7, r1
 8004922:	2200      	movs	r2, #0
 8004924:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004926:	187b      	adds	r3, r7, r1
 8004928:	2202      	movs	r2, #2
 800492a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800492c:	187a      	adds	r2, r7, r1
 800492e:	23a0      	movs	r3, #160	@ 0xa0
 8004930:	05db      	lsls	r3, r3, #23
 8004932:	0011      	movs	r1, r2
 8004934:	0018      	movs	r0, r3
 8004936:	f000 fe5b 	bl	80055f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800493a:	46c0      	nop			@ (mov r8, r8)
 800493c:	46bd      	mov	sp, r7
 800493e:	b009      	add	sp, #36	@ 0x24
 8004940:	bd90      	pop	{r4, r7, pc}
 8004942:	46c0      	nop			@ (mov r8, r8)
 8004944:	40021000 	.word	0x40021000
 8004948:	50000800 	.word	0x50000800

0800494c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004950:	b672      	cpsid	i
}
 8004952:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004954:	46c0      	nop			@ (mov r8, r8)
 8004956:	e7fd      	b.n	8004954 <Error_Handler+0x8>

08004958 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b082      	sub	sp, #8
 800495c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800495e:	4b11      	ldr	r3, [pc, #68]	@ (80049a4 <HAL_MspInit+0x4c>)
 8004960:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004962:	4b10      	ldr	r3, [pc, #64]	@ (80049a4 <HAL_MspInit+0x4c>)
 8004964:	2101      	movs	r1, #1
 8004966:	430a      	orrs	r2, r1
 8004968:	641a      	str	r2, [r3, #64]	@ 0x40
 800496a:	4b0e      	ldr	r3, [pc, #56]	@ (80049a4 <HAL_MspInit+0x4c>)
 800496c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800496e:	2201      	movs	r2, #1
 8004970:	4013      	ands	r3, r2
 8004972:	607b      	str	r3, [r7, #4]
 8004974:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004976:	4b0b      	ldr	r3, [pc, #44]	@ (80049a4 <HAL_MspInit+0x4c>)
 8004978:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800497a:	4b0a      	ldr	r3, [pc, #40]	@ (80049a4 <HAL_MspInit+0x4c>)
 800497c:	2180      	movs	r1, #128	@ 0x80
 800497e:	0549      	lsls	r1, r1, #21
 8004980:	430a      	orrs	r2, r1
 8004982:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004984:	4b07      	ldr	r3, [pc, #28]	@ (80049a4 <HAL_MspInit+0x4c>)
 8004986:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004988:	2380      	movs	r3, #128	@ 0x80
 800498a:	055b      	lsls	r3, r3, #21
 800498c:	4013      	ands	r3, r2
 800498e:	603b      	str	r3, [r7, #0]
 8004990:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8004992:	23c0      	movs	r3, #192	@ 0xc0
 8004994:	00db      	lsls	r3, r3, #3
 8004996:	0018      	movs	r0, r3
 8004998:	f000 f9b6 	bl	8004d08 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800499c:	46c0      	nop			@ (mov r8, r8)
 800499e:	46bd      	mov	sp, r7
 80049a0:	b002      	add	sp, #8
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	40021000 	.word	0x40021000

080049a8 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a0a      	ldr	r2, [pc, #40]	@ (80049e0 <HAL_CRC_MspInit+0x38>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d10d      	bne.n	80049d6 <HAL_CRC_MspInit+0x2e>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80049ba:	4b0a      	ldr	r3, [pc, #40]	@ (80049e4 <HAL_CRC_MspInit+0x3c>)
 80049bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80049be:	4b09      	ldr	r3, [pc, #36]	@ (80049e4 <HAL_CRC_MspInit+0x3c>)
 80049c0:	2180      	movs	r1, #128	@ 0x80
 80049c2:	0149      	lsls	r1, r1, #5
 80049c4:	430a      	orrs	r2, r1
 80049c6:	639a      	str	r2, [r3, #56]	@ 0x38
 80049c8:	4b06      	ldr	r3, [pc, #24]	@ (80049e4 <HAL_CRC_MspInit+0x3c>)
 80049ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80049cc:	2380      	movs	r3, #128	@ 0x80
 80049ce:	015b      	lsls	r3, r3, #5
 80049d0:	4013      	ands	r3, r2
 80049d2:	60fb      	str	r3, [r7, #12]
 80049d4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 80049d6:	46c0      	nop			@ (mov r8, r8)
 80049d8:	46bd      	mov	sp, r7
 80049da:	b004      	add	sp, #16
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	46c0      	nop			@ (mov r8, r8)
 80049e0:	40023000 	.word	0x40023000
 80049e4:	40021000 	.word	0x40021000

080049e8 <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80049e8:	b590      	push	{r4, r7, lr}
 80049ea:	b09d      	sub	sp, #116	@ 0x74
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049f0:	235c      	movs	r3, #92	@ 0x5c
 80049f2:	18fb      	adds	r3, r7, r3
 80049f4:	0018      	movs	r0, r3
 80049f6:	2314      	movs	r3, #20
 80049f8:	001a      	movs	r2, r3
 80049fa:	2100      	movs	r1, #0
 80049fc:	f002 fe0e 	bl	800761c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004a00:	2410      	movs	r4, #16
 8004a02:	193b      	adds	r3, r7, r4
 8004a04:	0018      	movs	r0, r3
 8004a06:	234c      	movs	r3, #76	@ 0x4c
 8004a08:	001a      	movs	r2, r3
 8004a0a:	2100      	movs	r1, #0
 8004a0c:	f002 fe06 	bl	800761c <memset>
  if(hfdcan->Instance==FDCAN1)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a23      	ldr	r2, [pc, #140]	@ (8004aa4 <HAL_FDCAN_MspInit+0xbc>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d140      	bne.n	8004a9c <HAL_FDCAN_MspInit+0xb4>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8004a1a:	193b      	adds	r3, r7, r4
 8004a1c:	2280      	movs	r2, #128	@ 0x80
 8004a1e:	0492      	lsls	r2, r2, #18
 8004a20:	601a      	str	r2, [r3, #0]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8004a22:	193b      	adds	r3, r7, r4
 8004a24:	2200      	movs	r2, #0
 8004a26:	649a      	str	r2, [r3, #72]	@ 0x48

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004a28:	193b      	adds	r3, r7, r4
 8004a2a:	0018      	movs	r0, r3
 8004a2c:	f001 fcc0 	bl	80063b0 <HAL_RCCEx_PeriphCLKConfig>
 8004a30:	1e03      	subs	r3, r0, #0
 8004a32:	d001      	beq.n	8004a38 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8004a34:	f7ff ff8a 	bl	800494c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8004a38:	4b1b      	ldr	r3, [pc, #108]	@ (8004aa8 <HAL_FDCAN_MspInit+0xc0>)
 8004a3a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a3c:	4b1a      	ldr	r3, [pc, #104]	@ (8004aa8 <HAL_FDCAN_MspInit+0xc0>)
 8004a3e:	2180      	movs	r1, #128	@ 0x80
 8004a40:	0149      	lsls	r1, r1, #5
 8004a42:	430a      	orrs	r2, r1
 8004a44:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004a46:	4b18      	ldr	r3, [pc, #96]	@ (8004aa8 <HAL_FDCAN_MspInit+0xc0>)
 8004a48:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a4a:	2380      	movs	r3, #128	@ 0x80
 8004a4c:	015b      	lsls	r3, r3, #5
 8004a4e:	4013      	ands	r3, r2
 8004a50:	60fb      	str	r3, [r7, #12]
 8004a52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a54:	4b14      	ldr	r3, [pc, #80]	@ (8004aa8 <HAL_FDCAN_MspInit+0xc0>)
 8004a56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a58:	4b13      	ldr	r3, [pc, #76]	@ (8004aa8 <HAL_FDCAN_MspInit+0xc0>)
 8004a5a:	2101      	movs	r1, #1
 8004a5c:	430a      	orrs	r2, r1
 8004a5e:	635a      	str	r2, [r3, #52]	@ 0x34
 8004a60:	4b11      	ldr	r3, [pc, #68]	@ (8004aa8 <HAL_FDCAN_MspInit+0xc0>)
 8004a62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a64:	2201      	movs	r2, #1
 8004a66:	4013      	ands	r3, r2
 8004a68:	60bb      	str	r3, [r7, #8]
 8004a6a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11 [PA9]     ------> FDCAN1_RX
    PA12 [PA10]     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004a6c:	215c      	movs	r1, #92	@ 0x5c
 8004a6e:	187b      	adds	r3, r7, r1
 8004a70:	22c0      	movs	r2, #192	@ 0xc0
 8004a72:	0152      	lsls	r2, r2, #5
 8004a74:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a76:	187b      	adds	r3, r7, r1
 8004a78:	2202      	movs	r2, #2
 8004a7a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a7c:	187b      	adds	r3, r7, r1
 8004a7e:	2200      	movs	r2, #0
 8004a80:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a82:	187b      	adds	r3, r7, r1
 8004a84:	2200      	movs	r2, #0
 8004a86:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_FDCAN1;
 8004a88:	187b      	adds	r3, r7, r1
 8004a8a:	2203      	movs	r2, #3
 8004a8c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a8e:	187a      	adds	r2, r7, r1
 8004a90:	23a0      	movs	r3, #160	@ 0xa0
 8004a92:	05db      	lsls	r3, r3, #23
 8004a94:	0011      	movs	r1, r2
 8004a96:	0018      	movs	r0, r3
 8004a98:	f000 fdaa 	bl	80055f0 <HAL_GPIO_Init>

    /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8004a9c:	46c0      	nop			@ (mov r8, r8)
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	b01d      	add	sp, #116	@ 0x74
 8004aa2:	bd90      	pop	{r4, r7, pc}
 8004aa4:	40006400 	.word	0x40006400
 8004aa8:	40021000 	.word	0x40021000

08004aac <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004aac:	b590      	push	{r4, r7, lr}
 8004aae:	b09d      	sub	sp, #116	@ 0x74
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ab4:	235c      	movs	r3, #92	@ 0x5c
 8004ab6:	18fb      	adds	r3, r7, r3
 8004ab8:	0018      	movs	r0, r3
 8004aba:	2314      	movs	r3, #20
 8004abc:	001a      	movs	r2, r3
 8004abe:	2100      	movs	r1, #0
 8004ac0:	f002 fdac 	bl	800761c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004ac4:	2410      	movs	r4, #16
 8004ac6:	193b      	adds	r3, r7, r4
 8004ac8:	0018      	movs	r0, r3
 8004aca:	234c      	movs	r3, #76	@ 0x4c
 8004acc:	001a      	movs	r2, r3
 8004ace:	2100      	movs	r1, #0
 8004ad0:	f002 fda4 	bl	800761c <memset>
  if(huart->Instance==USART2)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a22      	ldr	r2, [pc, #136]	@ (8004b64 <HAL_UART_MspInit+0xb8>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d13e      	bne.n	8004b5c <HAL_UART_MspInit+0xb0>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004ade:	193b      	adds	r3, r7, r4
 8004ae0:	2202      	movs	r2, #2
 8004ae2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004ae4:	193b      	adds	r3, r7, r4
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004aea:	193b      	adds	r3, r7, r4
 8004aec:	0018      	movs	r0, r3
 8004aee:	f001 fc5f 	bl	80063b0 <HAL_RCCEx_PeriphCLKConfig>
 8004af2:	1e03      	subs	r3, r0, #0
 8004af4:	d001      	beq.n	8004afa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004af6:	f7ff ff29 	bl	800494c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004afa:	4b1b      	ldr	r3, [pc, #108]	@ (8004b68 <HAL_UART_MspInit+0xbc>)
 8004afc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004afe:	4b1a      	ldr	r3, [pc, #104]	@ (8004b68 <HAL_UART_MspInit+0xbc>)
 8004b00:	2180      	movs	r1, #128	@ 0x80
 8004b02:	0289      	lsls	r1, r1, #10
 8004b04:	430a      	orrs	r2, r1
 8004b06:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004b08:	4b17      	ldr	r3, [pc, #92]	@ (8004b68 <HAL_UART_MspInit+0xbc>)
 8004b0a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b0c:	2380      	movs	r3, #128	@ 0x80
 8004b0e:	029b      	lsls	r3, r3, #10
 8004b10:	4013      	ands	r3, r2
 8004b12:	60fb      	str	r3, [r7, #12]
 8004b14:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b16:	4b14      	ldr	r3, [pc, #80]	@ (8004b68 <HAL_UART_MspInit+0xbc>)
 8004b18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b1a:	4b13      	ldr	r3, [pc, #76]	@ (8004b68 <HAL_UART_MspInit+0xbc>)
 8004b1c:	2101      	movs	r1, #1
 8004b1e:	430a      	orrs	r2, r1
 8004b20:	635a      	str	r2, [r3, #52]	@ 0x34
 8004b22:	4b11      	ldr	r3, [pc, #68]	@ (8004b68 <HAL_UART_MspInit+0xbc>)
 8004b24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b26:	2201      	movs	r2, #1
 8004b28:	4013      	ands	r3, r2
 8004b2a:	60bb      	str	r3, [r7, #8]
 8004b2c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8004b2e:	215c      	movs	r1, #92	@ 0x5c
 8004b30:	187b      	adds	r3, r7, r1
 8004b32:	220c      	movs	r2, #12
 8004b34:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b36:	187b      	adds	r3, r7, r1
 8004b38:	2202      	movs	r2, #2
 8004b3a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b3c:	187b      	adds	r3, r7, r1
 8004b3e:	2200      	movs	r2, #0
 8004b40:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b42:	187b      	adds	r3, r7, r1
 8004b44:	2200      	movs	r2, #0
 8004b46:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8004b48:	187b      	adds	r3, r7, r1
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b4e:	187a      	adds	r2, r7, r1
 8004b50:	23a0      	movs	r3, #160	@ 0xa0
 8004b52:	05db      	lsls	r3, r3, #23
 8004b54:	0011      	movs	r1, r2
 8004b56:	0018      	movs	r0, r3
 8004b58:	f000 fd4a 	bl	80055f0 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8004b5c:	46c0      	nop			@ (mov r8, r8)
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	b01d      	add	sp, #116	@ 0x74
 8004b62:	bd90      	pop	{r4, r7, pc}
 8004b64:	40004400 	.word	0x40004400
 8004b68:	40021000 	.word	0x40021000

08004b6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004b70:	46c0      	nop			@ (mov r8, r8)
 8004b72:	e7fd      	b.n	8004b70 <NMI_Handler+0x4>

08004b74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004b78:	46c0      	nop			@ (mov r8, r8)
 8004b7a:	e7fd      	b.n	8004b78 <HardFault_Handler+0x4>

08004b7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004b80:	46c0      	nop			@ (mov r8, r8)
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}

08004b86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004b86:	b580      	push	{r7, lr}
 8004b88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004b8a:	46c0      	nop			@ (mov r8, r8)
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004b94:	f000 f89c 	bl	8004cd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004b98:	46c0      	nop			@ (mov r8, r8)
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}

08004b9e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004b9e:	b580      	push	{r7, lr}
 8004ba0:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004ba2:	46c0      	nop			@ (mov r8, r8)
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004ba8:	480d      	ldr	r0, [pc, #52]	@ (8004be0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004baa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004bac:	f7ff fff7 	bl	8004b9e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004bb0:	480c      	ldr	r0, [pc, #48]	@ (8004be4 <LoopForever+0x6>)
  ldr r1, =_edata
 8004bb2:	490d      	ldr	r1, [pc, #52]	@ (8004be8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004bb4:	4a0d      	ldr	r2, [pc, #52]	@ (8004bec <LoopForever+0xe>)
  movs r3, #0
 8004bb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004bb8:	e002      	b.n	8004bc0 <LoopCopyDataInit>

08004bba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004bba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004bbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004bbe:	3304      	adds	r3, #4

08004bc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004bc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004bc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004bc4:	d3f9      	bcc.n	8004bba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004bc6:	4a0a      	ldr	r2, [pc, #40]	@ (8004bf0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004bc8:	4c0a      	ldr	r4, [pc, #40]	@ (8004bf4 <LoopForever+0x16>)
  movs r3, #0
 8004bca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004bcc:	e001      	b.n	8004bd2 <LoopFillZerobss>

08004bce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004bce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004bd0:	3204      	adds	r2, #4

08004bd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004bd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004bd4:	d3fb      	bcc.n	8004bce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004bd6:	f002 fd29 	bl	800762c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8004bda:	f7ff fd1f 	bl	800461c <main>

08004bde <LoopForever>:

LoopForever:
  b LoopForever
 8004bde:	e7fe      	b.n	8004bde <LoopForever>
  ldr   r0, =_estack
 8004be0:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8004be4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004be8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8004bec:	08007724 	.word	0x08007724
  ldr r2, =_sbss
 8004bf0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8004bf4:	20000148 	.word	0x20000148

08004bf8 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004bf8:	e7fe      	b.n	8004bf8 <ADC1_COMP_IRQHandler>
	...

08004bfc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b082      	sub	sp, #8
 8004c00:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004c02:	1dfb      	adds	r3, r7, #7
 8004c04:	2200      	movs	r2, #0
 8004c06:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004c08:	4b0b      	ldr	r3, [pc, #44]	@ (8004c38 <HAL_Init+0x3c>)
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	4b0a      	ldr	r3, [pc, #40]	@ (8004c38 <HAL_Init+0x3c>)
 8004c0e:	2180      	movs	r1, #128	@ 0x80
 8004c10:	0049      	lsls	r1, r1, #1
 8004c12:	430a      	orrs	r2, r1
 8004c14:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004c16:	2000      	movs	r0, #0
 8004c18:	f000 f810 	bl	8004c3c <HAL_InitTick>
 8004c1c:	1e03      	subs	r3, r0, #0
 8004c1e:	d003      	beq.n	8004c28 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8004c20:	1dfb      	adds	r3, r7, #7
 8004c22:	2201      	movs	r2, #1
 8004c24:	701a      	strb	r2, [r3, #0]
 8004c26:	e001      	b.n	8004c2c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8004c28:	f7ff fe96 	bl	8004958 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004c2c:	1dfb      	adds	r3, r7, #7
 8004c2e:	781b      	ldrb	r3, [r3, #0]
}
 8004c30:	0018      	movs	r0, r3
 8004c32:	46bd      	mov	sp, r7
 8004c34:	b002      	add	sp, #8
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	40022000 	.word	0x40022000

08004c3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004c3c:	b590      	push	{r4, r7, lr}
 8004c3e:	b085      	sub	sp, #20
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004c44:	230f      	movs	r3, #15
 8004c46:	18fb      	adds	r3, r7, r3
 8004c48:	2200      	movs	r2, #0
 8004c4a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8004c4c:	4b1d      	ldr	r3, [pc, #116]	@ (8004cc4 <HAL_InitTick+0x88>)
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d02b      	beq.n	8004cac <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8004c54:	4b1c      	ldr	r3, [pc, #112]	@ (8004cc8 <HAL_InitTick+0x8c>)
 8004c56:	681c      	ldr	r4, [r3, #0]
 8004c58:	4b1a      	ldr	r3, [pc, #104]	@ (8004cc4 <HAL_InitTick+0x88>)
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	0019      	movs	r1, r3
 8004c5e:	23fa      	movs	r3, #250	@ 0xfa
 8004c60:	0098      	lsls	r0, r3, #2
 8004c62:	f7ff fa4f 	bl	8004104 <__udivsi3>
 8004c66:	0003      	movs	r3, r0
 8004c68:	0019      	movs	r1, r3
 8004c6a:	0020      	movs	r0, r4
 8004c6c:	f7ff fa4a 	bl	8004104 <__udivsi3>
 8004c70:	0003      	movs	r3, r0
 8004c72:	0018      	movs	r0, r3
 8004c74:	f000 f905 	bl	8004e82 <HAL_SYSTICK_Config>
 8004c78:	1e03      	subs	r3, r0, #0
 8004c7a:	d112      	bne.n	8004ca2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2b03      	cmp	r3, #3
 8004c80:	d80a      	bhi.n	8004c98 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004c82:	6879      	ldr	r1, [r7, #4]
 8004c84:	2301      	movs	r3, #1
 8004c86:	425b      	negs	r3, r3
 8004c88:	2200      	movs	r2, #0
 8004c8a:	0018      	movs	r0, r3
 8004c8c:	f000 f8e4 	bl	8004e58 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004c90:	4b0e      	ldr	r3, [pc, #56]	@ (8004ccc <HAL_InitTick+0x90>)
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	601a      	str	r2, [r3, #0]
 8004c96:	e00d      	b.n	8004cb4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8004c98:	230f      	movs	r3, #15
 8004c9a:	18fb      	adds	r3, r7, r3
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	701a      	strb	r2, [r3, #0]
 8004ca0:	e008      	b.n	8004cb4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004ca2:	230f      	movs	r3, #15
 8004ca4:	18fb      	adds	r3, r7, r3
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	701a      	strb	r2, [r3, #0]
 8004caa:	e003      	b.n	8004cb4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004cac:	230f      	movs	r3, #15
 8004cae:	18fb      	adds	r3, r7, r3
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8004cb4:	230f      	movs	r3, #15
 8004cb6:	18fb      	adds	r3, r7, r3
 8004cb8:	781b      	ldrb	r3, [r3, #0]
}
 8004cba:	0018      	movs	r0, r3
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	b005      	add	sp, #20
 8004cc0:	bd90      	pop	{r4, r7, pc}
 8004cc2:	46c0      	nop			@ (mov r8, r8)
 8004cc4:	20000008 	.word	0x20000008
 8004cc8:	20000000 	.word	0x20000000
 8004ccc:	20000004 	.word	0x20000004

08004cd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004cd4:	4b05      	ldr	r3, [pc, #20]	@ (8004cec <HAL_IncTick+0x1c>)
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	001a      	movs	r2, r3
 8004cda:	4b05      	ldr	r3, [pc, #20]	@ (8004cf0 <HAL_IncTick+0x20>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	18d2      	adds	r2, r2, r3
 8004ce0:	4b03      	ldr	r3, [pc, #12]	@ (8004cf0 <HAL_IncTick+0x20>)
 8004ce2:	601a      	str	r2, [r3, #0]
}
 8004ce4:	46c0      	nop			@ (mov r8, r8)
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	46c0      	nop			@ (mov r8, r8)
 8004cec:	20000008 	.word	0x20000008
 8004cf0:	20000144 	.word	0x20000144

08004cf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	af00      	add	r7, sp, #0
  return uwTick;
 8004cf8:	4b02      	ldr	r3, [pc, #8]	@ (8004d04 <HAL_GetTick+0x10>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
}
 8004cfc:	0018      	movs	r0, r3
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	46c0      	nop			@ (mov r8, r8)
 8004d04:	20000144 	.word	0x20000144

08004d08 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b082      	sub	sp, #8
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8004d10:	4b06      	ldr	r3, [pc, #24]	@ (8004d2c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a06      	ldr	r2, [pc, #24]	@ (8004d30 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8004d16:	4013      	ands	r3, r2
 8004d18:	0019      	movs	r1, r3
 8004d1a:	4b04      	ldr	r3, [pc, #16]	@ (8004d2c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	430a      	orrs	r2, r1
 8004d20:	601a      	str	r2, [r3, #0]
}
 8004d22:	46c0      	nop			@ (mov r8, r8)
 8004d24:	46bd      	mov	sp, r7
 8004d26:	b002      	add	sp, #8
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	46c0      	nop			@ (mov r8, r8)
 8004d2c:	40010000 	.word	0x40010000
 8004d30:	fffff9ff 	.word	0xfffff9ff

08004d34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004d34:	b590      	push	{r4, r7, lr}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	0002      	movs	r2, r0
 8004d3c:	6039      	str	r1, [r7, #0]
 8004d3e:	1dfb      	adds	r3, r7, #7
 8004d40:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004d42:	1dfb      	adds	r3, r7, #7
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	2b7f      	cmp	r3, #127	@ 0x7f
 8004d48:	d828      	bhi.n	8004d9c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004d4a:	4a2f      	ldr	r2, [pc, #188]	@ (8004e08 <__NVIC_SetPriority+0xd4>)
 8004d4c:	1dfb      	adds	r3, r7, #7
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	b25b      	sxtb	r3, r3
 8004d52:	089b      	lsrs	r3, r3, #2
 8004d54:	33c0      	adds	r3, #192	@ 0xc0
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	589b      	ldr	r3, [r3, r2]
 8004d5a:	1dfa      	adds	r2, r7, #7
 8004d5c:	7812      	ldrb	r2, [r2, #0]
 8004d5e:	0011      	movs	r1, r2
 8004d60:	2203      	movs	r2, #3
 8004d62:	400a      	ands	r2, r1
 8004d64:	00d2      	lsls	r2, r2, #3
 8004d66:	21ff      	movs	r1, #255	@ 0xff
 8004d68:	4091      	lsls	r1, r2
 8004d6a:	000a      	movs	r2, r1
 8004d6c:	43d2      	mvns	r2, r2
 8004d6e:	401a      	ands	r2, r3
 8004d70:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	019b      	lsls	r3, r3, #6
 8004d76:	22ff      	movs	r2, #255	@ 0xff
 8004d78:	401a      	ands	r2, r3
 8004d7a:	1dfb      	adds	r3, r7, #7
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	0018      	movs	r0, r3
 8004d80:	2303      	movs	r3, #3
 8004d82:	4003      	ands	r3, r0
 8004d84:	00db      	lsls	r3, r3, #3
 8004d86:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004d88:	481f      	ldr	r0, [pc, #124]	@ (8004e08 <__NVIC_SetPriority+0xd4>)
 8004d8a:	1dfb      	adds	r3, r7, #7
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	b25b      	sxtb	r3, r3
 8004d90:	089b      	lsrs	r3, r3, #2
 8004d92:	430a      	orrs	r2, r1
 8004d94:	33c0      	adds	r3, #192	@ 0xc0
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004d9a:	e031      	b.n	8004e00 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004d9c:	4a1b      	ldr	r2, [pc, #108]	@ (8004e0c <__NVIC_SetPriority+0xd8>)
 8004d9e:	1dfb      	adds	r3, r7, #7
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	0019      	movs	r1, r3
 8004da4:	230f      	movs	r3, #15
 8004da6:	400b      	ands	r3, r1
 8004da8:	3b08      	subs	r3, #8
 8004daa:	089b      	lsrs	r3, r3, #2
 8004dac:	3306      	adds	r3, #6
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	18d3      	adds	r3, r2, r3
 8004db2:	3304      	adds	r3, #4
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	1dfa      	adds	r2, r7, #7
 8004db8:	7812      	ldrb	r2, [r2, #0]
 8004dba:	0011      	movs	r1, r2
 8004dbc:	2203      	movs	r2, #3
 8004dbe:	400a      	ands	r2, r1
 8004dc0:	00d2      	lsls	r2, r2, #3
 8004dc2:	21ff      	movs	r1, #255	@ 0xff
 8004dc4:	4091      	lsls	r1, r2
 8004dc6:	000a      	movs	r2, r1
 8004dc8:	43d2      	mvns	r2, r2
 8004dca:	401a      	ands	r2, r3
 8004dcc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	019b      	lsls	r3, r3, #6
 8004dd2:	22ff      	movs	r2, #255	@ 0xff
 8004dd4:	401a      	ands	r2, r3
 8004dd6:	1dfb      	adds	r3, r7, #7
 8004dd8:	781b      	ldrb	r3, [r3, #0]
 8004dda:	0018      	movs	r0, r3
 8004ddc:	2303      	movs	r3, #3
 8004dde:	4003      	ands	r3, r0
 8004de0:	00db      	lsls	r3, r3, #3
 8004de2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004de4:	4809      	ldr	r0, [pc, #36]	@ (8004e0c <__NVIC_SetPriority+0xd8>)
 8004de6:	1dfb      	adds	r3, r7, #7
 8004de8:	781b      	ldrb	r3, [r3, #0]
 8004dea:	001c      	movs	r4, r3
 8004dec:	230f      	movs	r3, #15
 8004dee:	4023      	ands	r3, r4
 8004df0:	3b08      	subs	r3, #8
 8004df2:	089b      	lsrs	r3, r3, #2
 8004df4:	430a      	orrs	r2, r1
 8004df6:	3306      	adds	r3, #6
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	18c3      	adds	r3, r0, r3
 8004dfc:	3304      	adds	r3, #4
 8004dfe:	601a      	str	r2, [r3, #0]
}
 8004e00:	46c0      	nop			@ (mov r8, r8)
 8004e02:	46bd      	mov	sp, r7
 8004e04:	b003      	add	sp, #12
 8004e06:	bd90      	pop	{r4, r7, pc}
 8004e08:	e000e100 	.word	0xe000e100
 8004e0c:	e000ed00 	.word	0xe000ed00

08004e10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b082      	sub	sp, #8
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	1e5a      	subs	r2, r3, #1
 8004e1c:	2380      	movs	r3, #128	@ 0x80
 8004e1e:	045b      	lsls	r3, r3, #17
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d301      	bcc.n	8004e28 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004e24:	2301      	movs	r3, #1
 8004e26:	e010      	b.n	8004e4a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004e28:	4b0a      	ldr	r3, [pc, #40]	@ (8004e54 <SysTick_Config+0x44>)
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	3a01      	subs	r2, #1
 8004e2e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004e30:	2301      	movs	r3, #1
 8004e32:	425b      	negs	r3, r3
 8004e34:	2103      	movs	r1, #3
 8004e36:	0018      	movs	r0, r3
 8004e38:	f7ff ff7c 	bl	8004d34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e3c:	4b05      	ldr	r3, [pc, #20]	@ (8004e54 <SysTick_Config+0x44>)
 8004e3e:	2200      	movs	r2, #0
 8004e40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e42:	4b04      	ldr	r3, [pc, #16]	@ (8004e54 <SysTick_Config+0x44>)
 8004e44:	2207      	movs	r2, #7
 8004e46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	0018      	movs	r0, r3
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	b002      	add	sp, #8
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	46c0      	nop			@ (mov r8, r8)
 8004e54:	e000e010 	.word	0xe000e010

08004e58 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	60b9      	str	r1, [r7, #8]
 8004e60:	607a      	str	r2, [r7, #4]
 8004e62:	210f      	movs	r1, #15
 8004e64:	187b      	adds	r3, r7, r1
 8004e66:	1c02      	adds	r2, r0, #0
 8004e68:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8004e6a:	68ba      	ldr	r2, [r7, #8]
 8004e6c:	187b      	adds	r3, r7, r1
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	b25b      	sxtb	r3, r3
 8004e72:	0011      	movs	r1, r2
 8004e74:	0018      	movs	r0, r3
 8004e76:	f7ff ff5d 	bl	8004d34 <__NVIC_SetPriority>
}
 8004e7a:	46c0      	nop			@ (mov r8, r8)
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	b004      	add	sp, #16
 8004e80:	bd80      	pop	{r7, pc}

08004e82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004e82:	b580      	push	{r7, lr}
 8004e84:	b082      	sub	sp, #8
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	0018      	movs	r0, r3
 8004e8e:	f7ff ffbf 	bl	8004e10 <SysTick_Config>
 8004e92:	0003      	movs	r3, r0
}
 8004e94:	0018      	movs	r0, r3
 8004e96:	46bd      	mov	sp, r7
 8004e98:	b002      	add	sp, #8
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b082      	sub	sp, #8
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d101      	bne.n	8004eae <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e056      	b.n	8004f5c <HAL_CRC_Init+0xc0>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	7f5b      	ldrb	r3, [r3, #29]
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d106      	bne.n	8004ec6 <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	0018      	movs	r0, r3
 8004ec2:	f7ff fd71 	bl	80049a8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2202      	movs	r2, #2
 8004eca:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	791b      	ldrb	r3, [r3, #4]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d10c      	bne.n	8004eee <HAL_CRC_Init+0x52>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a22      	ldr	r2, [pc, #136]	@ (8004f64 <HAL_CRC_Init+0xc8>)
 8004eda:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	689a      	ldr	r2, [r3, #8]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2118      	movs	r1, #24
 8004ee8:	438a      	bics	r2, r1
 8004eea:	609a      	str	r2, [r3, #8]
 8004eec:	e00b      	b.n	8004f06 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6899      	ldr	r1, [r3, #8]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	68da      	ldr	r2, [r3, #12]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	0018      	movs	r0, r3
 8004efa:	f000 f835 	bl	8004f68 <HAL_CRCEx_Polynomial_Set>
 8004efe:	1e03      	subs	r3, r0, #0
 8004f00:	d001      	beq.n	8004f06 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e02a      	b.n	8004f5c <HAL_CRC_Init+0xc0>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	795b      	ldrb	r3, [r3, #5]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d105      	bne.n	8004f1a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	2201      	movs	r2, #1
 8004f14:	4252      	negs	r2, r2
 8004f16:	611a      	str	r2, [r3, #16]
 8004f18:	e004      	b.n	8004f24 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	6912      	ldr	r2, [r2, #16]
 8004f22:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	2260      	movs	r2, #96	@ 0x60
 8004f2c:	4393      	bics	r3, r2
 8004f2e:	0019      	movs	r1, r3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	695a      	ldr	r2, [r3, #20]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	430a      	orrs	r2, r1
 8004f3a:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	2280      	movs	r2, #128	@ 0x80
 8004f44:	4393      	bics	r3, r2
 8004f46:	0019      	movs	r1, r3
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	699a      	ldr	r2, [r3, #24]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	430a      	orrs	r2, r1
 8004f52:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004f5a:	2300      	movs	r3, #0
}
 8004f5c:	0018      	movs	r0, r3
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	b002      	add	sp, #8
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	04c11db7 	.word	0x04c11db7

08004f68 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b086      	sub	sp, #24
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f74:	2117      	movs	r1, #23
 8004f76:	187b      	adds	r3, r7, r1
 8004f78:	2200      	movs	r2, #0
 8004f7a:	701a      	strb	r2, [r3, #0]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004f7c:	231f      	movs	r3, #31
 8004f7e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	2201      	movs	r2, #1
 8004f84:	4013      	ands	r3, r2
 8004f86:	d103      	bne.n	8004f90 <HAL_CRCEx_Polynomial_Set+0x28>
  {
    status =  HAL_ERROR;
 8004f88:	187b      	adds	r3, r7, r1
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	701a      	strb	r2, [r3, #0]
 8004f8e:	e045      	b.n	800501c <HAL_CRCEx_Polynomial_Set+0xb4>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004f90:	46c0      	nop			@ (mov r8, r8)
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	1e5a      	subs	r2, r3, #1
 8004f96:	613a      	str	r2, [r7, #16]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d008      	beq.n	8004fae <HAL_CRCEx_Polynomial_Set+0x46>
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	221f      	movs	r2, #31
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	68ba      	ldr	r2, [r7, #8]
 8004fa4:	40da      	lsrs	r2, r3
 8004fa6:	0013      	movs	r3, r2
 8004fa8:	2201      	movs	r2, #1
 8004faa:	4013      	ands	r3, r2
 8004fac:	d0f1      	beq.n	8004f92 <HAL_CRCEx_Polynomial_Set+0x2a>
    {
    }

    switch (PolyLength)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2b18      	cmp	r3, #24
 8004fb2:	d00f      	beq.n	8004fd4 <HAL_CRCEx_Polynomial_Set+0x6c>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2b18      	cmp	r3, #24
 8004fb8:	d824      	bhi.n	8005004 <HAL_CRCEx_Polynomial_Set+0x9c>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2b10      	cmp	r3, #16
 8004fbe:	d011      	beq.n	8004fe4 <HAL_CRCEx_Polynomial_Set+0x7c>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2b10      	cmp	r3, #16
 8004fc4:	d81e      	bhi.n	8005004 <HAL_CRCEx_Polynomial_Set+0x9c>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d020      	beq.n	800500e <HAL_CRCEx_Polynomial_Set+0xa6>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2b08      	cmp	r3, #8
 8004fd0:	d010      	beq.n	8004ff4 <HAL_CRCEx_Polynomial_Set+0x8c>
 8004fd2:	e017      	b.n	8005004 <HAL_CRCEx_Polynomial_Set+0x9c>
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	2b06      	cmp	r3, #6
 8004fd8:	d91b      	bls.n	8005012 <HAL_CRCEx_Polynomial_Set+0xaa>
        {
          status =   HAL_ERROR;
 8004fda:	2317      	movs	r3, #23
 8004fdc:	18fb      	adds	r3, r7, r3
 8004fde:	2201      	movs	r2, #1
 8004fe0:	701a      	strb	r2, [r3, #0]
        }
        break;
 8004fe2:	e016      	b.n	8005012 <HAL_CRCEx_Polynomial_Set+0xaa>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	2b07      	cmp	r3, #7
 8004fe8:	d915      	bls.n	8005016 <HAL_CRCEx_Polynomial_Set+0xae>
        {
          status =   HAL_ERROR;
 8004fea:	2317      	movs	r3, #23
 8004fec:	18fb      	adds	r3, r7, r3
 8004fee:	2201      	movs	r2, #1
 8004ff0:	701a      	strb	r2, [r3, #0]
        }
        break;
 8004ff2:	e010      	b.n	8005016 <HAL_CRCEx_Polynomial_Set+0xae>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	2b0f      	cmp	r3, #15
 8004ff8:	d90f      	bls.n	800501a <HAL_CRCEx_Polynomial_Set+0xb2>
        {
          status =   HAL_ERROR;
 8004ffa:	2317      	movs	r3, #23
 8004ffc:	18fb      	adds	r3, r7, r3
 8004ffe:	2201      	movs	r2, #1
 8005000:	701a      	strb	r2, [r3, #0]
        }
        break;
 8005002:	e00a      	b.n	800501a <HAL_CRCEx_Polynomial_Set+0xb2>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8005004:	2317      	movs	r3, #23
 8005006:	18fb      	adds	r3, r7, r3
 8005008:	2201      	movs	r2, #1
 800500a:	701a      	strb	r2, [r3, #0]
        break;
 800500c:	e006      	b.n	800501c <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 800500e:	46c0      	nop			@ (mov r8, r8)
 8005010:	e004      	b.n	800501c <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 8005012:	46c0      	nop			@ (mov r8, r8)
 8005014:	e002      	b.n	800501c <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 8005016:	46c0      	nop			@ (mov r8, r8)
 8005018:	e000      	b.n	800501c <HAL_CRCEx_Polynomial_Set+0xb4>
        break;
 800501a:	46c0      	nop			@ (mov r8, r8)
    }
  }
  if (status == HAL_OK)
 800501c:	2317      	movs	r3, #23
 800501e:	18fb      	adds	r3, r7, r3
 8005020:	781b      	ldrb	r3, [r3, #0]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d10e      	bne.n	8005044 <HAL_CRCEx_Polynomial_Set+0xdc>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	68ba      	ldr	r2, [r7, #8]
 800502c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	2218      	movs	r2, #24
 8005036:	4393      	bics	r3, r2
 8005038:	0019      	movs	r1, r3
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	430a      	orrs	r2, r1
 8005042:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8005044:	2317      	movs	r3, #23
 8005046:	18fb      	adds	r3, r7, r3
 8005048:	781b      	ldrb	r3, [r3, #0]
}
 800504a:	0018      	movs	r0, r3
 800504c:	46bd      	mov	sp, r7
 800504e:	b006      	add	sp, #24
 8005050:	bd80      	pop	{r7, pc}
	...

08005054 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b084      	sub	sp, #16
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d101      	bne.n	8005066 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e14e      	b.n	8005304 <HAL_FDCAN_Init+0x2b0>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	225c      	movs	r2, #92	@ 0x5c
 800506a:	5c9b      	ldrb	r3, [r3, r2]
 800506c:	b2db      	uxtb	r3, r3
 800506e:	2b00      	cmp	r3, #0
 8005070:	d107      	bne.n	8005082 <HAL_FDCAN_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	225d      	movs	r2, #93	@ 0x5d
 8005076:	2100      	movs	r1, #0
 8005078:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	0018      	movs	r0, r3
 800507e:	f7ff fcb3 	bl	80049e8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	699a      	ldr	r2, [r3, #24]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	2110      	movs	r1, #16
 800508e:	438a      	bics	r2, r1
 8005090:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005092:	f7ff fe2f 	bl	8004cf4 <HAL_GetTick>
 8005096:	0003      	movs	r3, r0
 8005098:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800509a:	e012      	b.n	80050c2 <HAL_FDCAN_Init+0x6e>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800509c:	f7ff fe2a 	bl	8004cf4 <HAL_GetTick>
 80050a0:	0002      	movs	r2, r0
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	2b0a      	cmp	r3, #10
 80050a8:	d90b      	bls.n	80050c2 <HAL_FDCAN_Init+0x6e>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050ae:	2201      	movs	r2, #1
 80050b0:	431a      	orrs	r2, r3
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	225c      	movs	r2, #92	@ 0x5c
 80050ba:	2103      	movs	r1, #3
 80050bc:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e120      	b.n	8005304 <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	699b      	ldr	r3, [r3, #24]
 80050c8:	2208      	movs	r2, #8
 80050ca:	4013      	ands	r3, r2
 80050cc:	2b08      	cmp	r3, #8
 80050ce:	d0e5      	beq.n	800509c <HAL_FDCAN_Init+0x48>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	699a      	ldr	r2, [r3, #24]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2101      	movs	r1, #1
 80050dc:	430a      	orrs	r2, r1
 80050de:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80050e0:	f7ff fe08 	bl	8004cf4 <HAL_GetTick>
 80050e4:	0003      	movs	r3, r0
 80050e6:	60fb      	str	r3, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80050e8:	e012      	b.n	8005110 <HAL_FDCAN_Init+0xbc>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80050ea:	f7ff fe03 	bl	8004cf4 <HAL_GetTick>
 80050ee:	0002      	movs	r2, r0
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	1ad3      	subs	r3, r2, r3
 80050f4:	2b0a      	cmp	r3, #10
 80050f6:	d90b      	bls.n	8005110 <HAL_FDCAN_Init+0xbc>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050fc:	2201      	movs	r2, #1
 80050fe:	431a      	orrs	r2, r3
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	225c      	movs	r2, #92	@ 0x5c
 8005108:	2103      	movs	r1, #3
 800510a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	e0f9      	b.n	8005304 <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	699b      	ldr	r3, [r3, #24]
 8005116:	2201      	movs	r2, #1
 8005118:	4013      	ands	r3, r2
 800511a:	d0e6      	beq.n	80050ea <HAL_FDCAN_Init+0x96>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	699a      	ldr	r2, [r3, #24]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	2102      	movs	r1, #2
 8005128:	430a      	orrs	r2, r1
 800512a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a76      	ldr	r2, [pc, #472]	@ (800530c <HAL_FDCAN_Init+0x2b8>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d103      	bne.n	800513e <HAL_FDCAN_Init+0xea>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8005136:	4a76      	ldr	r2, [pc, #472]	@ (8005310 <HAL_FDCAN_Init+0x2bc>)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	7c1b      	ldrb	r3, [r3, #16]
 8005142:	2b01      	cmp	r3, #1
 8005144:	d108      	bne.n	8005158 <HAL_FDCAN_Init+0x104>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	699a      	ldr	r2, [r3, #24]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2140      	movs	r1, #64	@ 0x40
 8005152:	438a      	bics	r2, r1
 8005154:	619a      	str	r2, [r3, #24]
 8005156:	e007      	b.n	8005168 <HAL_FDCAN_Init+0x114>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	699a      	ldr	r2, [r3, #24]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	2140      	movs	r1, #64	@ 0x40
 8005164:	430a      	orrs	r2, r1
 8005166:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	7c5b      	ldrb	r3, [r3, #17]
 800516c:	2b01      	cmp	r3, #1
 800516e:	d109      	bne.n	8005184 <HAL_FDCAN_Init+0x130>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	699a      	ldr	r2, [r3, #24]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	2180      	movs	r1, #128	@ 0x80
 800517c:	01c9      	lsls	r1, r1, #7
 800517e:	430a      	orrs	r2, r1
 8005180:	619a      	str	r2, [r3, #24]
 8005182:	e007      	b.n	8005194 <HAL_FDCAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	699a      	ldr	r2, [r3, #24]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4961      	ldr	r1, [pc, #388]	@ (8005314 <HAL_FDCAN_Init+0x2c0>)
 8005190:	400a      	ands	r2, r1
 8005192:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	7c9b      	ldrb	r3, [r3, #18]
 8005198:	2b01      	cmp	r3, #1
 800519a:	d108      	bne.n	80051ae <HAL_FDCAN_Init+0x15a>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	699a      	ldr	r2, [r3, #24]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	495c      	ldr	r1, [pc, #368]	@ (8005318 <HAL_FDCAN_Init+0x2c4>)
 80051a8:	400a      	ands	r2, r1
 80051aa:	619a      	str	r2, [r3, #24]
 80051ac:	e008      	b.n	80051c0 <HAL_FDCAN_Init+0x16c>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	699a      	ldr	r2, [r3, #24]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	2180      	movs	r1, #128	@ 0x80
 80051ba:	0149      	lsls	r1, r1, #5
 80051bc:	430a      	orrs	r2, r1
 80051be:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	699b      	ldr	r3, [r3, #24]
 80051c6:	4a55      	ldr	r2, [pc, #340]	@ (800531c <HAL_FDCAN_Init+0x2c8>)
 80051c8:	4013      	ands	r3, r2
 80051ca:	0019      	movs	r1, r3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	689a      	ldr	r2, [r3, #8]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	430a      	orrs	r2, r1
 80051d6:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	699a      	ldr	r2, [r3, #24]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	21a4      	movs	r1, #164	@ 0xa4
 80051e4:	438a      	bics	r2, r1
 80051e6:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	691a      	ldr	r2, [r3, #16]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	2110      	movs	r1, #16
 80051f4:	438a      	bics	r2, r1
 80051f6:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d108      	bne.n	8005212 <HAL_FDCAN_Init+0x1be>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	699a      	ldr	r2, [r3, #24]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	2104      	movs	r1, #4
 800520c:	430a      	orrs	r2, r1
 800520e:	619a      	str	r2, [r3, #24]
 8005210:	e02c      	b.n	800526c <HAL_FDCAN_Init+0x218>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d028      	beq.n	800526c <HAL_FDCAN_Init+0x218>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	2b02      	cmp	r3, #2
 8005220:	d01c      	beq.n	800525c <HAL_FDCAN_Init+0x208>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	699a      	ldr	r2, [r3, #24]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	2180      	movs	r1, #128	@ 0x80
 800522e:	430a      	orrs	r2, r1
 8005230:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	691a      	ldr	r2, [r3, #16]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	2110      	movs	r1, #16
 800523e:	430a      	orrs	r2, r1
 8005240:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	2b03      	cmp	r3, #3
 8005248:	d110      	bne.n	800526c <HAL_FDCAN_Init+0x218>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	699a      	ldr	r2, [r3, #24]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	2120      	movs	r1, #32
 8005256:	430a      	orrs	r2, r1
 8005258:	619a      	str	r2, [r3, #24]
 800525a:	e007      	b.n	800526c <HAL_FDCAN_Init+0x218>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	699a      	ldr	r2, [r3, #24]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	2120      	movs	r1, #32
 8005268:	430a      	orrs	r2, r1
 800526a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	699b      	ldr	r3, [r3, #24]
 8005270:	3b01      	subs	r3, #1
 8005272:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	69db      	ldr	r3, [r3, #28]
 8005278:	3b01      	subs	r3, #1
 800527a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800527c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6a1b      	ldr	r3, [r3, #32]
 8005282:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005284:	431a      	orrs	r2, r3
 8005286:	0011      	movs	r1, r2
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	695b      	ldr	r3, [r3, #20]
 800528c:	3b01      	subs	r3, #1
 800528e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005294:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005296:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	689a      	ldr	r2, [r3, #8]
 800529c:	23c0      	movs	r3, #192	@ 0xc0
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d115      	bne.n	80052d0 <HAL_FDCAN_Init+0x27c>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052a8:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052ae:	3b01      	subs	r3, #1
 80052b0:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80052b2:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052b8:	3b01      	subs	r3, #1
 80052ba:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80052bc:	431a      	orrs	r2, r3
 80052be:	0011      	movs	r1, r2
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052c4:	3b01      	subs	r3, #1
 80052c6:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80052cc:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80052ce:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	22c0      	movs	r2, #192	@ 0xc0
 80052d6:	5899      	ldr	r1, [r3, r2]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	430a      	orrs	r2, r1
 80052e2:	21c0      	movs	r1, #192	@ 0xc0
 80052e4:	505a      	str	r2, [r3, r1]

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	0018      	movs	r0, r3
 80052ea:	f000 f915 	bl	8005518 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	225c      	movs	r2, #92	@ 0x5c
 80052fe:	2101      	movs	r1, #1
 8005300:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8005302:	2300      	movs	r3, #0
}
 8005304:	0018      	movs	r0, r3
 8005306:	46bd      	mov	sp, r7
 8005308:	b004      	add	sp, #16
 800530a:	bd80      	pop	{r7, pc}
 800530c:	40006400 	.word	0x40006400
 8005310:	40006500 	.word	0x40006500
 8005314:	ffffbfff 	.word	0xffffbfff
 8005318:	ffffefff 	.word	0xffffefff
 800531c:	fffffcff 	.word	0xfffffcff

08005320 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b082      	sub	sp, #8
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	225c      	movs	r2, #92	@ 0x5c
 800532c:	5c9b      	ldrb	r3, [r3, r2]
 800532e:	b2db      	uxtb	r3, r3
 8005330:	2b01      	cmp	r3, #1
 8005332:	d110      	bne.n	8005356 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	225c      	movs	r2, #92	@ 0x5c
 8005338:	2102      	movs	r1, #2
 800533a:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	699a      	ldr	r2, [r3, #24]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	2101      	movs	r1, #1
 8005348:	438a      	bics	r2, r1
 800534a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2200      	movs	r2, #0
 8005350:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8005352:	2300      	movs	r3, #0
 8005354:	e006      	b.n	8005364 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800535a:	2204      	movs	r2, #4
 800535c:	431a      	orrs	r2, r3
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
  }
}
 8005364:	0018      	movs	r0, r3
 8005366:	46bd      	mov	sp, r7
 8005368:	b002      	add	sp, #8
 800536a:	bd80      	pop	{r7, pc}

0800536c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b086      	sub	sp, #24
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005378:	2017      	movs	r0, #23
 800537a:	183b      	adds	r3, r7, r0
 800537c:	68fa      	ldr	r2, [r7, #12]
 800537e:	215c      	movs	r1, #92	@ 0x5c
 8005380:	5c52      	ldrb	r2, [r2, r1]
 8005382:	701a      	strb	r2, [r3, #0]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005384:	0002      	movs	r2, r0
 8005386:	18bb      	adds	r3, r7, r2
 8005388:	781b      	ldrb	r3, [r3, #0]
 800538a:	2b01      	cmp	r3, #1
 800538c:	d004      	beq.n	8005398 <HAL_FDCAN_ActivateNotification+0x2c>
 800538e:	18bb      	adds	r3, r7, r2
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	2b02      	cmp	r3, #2
 8005394:	d000      	beq.n	8005398 <HAL_FDCAN_ActivateNotification+0x2c>
 8005396:	e0b4      	b.n	8005502 <HAL_FDCAN_ActivateNotification+0x196>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800539e:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	2207      	movs	r2, #7
 80053a4:	4013      	ands	r3, r2
 80053a6:	d003      	beq.n	80053b0 <HAL_FDCAN_ActivateNotification+0x44>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	2201      	movs	r2, #1
 80053ac:	4013      	ands	r3, r2
 80053ae:	d034      	beq.n	800541a <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	2238      	movs	r2, #56	@ 0x38
 80053b4:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80053b6:	d003      	beq.n	80053c0 <HAL_FDCAN_ActivateNotification+0x54>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	2202      	movs	r2, #2
 80053bc:	4013      	ands	r3, r2
 80053be:	d02c      	beq.n	800541a <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80053c0:	68ba      	ldr	r2, [r7, #8]
 80053c2:	23e0      	movs	r3, #224	@ 0xe0
 80053c4:	005b      	lsls	r3, r3, #1
 80053c6:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80053c8:	d003      	beq.n	80053d2 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	2204      	movs	r2, #4
 80053ce:	4013      	ands	r3, r2
 80053d0:	d023      	beq.n	800541a <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80053d2:	68ba      	ldr	r2, [r7, #8]
 80053d4:	23f0      	movs	r3, #240	@ 0xf0
 80053d6:	015b      	lsls	r3, r3, #5
 80053d8:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80053da:	d003      	beq.n	80053e4 <HAL_FDCAN_ActivateNotification+0x78>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	2208      	movs	r2, #8
 80053e0:	4013      	ands	r3, r2
 80053e2:	d01a      	beq.n	800541a <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80053e4:	68ba      	ldr	r2, [r7, #8]
 80053e6:	23e0      	movs	r3, #224	@ 0xe0
 80053e8:	021b      	lsls	r3, r3, #8
 80053ea:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80053ec:	d003      	beq.n	80053f6 <HAL_FDCAN_ActivateNotification+0x8a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	2210      	movs	r2, #16
 80053f2:	4013      	ands	r3, r2
 80053f4:	d011      	beq.n	800541a <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80053f6:	68ba      	ldr	r2, [r7, #8]
 80053f8:	23c0      	movs	r3, #192	@ 0xc0
 80053fa:	029b      	lsls	r3, r3, #10
 80053fc:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80053fe:	d003      	beq.n	8005408 <HAL_FDCAN_ActivateNotification+0x9c>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	2220      	movs	r2, #32
 8005404:	4013      	ands	r3, r2
 8005406:	d008      	beq.n	800541a <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8005408:	68ba      	ldr	r2, [r7, #8]
 800540a:	23fc      	movs	r3, #252	@ 0xfc
 800540c:	041b      	lsls	r3, r3, #16
 800540e:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8005410:	d00b      	beq.n	800542a <HAL_FDCAN_ActivateNotification+0xbe>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	2240      	movs	r2, #64	@ 0x40
 8005416:	4013      	ands	r3, r2
 8005418:	d107      	bne.n	800542a <HAL_FDCAN_ActivateNotification+0xbe>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2101      	movs	r1, #1
 8005426:	430a      	orrs	r2, r1
 8005428:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	2207      	movs	r2, #7
 800542e:	4013      	ands	r3, r2
 8005430:	d003      	beq.n	800543a <HAL_FDCAN_ActivateNotification+0xce>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	2201      	movs	r2, #1
 8005436:	4013      	ands	r3, r2
 8005438:	d134      	bne.n	80054a4 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	2238      	movs	r2, #56	@ 0x38
 800543e:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8005440:	d003      	beq.n	800544a <HAL_FDCAN_ActivateNotification+0xde>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	2202      	movs	r2, #2
 8005446:	4013      	ands	r3, r2
 8005448:	d12c      	bne.n	80054a4 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800544a:	68ba      	ldr	r2, [r7, #8]
 800544c:	23e0      	movs	r3, #224	@ 0xe0
 800544e:	005b      	lsls	r3, r3, #1
 8005450:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8005452:	d003      	beq.n	800545c <HAL_FDCAN_ActivateNotification+0xf0>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	2204      	movs	r2, #4
 8005458:	4013      	ands	r3, r2
 800545a:	d123      	bne.n	80054a4 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800545c:	68ba      	ldr	r2, [r7, #8]
 800545e:	23f0      	movs	r3, #240	@ 0xf0
 8005460:	015b      	lsls	r3, r3, #5
 8005462:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8005464:	d003      	beq.n	800546e <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	2208      	movs	r2, #8
 800546a:	4013      	ands	r3, r2
 800546c:	d11a      	bne.n	80054a4 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800546e:	68ba      	ldr	r2, [r7, #8]
 8005470:	23e0      	movs	r3, #224	@ 0xe0
 8005472:	021b      	lsls	r3, r3, #8
 8005474:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8005476:	d003      	beq.n	8005480 <HAL_FDCAN_ActivateNotification+0x114>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	2210      	movs	r2, #16
 800547c:	4013      	ands	r3, r2
 800547e:	d111      	bne.n	80054a4 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8005480:	68ba      	ldr	r2, [r7, #8]
 8005482:	23c0      	movs	r3, #192	@ 0xc0
 8005484:	029b      	lsls	r3, r3, #10
 8005486:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8005488:	d003      	beq.n	8005492 <HAL_FDCAN_ActivateNotification+0x126>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	2220      	movs	r2, #32
 800548e:	4013      	ands	r3, r2
 8005490:	d108      	bne.n	80054a4 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8005492:	68ba      	ldr	r2, [r7, #8]
 8005494:	23fc      	movs	r3, #252	@ 0xfc
 8005496:	041b      	lsls	r3, r3, #16
 8005498:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800549a:	d00b      	beq.n	80054b4 <HAL_FDCAN_ActivateNotification+0x148>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	2240      	movs	r2, #64	@ 0x40
 80054a0:	4013      	ands	r3, r2
 80054a2:	d007      	beq.n	80054b4 <HAL_FDCAN_ActivateNotification+0x148>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	2102      	movs	r1, #2
 80054b0:	430a      	orrs	r2, r1
 80054b2:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	2280      	movs	r2, #128	@ 0x80
 80054b8:	4013      	ands	r3, r2
 80054ba:	d009      	beq.n	80054d0 <HAL_FDCAN_ActivateNotification+0x164>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	22dc      	movs	r2, #220	@ 0xdc
 80054c2:	5899      	ldr	r1, [r3, r2]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	430a      	orrs	r2, r1
 80054cc:	21dc      	movs	r1, #220	@ 0xdc
 80054ce:	505a      	str	r2, [r3, r1]
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80054d0:	68ba      	ldr	r2, [r7, #8]
 80054d2:	2380      	movs	r3, #128	@ 0x80
 80054d4:	005b      	lsls	r3, r3, #1
 80054d6:	4013      	ands	r3, r2
 80054d8:	d009      	beq.n	80054ee <HAL_FDCAN_ActivateNotification+0x182>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	22e0      	movs	r2, #224	@ 0xe0
 80054e0:	5899      	ldr	r1, [r3, r2]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	430a      	orrs	r2, r1
 80054ea:	21e0      	movs	r1, #224	@ 0xe0
 80054ec:	505a      	str	r2, [r3, r1]
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	68ba      	ldr	r2, [r7, #8]
 80054fa:	430a      	orrs	r2, r1
 80054fc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 80054fe:	2300      	movs	r3, #0
 8005500:	e006      	b.n	8005510 <HAL_FDCAN_ActivateNotification+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005506:	2202      	movs	r2, #2
 8005508:	431a      	orrs	r2, r3
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
  }
}
 8005510:	0018      	movs	r0, r3
 8005512:	46bd      	mov	sp, r7
 8005514:	b006      	add	sp, #24
 8005516:	bd80      	pop	{r7, pc}

08005518 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b084      	sub	sp, #16
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8005520:	4b2f      	ldr	r3, [pc, #188]	@ (80055e0 <FDCAN_CalcultateRamBlockAddresses+0xc8>)
 8005522:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a2e      	ldr	r2, [pc, #184]	@ (80055e4 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d105      	bne.n	800553a <FDCAN_CalcultateRamBlockAddresses+0x22>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	22d4      	movs	r2, #212	@ 0xd4
 8005532:	0092      	lsls	r2, r2, #2
 8005534:	4694      	mov	ip, r2
 8005536:	4463      	add	r3, ip
 8005538:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	68ba      	ldr	r2, [r7, #8]
 800553e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	2280      	movs	r2, #128	@ 0x80
 8005546:	589b      	ldr	r3, [r3, r2]
 8005548:	4a27      	ldr	r2, [pc, #156]	@ (80055e8 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 800554a:	4013      	ands	r3, r2
 800554c:	0019      	movs	r1, r3
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005552:	041a      	lsls	r2, r3, #16
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	430a      	orrs	r2, r1
 800555a:	2180      	movs	r1, #128	@ 0x80
 800555c:	505a      	str	r2, [r3, r1]

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	3370      	adds	r3, #112	@ 0x70
 8005562:	001a      	movs	r2, r3
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	2280      	movs	r2, #128	@ 0x80
 800556e:	589b      	ldr	r3, [r3, r2]
 8005570:	4a1e      	ldr	r2, [pc, #120]	@ (80055ec <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8005572:	4013      	ands	r3, r2
 8005574:	0019      	movs	r1, r3
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800557a:	061a      	lsls	r2, r3, #24
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	430a      	orrs	r2, r1
 8005582:	2180      	movs	r1, #128	@ 0x80
 8005584:	505a      	str	r2, [r3, r1]

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	33b0      	adds	r3, #176	@ 0xb0
 800558a:	001a      	movs	r2, r3
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	3389      	adds	r3, #137	@ 0x89
 8005594:	33ff      	adds	r3, #255	@ 0xff
 8005596:	001a      	movs	r2, r3
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	2298      	movs	r2, #152	@ 0x98
 80055a0:	0092      	lsls	r2, r2, #2
 80055a2:	189a      	adds	r2, r3, r2
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	229e      	movs	r2, #158	@ 0x9e
 80055ac:	0092      	lsls	r2, r2, #2
 80055ae:	189a      	adds	r2, r3, r2
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	60fb      	str	r3, [r7, #12]
 80055b8:	e005      	b.n	80055c6 <FDCAN_CalcultateRamBlockAddresses+0xae>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2200      	movs	r2, #0
 80055be:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	3304      	adds	r3, #4
 80055c4:	60fb      	str	r3, [r7, #12]
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	22d4      	movs	r2, #212	@ 0xd4
 80055ca:	0092      	lsls	r2, r2, #2
 80055cc:	4694      	mov	ip, r2
 80055ce:	4463      	add	r3, ip
 80055d0:	68fa      	ldr	r2, [r7, #12]
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d3f1      	bcc.n	80055ba <FDCAN_CalcultateRamBlockAddresses+0xa2>
  }
}
 80055d6:	46c0      	nop			@ (mov r8, r8)
 80055d8:	46c0      	nop			@ (mov r8, r8)
 80055da:	46bd      	mov	sp, r7
 80055dc:	b004      	add	sp, #16
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	4000b400 	.word	0x4000b400
 80055e4:	40006800 	.word	0x40006800
 80055e8:	ffe0ffff 	.word	0xffe0ffff
 80055ec:	f0ffffff 	.word	0xf0ffffff

080055f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b086      	sub	sp, #24
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80055fa:	2300      	movs	r3, #0
 80055fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80055fe:	e14d      	b.n	800589c <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2101      	movs	r1, #1
 8005606:	697a      	ldr	r2, [r7, #20]
 8005608:	4091      	lsls	r1, r2
 800560a:	000a      	movs	r2, r1
 800560c:	4013      	ands	r3, r2
 800560e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d100      	bne.n	8005618 <HAL_GPIO_Init+0x28>
 8005616:	e13e      	b.n	8005896 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	2203      	movs	r2, #3
 800561e:	4013      	ands	r3, r2
 8005620:	2b01      	cmp	r3, #1
 8005622:	d005      	beq.n	8005630 <HAL_GPIO_Init+0x40>
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	2203      	movs	r2, #3
 800562a:	4013      	ands	r3, r2
 800562c:	2b02      	cmp	r3, #2
 800562e:	d130      	bne.n	8005692 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	005b      	lsls	r3, r3, #1
 800563a:	2203      	movs	r2, #3
 800563c:	409a      	lsls	r2, r3
 800563e:	0013      	movs	r3, r2
 8005640:	43da      	mvns	r2, r3
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	4013      	ands	r3, r2
 8005646:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	68da      	ldr	r2, [r3, #12]
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	005b      	lsls	r3, r3, #1
 8005650:	409a      	lsls	r2, r3
 8005652:	0013      	movs	r3, r2
 8005654:	693a      	ldr	r2, [r7, #16]
 8005656:	4313      	orrs	r3, r2
 8005658:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	693a      	ldr	r2, [r7, #16]
 800565e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005666:	2201      	movs	r2, #1
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	409a      	lsls	r2, r3
 800566c:	0013      	movs	r3, r2
 800566e:	43da      	mvns	r2, r3
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	4013      	ands	r3, r2
 8005674:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	091b      	lsrs	r3, r3, #4
 800567c:	2201      	movs	r2, #1
 800567e:	401a      	ands	r2, r3
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	409a      	lsls	r2, r3
 8005684:	0013      	movs	r3, r2
 8005686:	693a      	ldr	r2, [r7, #16]
 8005688:	4313      	orrs	r3, r2
 800568a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	693a      	ldr	r2, [r7, #16]
 8005690:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	2203      	movs	r2, #3
 8005698:	4013      	ands	r3, r2
 800569a:	2b03      	cmp	r3, #3
 800569c:	d017      	beq.n	80056ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	005b      	lsls	r3, r3, #1
 80056a8:	2203      	movs	r2, #3
 80056aa:	409a      	lsls	r2, r3
 80056ac:	0013      	movs	r3, r2
 80056ae:	43da      	mvns	r2, r3
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	4013      	ands	r3, r2
 80056b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	689a      	ldr	r2, [r3, #8]
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	005b      	lsls	r3, r3, #1
 80056be:	409a      	lsls	r2, r3
 80056c0:	0013      	movs	r3, r2
 80056c2:	693a      	ldr	r2, [r7, #16]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	693a      	ldr	r2, [r7, #16]
 80056cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	2203      	movs	r2, #3
 80056d4:	4013      	ands	r3, r2
 80056d6:	2b02      	cmp	r3, #2
 80056d8:	d123      	bne.n	8005722 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	08da      	lsrs	r2, r3, #3
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	3208      	adds	r2, #8
 80056e2:	0092      	lsls	r2, r2, #2
 80056e4:	58d3      	ldr	r3, [r2, r3]
 80056e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	2207      	movs	r2, #7
 80056ec:	4013      	ands	r3, r2
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	220f      	movs	r2, #15
 80056f2:	409a      	lsls	r2, r3
 80056f4:	0013      	movs	r3, r2
 80056f6:	43da      	mvns	r2, r3
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	4013      	ands	r3, r2
 80056fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	691a      	ldr	r2, [r3, #16]
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	2107      	movs	r1, #7
 8005706:	400b      	ands	r3, r1
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	409a      	lsls	r2, r3
 800570c:	0013      	movs	r3, r2
 800570e:	693a      	ldr	r2, [r7, #16]
 8005710:	4313      	orrs	r3, r2
 8005712:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	08da      	lsrs	r2, r3, #3
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	3208      	adds	r2, #8
 800571c:	0092      	lsls	r2, r2, #2
 800571e:	6939      	ldr	r1, [r7, #16]
 8005720:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	005b      	lsls	r3, r3, #1
 800572c:	2203      	movs	r2, #3
 800572e:	409a      	lsls	r2, r3
 8005730:	0013      	movs	r3, r2
 8005732:	43da      	mvns	r2, r3
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	4013      	ands	r3, r2
 8005738:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	2203      	movs	r2, #3
 8005740:	401a      	ands	r2, r3
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	005b      	lsls	r3, r3, #1
 8005746:	409a      	lsls	r2, r3
 8005748:	0013      	movs	r3, r2
 800574a:	693a      	ldr	r2, [r7, #16]
 800574c:	4313      	orrs	r3, r2
 800574e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	693a      	ldr	r2, [r7, #16]
 8005754:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	685a      	ldr	r2, [r3, #4]
 800575a:	23c0      	movs	r3, #192	@ 0xc0
 800575c:	029b      	lsls	r3, r3, #10
 800575e:	4013      	ands	r3, r2
 8005760:	d100      	bne.n	8005764 <HAL_GPIO_Init+0x174>
 8005762:	e098      	b.n	8005896 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8005764:	4a53      	ldr	r2, [pc, #332]	@ (80058b4 <HAL_GPIO_Init+0x2c4>)
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	089b      	lsrs	r3, r3, #2
 800576a:	3318      	adds	r3, #24
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	589b      	ldr	r3, [r3, r2]
 8005770:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	2203      	movs	r2, #3
 8005776:	4013      	ands	r3, r2
 8005778:	00db      	lsls	r3, r3, #3
 800577a:	220f      	movs	r2, #15
 800577c:	409a      	lsls	r2, r3
 800577e:	0013      	movs	r3, r2
 8005780:	43da      	mvns	r2, r3
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	4013      	ands	r3, r2
 8005786:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	23a0      	movs	r3, #160	@ 0xa0
 800578c:	05db      	lsls	r3, r3, #23
 800578e:	429a      	cmp	r2, r3
 8005790:	d019      	beq.n	80057c6 <HAL_GPIO_Init+0x1d6>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	4a48      	ldr	r2, [pc, #288]	@ (80058b8 <HAL_GPIO_Init+0x2c8>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d013      	beq.n	80057c2 <HAL_GPIO_Init+0x1d2>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4a47      	ldr	r2, [pc, #284]	@ (80058bc <HAL_GPIO_Init+0x2cc>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d00d      	beq.n	80057be <HAL_GPIO_Init+0x1ce>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	4a46      	ldr	r2, [pc, #280]	@ (80058c0 <HAL_GPIO_Init+0x2d0>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d007      	beq.n	80057ba <HAL_GPIO_Init+0x1ca>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4a45      	ldr	r2, [pc, #276]	@ (80058c4 <HAL_GPIO_Init+0x2d4>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d101      	bne.n	80057b6 <HAL_GPIO_Init+0x1c6>
 80057b2:	2304      	movs	r3, #4
 80057b4:	e008      	b.n	80057c8 <HAL_GPIO_Init+0x1d8>
 80057b6:	2305      	movs	r3, #5
 80057b8:	e006      	b.n	80057c8 <HAL_GPIO_Init+0x1d8>
 80057ba:	2303      	movs	r3, #3
 80057bc:	e004      	b.n	80057c8 <HAL_GPIO_Init+0x1d8>
 80057be:	2302      	movs	r3, #2
 80057c0:	e002      	b.n	80057c8 <HAL_GPIO_Init+0x1d8>
 80057c2:	2301      	movs	r3, #1
 80057c4:	e000      	b.n	80057c8 <HAL_GPIO_Init+0x1d8>
 80057c6:	2300      	movs	r3, #0
 80057c8:	697a      	ldr	r2, [r7, #20]
 80057ca:	2103      	movs	r1, #3
 80057cc:	400a      	ands	r2, r1
 80057ce:	00d2      	lsls	r2, r2, #3
 80057d0:	4093      	lsls	r3, r2
 80057d2:	693a      	ldr	r2, [r7, #16]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80057d8:	4936      	ldr	r1, [pc, #216]	@ (80058b4 <HAL_GPIO_Init+0x2c4>)
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	089b      	lsrs	r3, r3, #2
 80057de:	3318      	adds	r3, #24
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	693a      	ldr	r2, [r7, #16]
 80057e4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80057e6:	4b33      	ldr	r3, [pc, #204]	@ (80058b4 <HAL_GPIO_Init+0x2c4>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	43da      	mvns	r2, r3
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	4013      	ands	r3, r2
 80057f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	685a      	ldr	r2, [r3, #4]
 80057fa:	2380      	movs	r3, #128	@ 0x80
 80057fc:	035b      	lsls	r3, r3, #13
 80057fe:	4013      	ands	r3, r2
 8005800:	d003      	beq.n	800580a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8005802:	693a      	ldr	r2, [r7, #16]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	4313      	orrs	r3, r2
 8005808:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800580a:	4b2a      	ldr	r3, [pc, #168]	@ (80058b4 <HAL_GPIO_Init+0x2c4>)
 800580c:	693a      	ldr	r2, [r7, #16]
 800580e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8005810:	4b28      	ldr	r3, [pc, #160]	@ (80058b4 <HAL_GPIO_Init+0x2c4>)
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	43da      	mvns	r2, r3
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	4013      	ands	r3, r2
 800581e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	685a      	ldr	r2, [r3, #4]
 8005824:	2380      	movs	r3, #128	@ 0x80
 8005826:	039b      	lsls	r3, r3, #14
 8005828:	4013      	ands	r3, r2
 800582a:	d003      	beq.n	8005834 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 800582c:	693a      	ldr	r2, [r7, #16]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	4313      	orrs	r3, r2
 8005832:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005834:	4b1f      	ldr	r3, [pc, #124]	@ (80058b4 <HAL_GPIO_Init+0x2c4>)
 8005836:	693a      	ldr	r2, [r7, #16]
 8005838:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800583a:	4a1e      	ldr	r2, [pc, #120]	@ (80058b4 <HAL_GPIO_Init+0x2c4>)
 800583c:	2384      	movs	r3, #132	@ 0x84
 800583e:	58d3      	ldr	r3, [r2, r3]
 8005840:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	43da      	mvns	r2, r3
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	4013      	ands	r3, r2
 800584a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	685a      	ldr	r2, [r3, #4]
 8005850:	2380      	movs	r3, #128	@ 0x80
 8005852:	029b      	lsls	r3, r3, #10
 8005854:	4013      	ands	r3, r2
 8005856:	d003      	beq.n	8005860 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005858:	693a      	ldr	r2, [r7, #16]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	4313      	orrs	r3, r2
 800585e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005860:	4914      	ldr	r1, [pc, #80]	@ (80058b4 <HAL_GPIO_Init+0x2c4>)
 8005862:	2284      	movs	r2, #132	@ 0x84
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8005868:	4a12      	ldr	r2, [pc, #72]	@ (80058b4 <HAL_GPIO_Init+0x2c4>)
 800586a:	2380      	movs	r3, #128	@ 0x80
 800586c:	58d3      	ldr	r3, [r2, r3]
 800586e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	43da      	mvns	r2, r3
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	4013      	ands	r3, r2
 8005878:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	685a      	ldr	r2, [r3, #4]
 800587e:	2380      	movs	r3, #128	@ 0x80
 8005880:	025b      	lsls	r3, r3, #9
 8005882:	4013      	ands	r3, r2
 8005884:	d003      	beq.n	800588e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8005886:	693a      	ldr	r2, [r7, #16]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	4313      	orrs	r3, r2
 800588c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800588e:	4909      	ldr	r1, [pc, #36]	@ (80058b4 <HAL_GPIO_Init+0x2c4>)
 8005890:	2280      	movs	r2, #128	@ 0x80
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	3301      	adds	r3, #1
 800589a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	40da      	lsrs	r2, r3
 80058a4:	1e13      	subs	r3, r2, #0
 80058a6:	d000      	beq.n	80058aa <HAL_GPIO_Init+0x2ba>
 80058a8:	e6aa      	b.n	8005600 <HAL_GPIO_Init+0x10>
  }
}
 80058aa:	46c0      	nop			@ (mov r8, r8)
 80058ac:	46c0      	nop			@ (mov r8, r8)
 80058ae:	46bd      	mov	sp, r7
 80058b0:	b006      	add	sp, #24
 80058b2:	bd80      	pop	{r7, pc}
 80058b4:	40021800 	.word	0x40021800
 80058b8:	50000400 	.word	0x50000400
 80058bc:	50000800 	.word	0x50000800
 80058c0:	50000c00 	.word	0x50000c00
 80058c4:	50001000 	.word	0x50001000

080058c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b082      	sub	sp, #8
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	0008      	movs	r0, r1
 80058d2:	0011      	movs	r1, r2
 80058d4:	1cbb      	adds	r3, r7, #2
 80058d6:	1c02      	adds	r2, r0, #0
 80058d8:	801a      	strh	r2, [r3, #0]
 80058da:	1c7b      	adds	r3, r7, #1
 80058dc:	1c0a      	adds	r2, r1, #0
 80058de:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80058e0:	1c7b      	adds	r3, r7, #1
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d004      	beq.n	80058f2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80058e8:	1cbb      	adds	r3, r7, #2
 80058ea:	881a      	ldrh	r2, [r3, #0]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80058f0:	e003      	b.n	80058fa <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80058f2:	1cbb      	adds	r3, r7, #2
 80058f4:	881a      	ldrh	r2, [r3, #0]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80058fa:	46c0      	nop			@ (mov r8, r8)
 80058fc:	46bd      	mov	sp, r7
 80058fe:	b002      	add	sp, #8
 8005900:	bd80      	pop	{r7, pc}
	...

08005904 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800590c:	4b19      	ldr	r3, [pc, #100]	@ (8005974 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a19      	ldr	r2, [pc, #100]	@ (8005978 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8005912:	4013      	ands	r3, r2
 8005914:	0019      	movs	r1, r3
 8005916:	4b17      	ldr	r3, [pc, #92]	@ (8005974 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	430a      	orrs	r2, r1
 800591c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	2380      	movs	r3, #128	@ 0x80
 8005922:	009b      	lsls	r3, r3, #2
 8005924:	429a      	cmp	r2, r3
 8005926:	d11f      	bne.n	8005968 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8005928:	4b14      	ldr	r3, [pc, #80]	@ (800597c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	0013      	movs	r3, r2
 800592e:	005b      	lsls	r3, r3, #1
 8005930:	189b      	adds	r3, r3, r2
 8005932:	005b      	lsls	r3, r3, #1
 8005934:	4912      	ldr	r1, [pc, #72]	@ (8005980 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8005936:	0018      	movs	r0, r3
 8005938:	f7fe fbe4 	bl	8004104 <__udivsi3>
 800593c:	0003      	movs	r3, r0
 800593e:	3301      	adds	r3, #1
 8005940:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005942:	e008      	b.n	8005956 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d003      	beq.n	8005952 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	3b01      	subs	r3, #1
 800594e:	60fb      	str	r3, [r7, #12]
 8005950:	e001      	b.n	8005956 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8005952:	2303      	movs	r3, #3
 8005954:	e009      	b.n	800596a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005956:	4b07      	ldr	r3, [pc, #28]	@ (8005974 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005958:	695a      	ldr	r2, [r3, #20]
 800595a:	2380      	movs	r3, #128	@ 0x80
 800595c:	00db      	lsls	r3, r3, #3
 800595e:	401a      	ands	r2, r3
 8005960:	2380      	movs	r3, #128	@ 0x80
 8005962:	00db      	lsls	r3, r3, #3
 8005964:	429a      	cmp	r2, r3
 8005966:	d0ed      	beq.n	8005944 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8005968:	2300      	movs	r3, #0
}
 800596a:	0018      	movs	r0, r3
 800596c:	46bd      	mov	sp, r7
 800596e:	b004      	add	sp, #16
 8005970:	bd80      	pop	{r7, pc}
 8005972:	46c0      	nop			@ (mov r8, r8)
 8005974:	40007000 	.word	0x40007000
 8005978:	fffff9ff 	.word	0xfffff9ff
 800597c:	20000000 	.word	0x20000000
 8005980:	000f4240 	.word	0x000f4240

08005984 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8005988:	4b03      	ldr	r3, [pc, #12]	@ (8005998 <LL_RCC_GetAPB1Prescaler+0x14>)
 800598a:	689a      	ldr	r2, [r3, #8]
 800598c:	23e0      	movs	r3, #224	@ 0xe0
 800598e:	01db      	lsls	r3, r3, #7
 8005990:	4013      	ands	r3, r2
}
 8005992:	0018      	movs	r0, r3
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}
 8005998:	40021000 	.word	0x40021000

0800599c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b088      	sub	sp, #32
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d102      	bne.n	80059b0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	f000 fb50 	bl	8006050 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2201      	movs	r2, #1
 80059b6:	4013      	ands	r3, r2
 80059b8:	d100      	bne.n	80059bc <HAL_RCC_OscConfig+0x20>
 80059ba:	e07c      	b.n	8005ab6 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059bc:	4bc3      	ldr	r3, [pc, #780]	@ (8005ccc <HAL_RCC_OscConfig+0x330>)
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	2238      	movs	r2, #56	@ 0x38
 80059c2:	4013      	ands	r3, r2
 80059c4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80059c6:	4bc1      	ldr	r3, [pc, #772]	@ (8005ccc <HAL_RCC_OscConfig+0x330>)
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	2203      	movs	r2, #3
 80059cc:	4013      	ands	r3, r2
 80059ce:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80059d0:	69bb      	ldr	r3, [r7, #24]
 80059d2:	2b10      	cmp	r3, #16
 80059d4:	d102      	bne.n	80059dc <HAL_RCC_OscConfig+0x40>
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	2b03      	cmp	r3, #3
 80059da:	d002      	beq.n	80059e2 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80059dc:	69bb      	ldr	r3, [r7, #24]
 80059de:	2b08      	cmp	r3, #8
 80059e0:	d10b      	bne.n	80059fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059e2:	4bba      	ldr	r3, [pc, #744]	@ (8005ccc <HAL_RCC_OscConfig+0x330>)
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	2380      	movs	r3, #128	@ 0x80
 80059e8:	029b      	lsls	r3, r3, #10
 80059ea:	4013      	ands	r3, r2
 80059ec:	d062      	beq.n	8005ab4 <HAL_RCC_OscConfig+0x118>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d15e      	bne.n	8005ab4 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e32a      	b.n	8006050 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	685a      	ldr	r2, [r3, #4]
 80059fe:	2380      	movs	r3, #128	@ 0x80
 8005a00:	025b      	lsls	r3, r3, #9
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d107      	bne.n	8005a16 <HAL_RCC_OscConfig+0x7a>
 8005a06:	4bb1      	ldr	r3, [pc, #708]	@ (8005ccc <HAL_RCC_OscConfig+0x330>)
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	4bb0      	ldr	r3, [pc, #704]	@ (8005ccc <HAL_RCC_OscConfig+0x330>)
 8005a0c:	2180      	movs	r1, #128	@ 0x80
 8005a0e:	0249      	lsls	r1, r1, #9
 8005a10:	430a      	orrs	r2, r1
 8005a12:	601a      	str	r2, [r3, #0]
 8005a14:	e020      	b.n	8005a58 <HAL_RCC_OscConfig+0xbc>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	685a      	ldr	r2, [r3, #4]
 8005a1a:	23a0      	movs	r3, #160	@ 0xa0
 8005a1c:	02db      	lsls	r3, r3, #11
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d10e      	bne.n	8005a40 <HAL_RCC_OscConfig+0xa4>
 8005a22:	4baa      	ldr	r3, [pc, #680]	@ (8005ccc <HAL_RCC_OscConfig+0x330>)
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	4ba9      	ldr	r3, [pc, #676]	@ (8005ccc <HAL_RCC_OscConfig+0x330>)
 8005a28:	2180      	movs	r1, #128	@ 0x80
 8005a2a:	02c9      	lsls	r1, r1, #11
 8005a2c:	430a      	orrs	r2, r1
 8005a2e:	601a      	str	r2, [r3, #0]
 8005a30:	4ba6      	ldr	r3, [pc, #664]	@ (8005ccc <HAL_RCC_OscConfig+0x330>)
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	4ba5      	ldr	r3, [pc, #660]	@ (8005ccc <HAL_RCC_OscConfig+0x330>)
 8005a36:	2180      	movs	r1, #128	@ 0x80
 8005a38:	0249      	lsls	r1, r1, #9
 8005a3a:	430a      	orrs	r2, r1
 8005a3c:	601a      	str	r2, [r3, #0]
 8005a3e:	e00b      	b.n	8005a58 <HAL_RCC_OscConfig+0xbc>
 8005a40:	4ba2      	ldr	r3, [pc, #648]	@ (8005ccc <HAL_RCC_OscConfig+0x330>)
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	4ba1      	ldr	r3, [pc, #644]	@ (8005ccc <HAL_RCC_OscConfig+0x330>)
 8005a46:	49a2      	ldr	r1, [pc, #648]	@ (8005cd0 <HAL_RCC_OscConfig+0x334>)
 8005a48:	400a      	ands	r2, r1
 8005a4a:	601a      	str	r2, [r3, #0]
 8005a4c:	4b9f      	ldr	r3, [pc, #636]	@ (8005ccc <HAL_RCC_OscConfig+0x330>)
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	4b9e      	ldr	r3, [pc, #632]	@ (8005ccc <HAL_RCC_OscConfig+0x330>)
 8005a52:	49a0      	ldr	r1, [pc, #640]	@ (8005cd4 <HAL_RCC_OscConfig+0x338>)
 8005a54:	400a      	ands	r2, r1
 8005a56:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d014      	beq.n	8005a8a <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a60:	f7ff f948 	bl	8004cf4 <HAL_GetTick>
 8005a64:	0003      	movs	r3, r0
 8005a66:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a68:	e008      	b.n	8005a7c <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a6a:	f7ff f943 	bl	8004cf4 <HAL_GetTick>
 8005a6e:	0002      	movs	r2, r0
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	1ad3      	subs	r3, r2, r3
 8005a74:	2b64      	cmp	r3, #100	@ 0x64
 8005a76:	d901      	bls.n	8005a7c <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8005a78:	2303      	movs	r3, #3
 8005a7a:	e2e9      	b.n	8006050 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a7c:	4b93      	ldr	r3, [pc, #588]	@ (8005ccc <HAL_RCC_OscConfig+0x330>)
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	2380      	movs	r3, #128	@ 0x80
 8005a82:	029b      	lsls	r3, r3, #10
 8005a84:	4013      	ands	r3, r2
 8005a86:	d0f0      	beq.n	8005a6a <HAL_RCC_OscConfig+0xce>
 8005a88:	e015      	b.n	8005ab6 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a8a:	f7ff f933 	bl	8004cf4 <HAL_GetTick>
 8005a8e:	0003      	movs	r3, r0
 8005a90:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005a92:	e008      	b.n	8005aa6 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a94:	f7ff f92e 	bl	8004cf4 <HAL_GetTick>
 8005a98:	0002      	movs	r2, r0
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	1ad3      	subs	r3, r2, r3
 8005a9e:	2b64      	cmp	r3, #100	@ 0x64
 8005aa0:	d901      	bls.n	8005aa6 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8005aa2:	2303      	movs	r3, #3
 8005aa4:	e2d4      	b.n	8006050 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005aa6:	4b89      	ldr	r3, [pc, #548]	@ (8005ccc <HAL_RCC_OscConfig+0x330>)
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	2380      	movs	r3, #128	@ 0x80
 8005aac:	029b      	lsls	r3, r3, #10
 8005aae:	4013      	ands	r3, r2
 8005ab0:	d1f0      	bne.n	8005a94 <HAL_RCC_OscConfig+0xf8>
 8005ab2:	e000      	b.n	8005ab6 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ab4:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	2202      	movs	r2, #2
 8005abc:	4013      	ands	r3, r2
 8005abe:	d100      	bne.n	8005ac2 <HAL_RCC_OscConfig+0x126>
 8005ac0:	e099      	b.n	8005bf6 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ac2:	4b82      	ldr	r3, [pc, #520]	@ (8005ccc <HAL_RCC_OscConfig+0x330>)
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	2238      	movs	r2, #56	@ 0x38
 8005ac8:	4013      	ands	r3, r2
 8005aca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005acc:	4b7f      	ldr	r3, [pc, #508]	@ (8005ccc <HAL_RCC_OscConfig+0x330>)
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	2203      	movs	r2, #3
 8005ad2:	4013      	ands	r3, r2
 8005ad4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8005ad6:	69bb      	ldr	r3, [r7, #24]
 8005ad8:	2b10      	cmp	r3, #16
 8005ada:	d102      	bne.n	8005ae2 <HAL_RCC_OscConfig+0x146>
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	2b02      	cmp	r3, #2
 8005ae0:	d002      	beq.n	8005ae8 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d135      	bne.n	8005b54 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ae8:	4b78      	ldr	r3, [pc, #480]	@ (8005ccc <HAL_RCC_OscConfig+0x330>)
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	2380      	movs	r3, #128	@ 0x80
 8005aee:	00db      	lsls	r3, r3, #3
 8005af0:	4013      	ands	r3, r2
 8005af2:	d005      	beq.n	8005b00 <HAL_RCC_OscConfig+0x164>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d101      	bne.n	8005b00 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	e2a7      	b.n	8006050 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b00:	4b72      	ldr	r3, [pc, #456]	@ (8005ccc <HAL_RCC_OscConfig+0x330>)
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	4a74      	ldr	r2, [pc, #464]	@ (8005cd8 <HAL_RCC_OscConfig+0x33c>)
 8005b06:	4013      	ands	r3, r2
 8005b08:	0019      	movs	r1, r3
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	695b      	ldr	r3, [r3, #20]
 8005b0e:	021a      	lsls	r2, r3, #8
 8005b10:	4b6e      	ldr	r3, [pc, #440]	@ (8005ccc <HAL_RCC_OscConfig+0x330>)
 8005b12:	430a      	orrs	r2, r1
 8005b14:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005b16:	69bb      	ldr	r3, [r7, #24]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d112      	bne.n	8005b42 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005b1c:	4b6b      	ldr	r3, [pc, #428]	@ (8005ccc <HAL_RCC_OscConfig+0x330>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a6e      	ldr	r2, [pc, #440]	@ (8005cdc <HAL_RCC_OscConfig+0x340>)
 8005b22:	4013      	ands	r3, r2
 8005b24:	0019      	movs	r1, r3
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	691a      	ldr	r2, [r3, #16]
 8005b2a:	4b68      	ldr	r3, [pc, #416]	@ (8005ccc <HAL_RCC_OscConfig+0x330>)
 8005b2c:	430a      	orrs	r2, r1
 8005b2e:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8005b30:	4b66      	ldr	r3, [pc, #408]	@ (8005ccc <HAL_RCC_OscConfig+0x330>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	0adb      	lsrs	r3, r3, #11
 8005b36:	2207      	movs	r2, #7
 8005b38:	4013      	ands	r3, r2
 8005b3a:	4a69      	ldr	r2, [pc, #420]	@ (8005ce0 <HAL_RCC_OscConfig+0x344>)
 8005b3c:	40da      	lsrs	r2, r3
 8005b3e:	4b69      	ldr	r3, [pc, #420]	@ (8005ce4 <HAL_RCC_OscConfig+0x348>)
 8005b40:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005b42:	4b69      	ldr	r3, [pc, #420]	@ (8005ce8 <HAL_RCC_OscConfig+0x34c>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	0018      	movs	r0, r3
 8005b48:	f7ff f878 	bl	8004c3c <HAL_InitTick>
 8005b4c:	1e03      	subs	r3, r0, #0
 8005b4e:	d051      	beq.n	8005bf4 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8005b50:	2301      	movs	r3, #1
 8005b52:	e27d      	b.n	8006050 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d030      	beq.n	8005bbe <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005b5c:	4b5b      	ldr	r3, [pc, #364]	@ (8005ccc <HAL_RCC_OscConfig+0x330>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a5e      	ldr	r2, [pc, #376]	@ (8005cdc <HAL_RCC_OscConfig+0x340>)
 8005b62:	4013      	ands	r3, r2
 8005b64:	0019      	movs	r1, r3
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	691a      	ldr	r2, [r3, #16]
 8005b6a:	4b58      	ldr	r3, [pc, #352]	@ (8005ccc <HAL_RCC_OscConfig+0x330>)
 8005b6c:	430a      	orrs	r2, r1
 8005b6e:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8005b70:	4b56      	ldr	r3, [pc, #344]	@ (8005ccc <HAL_RCC_OscConfig+0x330>)
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	4b55      	ldr	r3, [pc, #340]	@ (8005ccc <HAL_RCC_OscConfig+0x330>)
 8005b76:	2180      	movs	r1, #128	@ 0x80
 8005b78:	0049      	lsls	r1, r1, #1
 8005b7a:	430a      	orrs	r2, r1
 8005b7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b7e:	f7ff f8b9 	bl	8004cf4 <HAL_GetTick>
 8005b82:	0003      	movs	r3, r0
 8005b84:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b86:	e008      	b.n	8005b9a <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b88:	f7ff f8b4 	bl	8004cf4 <HAL_GetTick>
 8005b8c:	0002      	movs	r2, r0
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	1ad3      	subs	r3, r2, r3
 8005b92:	2b02      	cmp	r3, #2
 8005b94:	d901      	bls.n	8005b9a <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8005b96:	2303      	movs	r3, #3
 8005b98:	e25a      	b.n	8006050 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b9a:	4b4c      	ldr	r3, [pc, #304]	@ (8005ccc <HAL_RCC_OscConfig+0x330>)
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	2380      	movs	r3, #128	@ 0x80
 8005ba0:	00db      	lsls	r3, r3, #3
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	d0f0      	beq.n	8005b88 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ba6:	4b49      	ldr	r3, [pc, #292]	@ (8005ccc <HAL_RCC_OscConfig+0x330>)
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	4a4b      	ldr	r2, [pc, #300]	@ (8005cd8 <HAL_RCC_OscConfig+0x33c>)
 8005bac:	4013      	ands	r3, r2
 8005bae:	0019      	movs	r1, r3
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	695b      	ldr	r3, [r3, #20]
 8005bb4:	021a      	lsls	r2, r3, #8
 8005bb6:	4b45      	ldr	r3, [pc, #276]	@ (8005ccc <HAL_RCC_OscConfig+0x330>)
 8005bb8:	430a      	orrs	r2, r1
 8005bba:	605a      	str	r2, [r3, #4]
 8005bbc:	e01b      	b.n	8005bf6 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8005bbe:	4b43      	ldr	r3, [pc, #268]	@ (8005ccc <HAL_RCC_OscConfig+0x330>)
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	4b42      	ldr	r3, [pc, #264]	@ (8005ccc <HAL_RCC_OscConfig+0x330>)
 8005bc4:	4949      	ldr	r1, [pc, #292]	@ (8005cec <HAL_RCC_OscConfig+0x350>)
 8005bc6:	400a      	ands	r2, r1
 8005bc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bca:	f7ff f893 	bl	8004cf4 <HAL_GetTick>
 8005bce:	0003      	movs	r3, r0
 8005bd0:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005bd2:	e008      	b.n	8005be6 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005bd4:	f7ff f88e 	bl	8004cf4 <HAL_GetTick>
 8005bd8:	0002      	movs	r2, r0
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	1ad3      	subs	r3, r2, r3
 8005bde:	2b02      	cmp	r3, #2
 8005be0:	d901      	bls.n	8005be6 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8005be2:	2303      	movs	r3, #3
 8005be4:	e234      	b.n	8006050 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005be6:	4b39      	ldr	r3, [pc, #228]	@ (8005ccc <HAL_RCC_OscConfig+0x330>)
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	2380      	movs	r3, #128	@ 0x80
 8005bec:	00db      	lsls	r3, r3, #3
 8005bee:	4013      	ands	r3, r2
 8005bf0:	d1f0      	bne.n	8005bd4 <HAL_RCC_OscConfig+0x238>
 8005bf2:	e000      	b.n	8005bf6 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005bf4:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	2208      	movs	r2, #8
 8005bfc:	4013      	ands	r3, r2
 8005bfe:	d047      	beq.n	8005c90 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005c00:	4b32      	ldr	r3, [pc, #200]	@ (8005ccc <HAL_RCC_OscConfig+0x330>)
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	2238      	movs	r2, #56	@ 0x38
 8005c06:	4013      	ands	r3, r2
 8005c08:	2b18      	cmp	r3, #24
 8005c0a:	d10a      	bne.n	8005c22 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8005c0c:	4b2f      	ldr	r3, [pc, #188]	@ (8005ccc <HAL_RCC_OscConfig+0x330>)
 8005c0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c10:	2202      	movs	r2, #2
 8005c12:	4013      	ands	r3, r2
 8005c14:	d03c      	beq.n	8005c90 <HAL_RCC_OscConfig+0x2f4>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	699b      	ldr	r3, [r3, #24]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d138      	bne.n	8005c90 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e216      	b.n	8006050 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	699b      	ldr	r3, [r3, #24]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d019      	beq.n	8005c5e <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8005c2a:	4b28      	ldr	r3, [pc, #160]	@ (8005ccc <HAL_RCC_OscConfig+0x330>)
 8005c2c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005c2e:	4b27      	ldr	r3, [pc, #156]	@ (8005ccc <HAL_RCC_OscConfig+0x330>)
 8005c30:	2101      	movs	r1, #1
 8005c32:	430a      	orrs	r2, r1
 8005c34:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c36:	f7ff f85d 	bl	8004cf4 <HAL_GetTick>
 8005c3a:	0003      	movs	r3, r0
 8005c3c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005c3e:	e008      	b.n	8005c52 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c40:	f7ff f858 	bl	8004cf4 <HAL_GetTick>
 8005c44:	0002      	movs	r2, r0
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	1ad3      	subs	r3, r2, r3
 8005c4a:	2b02      	cmp	r3, #2
 8005c4c:	d901      	bls.n	8005c52 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8005c4e:	2303      	movs	r3, #3
 8005c50:	e1fe      	b.n	8006050 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005c52:	4b1e      	ldr	r3, [pc, #120]	@ (8005ccc <HAL_RCC_OscConfig+0x330>)
 8005c54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c56:	2202      	movs	r2, #2
 8005c58:	4013      	ands	r3, r2
 8005c5a:	d0f1      	beq.n	8005c40 <HAL_RCC_OscConfig+0x2a4>
 8005c5c:	e018      	b.n	8005c90 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8005c5e:	4b1b      	ldr	r3, [pc, #108]	@ (8005ccc <HAL_RCC_OscConfig+0x330>)
 8005c60:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005c62:	4b1a      	ldr	r3, [pc, #104]	@ (8005ccc <HAL_RCC_OscConfig+0x330>)
 8005c64:	2101      	movs	r1, #1
 8005c66:	438a      	bics	r2, r1
 8005c68:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c6a:	f7ff f843 	bl	8004cf4 <HAL_GetTick>
 8005c6e:	0003      	movs	r3, r0
 8005c70:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005c72:	e008      	b.n	8005c86 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c74:	f7ff f83e 	bl	8004cf4 <HAL_GetTick>
 8005c78:	0002      	movs	r2, r0
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	1ad3      	subs	r3, r2, r3
 8005c7e:	2b02      	cmp	r3, #2
 8005c80:	d901      	bls.n	8005c86 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8005c82:	2303      	movs	r3, #3
 8005c84:	e1e4      	b.n	8006050 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005c86:	4b11      	ldr	r3, [pc, #68]	@ (8005ccc <HAL_RCC_OscConfig+0x330>)
 8005c88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c8a:	2202      	movs	r2, #2
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	d1f1      	bne.n	8005c74 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	2204      	movs	r2, #4
 8005c96:	4013      	ands	r3, r2
 8005c98:	d100      	bne.n	8005c9c <HAL_RCC_OscConfig+0x300>
 8005c9a:	e0c7      	b.n	8005e2c <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c9c:	231f      	movs	r3, #31
 8005c9e:	18fb      	adds	r3, r7, r3
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005ca4:	4b09      	ldr	r3, [pc, #36]	@ (8005ccc <HAL_RCC_OscConfig+0x330>)
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	2238      	movs	r2, #56	@ 0x38
 8005caa:	4013      	ands	r3, r2
 8005cac:	2b20      	cmp	r3, #32
 8005cae:	d11f      	bne.n	8005cf0 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8005cb0:	4b06      	ldr	r3, [pc, #24]	@ (8005ccc <HAL_RCC_OscConfig+0x330>)
 8005cb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cb4:	2202      	movs	r2, #2
 8005cb6:	4013      	ands	r3, r2
 8005cb8:	d100      	bne.n	8005cbc <HAL_RCC_OscConfig+0x320>
 8005cba:	e0b7      	b.n	8005e2c <HAL_RCC_OscConfig+0x490>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d000      	beq.n	8005cc6 <HAL_RCC_OscConfig+0x32a>
 8005cc4:	e0b2      	b.n	8005e2c <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e1c2      	b.n	8006050 <HAL_RCC_OscConfig+0x6b4>
 8005cca:	46c0      	nop			@ (mov r8, r8)
 8005ccc:	40021000 	.word	0x40021000
 8005cd0:	fffeffff 	.word	0xfffeffff
 8005cd4:	fffbffff 	.word	0xfffbffff
 8005cd8:	ffff80ff 	.word	0xffff80ff
 8005cdc:	ffffc7ff 	.word	0xffffc7ff
 8005ce0:	00f42400 	.word	0x00f42400
 8005ce4:	20000000 	.word	0x20000000
 8005ce8:	20000004 	.word	0x20000004
 8005cec:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005cf0:	4bb5      	ldr	r3, [pc, #724]	@ (8005fc8 <HAL_RCC_OscConfig+0x62c>)
 8005cf2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005cf4:	2380      	movs	r3, #128	@ 0x80
 8005cf6:	055b      	lsls	r3, r3, #21
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	d101      	bne.n	8005d00 <HAL_RCC_OscConfig+0x364>
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e000      	b.n	8005d02 <HAL_RCC_OscConfig+0x366>
 8005d00:	2300      	movs	r3, #0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d011      	beq.n	8005d2a <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005d06:	4bb0      	ldr	r3, [pc, #704]	@ (8005fc8 <HAL_RCC_OscConfig+0x62c>)
 8005d08:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005d0a:	4baf      	ldr	r3, [pc, #700]	@ (8005fc8 <HAL_RCC_OscConfig+0x62c>)
 8005d0c:	2180      	movs	r1, #128	@ 0x80
 8005d0e:	0549      	lsls	r1, r1, #21
 8005d10:	430a      	orrs	r2, r1
 8005d12:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005d14:	4bac      	ldr	r3, [pc, #688]	@ (8005fc8 <HAL_RCC_OscConfig+0x62c>)
 8005d16:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005d18:	2380      	movs	r3, #128	@ 0x80
 8005d1a:	055b      	lsls	r3, r3, #21
 8005d1c:	4013      	ands	r3, r2
 8005d1e:	60fb      	str	r3, [r7, #12]
 8005d20:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8005d22:	231f      	movs	r3, #31
 8005d24:	18fb      	adds	r3, r7, r3
 8005d26:	2201      	movs	r2, #1
 8005d28:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d2a:	4ba8      	ldr	r3, [pc, #672]	@ (8005fcc <HAL_RCC_OscConfig+0x630>)
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	2380      	movs	r3, #128	@ 0x80
 8005d30:	005b      	lsls	r3, r3, #1
 8005d32:	4013      	ands	r3, r2
 8005d34:	d11a      	bne.n	8005d6c <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d36:	4ba5      	ldr	r3, [pc, #660]	@ (8005fcc <HAL_RCC_OscConfig+0x630>)
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	4ba4      	ldr	r3, [pc, #656]	@ (8005fcc <HAL_RCC_OscConfig+0x630>)
 8005d3c:	2180      	movs	r1, #128	@ 0x80
 8005d3e:	0049      	lsls	r1, r1, #1
 8005d40:	430a      	orrs	r2, r1
 8005d42:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8005d44:	f7fe ffd6 	bl	8004cf4 <HAL_GetTick>
 8005d48:	0003      	movs	r3, r0
 8005d4a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d4c:	e008      	b.n	8005d60 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d4e:	f7fe ffd1 	bl	8004cf4 <HAL_GetTick>
 8005d52:	0002      	movs	r2, r0
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	1ad3      	subs	r3, r2, r3
 8005d58:	2b02      	cmp	r3, #2
 8005d5a:	d901      	bls.n	8005d60 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8005d5c:	2303      	movs	r3, #3
 8005d5e:	e177      	b.n	8006050 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d60:	4b9a      	ldr	r3, [pc, #616]	@ (8005fcc <HAL_RCC_OscConfig+0x630>)
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	2380      	movs	r3, #128	@ 0x80
 8005d66:	005b      	lsls	r3, r3, #1
 8005d68:	4013      	ands	r3, r2
 8005d6a:	d0f0      	beq.n	8005d4e <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d106      	bne.n	8005d82 <HAL_RCC_OscConfig+0x3e6>
 8005d74:	4b94      	ldr	r3, [pc, #592]	@ (8005fc8 <HAL_RCC_OscConfig+0x62c>)
 8005d76:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005d78:	4b93      	ldr	r3, [pc, #588]	@ (8005fc8 <HAL_RCC_OscConfig+0x62c>)
 8005d7a:	2101      	movs	r1, #1
 8005d7c:	430a      	orrs	r2, r1
 8005d7e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005d80:	e01c      	b.n	8005dbc <HAL_RCC_OscConfig+0x420>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	2b05      	cmp	r3, #5
 8005d88:	d10c      	bne.n	8005da4 <HAL_RCC_OscConfig+0x408>
 8005d8a:	4b8f      	ldr	r3, [pc, #572]	@ (8005fc8 <HAL_RCC_OscConfig+0x62c>)
 8005d8c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005d8e:	4b8e      	ldr	r3, [pc, #568]	@ (8005fc8 <HAL_RCC_OscConfig+0x62c>)
 8005d90:	2104      	movs	r1, #4
 8005d92:	430a      	orrs	r2, r1
 8005d94:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005d96:	4b8c      	ldr	r3, [pc, #560]	@ (8005fc8 <HAL_RCC_OscConfig+0x62c>)
 8005d98:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005d9a:	4b8b      	ldr	r3, [pc, #556]	@ (8005fc8 <HAL_RCC_OscConfig+0x62c>)
 8005d9c:	2101      	movs	r1, #1
 8005d9e:	430a      	orrs	r2, r1
 8005da0:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005da2:	e00b      	b.n	8005dbc <HAL_RCC_OscConfig+0x420>
 8005da4:	4b88      	ldr	r3, [pc, #544]	@ (8005fc8 <HAL_RCC_OscConfig+0x62c>)
 8005da6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005da8:	4b87      	ldr	r3, [pc, #540]	@ (8005fc8 <HAL_RCC_OscConfig+0x62c>)
 8005daa:	2101      	movs	r1, #1
 8005dac:	438a      	bics	r2, r1
 8005dae:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005db0:	4b85      	ldr	r3, [pc, #532]	@ (8005fc8 <HAL_RCC_OscConfig+0x62c>)
 8005db2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005db4:	4b84      	ldr	r3, [pc, #528]	@ (8005fc8 <HAL_RCC_OscConfig+0x62c>)
 8005db6:	2104      	movs	r1, #4
 8005db8:	438a      	bics	r2, r1
 8005dba:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d014      	beq.n	8005dee <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dc4:	f7fe ff96 	bl	8004cf4 <HAL_GetTick>
 8005dc8:	0003      	movs	r3, r0
 8005dca:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005dcc:	e009      	b.n	8005de2 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dce:	f7fe ff91 	bl	8004cf4 <HAL_GetTick>
 8005dd2:	0002      	movs	r2, r0
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	1ad3      	subs	r3, r2, r3
 8005dd8:	4a7d      	ldr	r2, [pc, #500]	@ (8005fd0 <HAL_RCC_OscConfig+0x634>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d901      	bls.n	8005de2 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8005dde:	2303      	movs	r3, #3
 8005de0:	e136      	b.n	8006050 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005de2:	4b79      	ldr	r3, [pc, #484]	@ (8005fc8 <HAL_RCC_OscConfig+0x62c>)
 8005de4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005de6:	2202      	movs	r2, #2
 8005de8:	4013      	ands	r3, r2
 8005dea:	d0f0      	beq.n	8005dce <HAL_RCC_OscConfig+0x432>
 8005dec:	e013      	b.n	8005e16 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dee:	f7fe ff81 	bl	8004cf4 <HAL_GetTick>
 8005df2:	0003      	movs	r3, r0
 8005df4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005df6:	e009      	b.n	8005e0c <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005df8:	f7fe ff7c 	bl	8004cf4 <HAL_GetTick>
 8005dfc:	0002      	movs	r2, r0
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	1ad3      	subs	r3, r2, r3
 8005e02:	4a73      	ldr	r2, [pc, #460]	@ (8005fd0 <HAL_RCC_OscConfig+0x634>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d901      	bls.n	8005e0c <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8005e08:	2303      	movs	r3, #3
 8005e0a:	e121      	b.n	8006050 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005e0c:	4b6e      	ldr	r3, [pc, #440]	@ (8005fc8 <HAL_RCC_OscConfig+0x62c>)
 8005e0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e10:	2202      	movs	r2, #2
 8005e12:	4013      	ands	r3, r2
 8005e14:	d1f0      	bne.n	8005df8 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005e16:	231f      	movs	r3, #31
 8005e18:	18fb      	adds	r3, r7, r3
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d105      	bne.n	8005e2c <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005e20:	4b69      	ldr	r3, [pc, #420]	@ (8005fc8 <HAL_RCC_OscConfig+0x62c>)
 8005e22:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005e24:	4b68      	ldr	r3, [pc, #416]	@ (8005fc8 <HAL_RCC_OscConfig+0x62c>)
 8005e26:	496b      	ldr	r1, [pc, #428]	@ (8005fd4 <HAL_RCC_OscConfig+0x638>)
 8005e28:	400a      	ands	r2, r1
 8005e2a:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	2220      	movs	r2, #32
 8005e32:	4013      	ands	r3, r2
 8005e34:	d039      	beq.n	8005eaa <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	69db      	ldr	r3, [r3, #28]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d01b      	beq.n	8005e76 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005e3e:	4b62      	ldr	r3, [pc, #392]	@ (8005fc8 <HAL_RCC_OscConfig+0x62c>)
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	4b61      	ldr	r3, [pc, #388]	@ (8005fc8 <HAL_RCC_OscConfig+0x62c>)
 8005e44:	2180      	movs	r1, #128	@ 0x80
 8005e46:	03c9      	lsls	r1, r1, #15
 8005e48:	430a      	orrs	r2, r1
 8005e4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e4c:	f7fe ff52 	bl	8004cf4 <HAL_GetTick>
 8005e50:	0003      	movs	r3, r0
 8005e52:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005e54:	e008      	b.n	8005e68 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005e56:	f7fe ff4d 	bl	8004cf4 <HAL_GetTick>
 8005e5a:	0002      	movs	r2, r0
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	1ad3      	subs	r3, r2, r3
 8005e60:	2b02      	cmp	r3, #2
 8005e62:	d901      	bls.n	8005e68 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8005e64:	2303      	movs	r3, #3
 8005e66:	e0f3      	b.n	8006050 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005e68:	4b57      	ldr	r3, [pc, #348]	@ (8005fc8 <HAL_RCC_OscConfig+0x62c>)
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	2380      	movs	r3, #128	@ 0x80
 8005e6e:	041b      	lsls	r3, r3, #16
 8005e70:	4013      	ands	r3, r2
 8005e72:	d0f0      	beq.n	8005e56 <HAL_RCC_OscConfig+0x4ba>
 8005e74:	e019      	b.n	8005eaa <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005e76:	4b54      	ldr	r3, [pc, #336]	@ (8005fc8 <HAL_RCC_OscConfig+0x62c>)
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	4b53      	ldr	r3, [pc, #332]	@ (8005fc8 <HAL_RCC_OscConfig+0x62c>)
 8005e7c:	4956      	ldr	r1, [pc, #344]	@ (8005fd8 <HAL_RCC_OscConfig+0x63c>)
 8005e7e:	400a      	ands	r2, r1
 8005e80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e82:	f7fe ff37 	bl	8004cf4 <HAL_GetTick>
 8005e86:	0003      	movs	r3, r0
 8005e88:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005e8a:	e008      	b.n	8005e9e <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005e8c:	f7fe ff32 	bl	8004cf4 <HAL_GetTick>
 8005e90:	0002      	movs	r2, r0
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	1ad3      	subs	r3, r2, r3
 8005e96:	2b02      	cmp	r3, #2
 8005e98:	d901      	bls.n	8005e9e <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8005e9a:	2303      	movs	r3, #3
 8005e9c:	e0d8      	b.n	8006050 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005e9e:	4b4a      	ldr	r3, [pc, #296]	@ (8005fc8 <HAL_RCC_OscConfig+0x62c>)
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	2380      	movs	r3, #128	@ 0x80
 8005ea4:	041b      	lsls	r3, r3, #16
 8005ea6:	4013      	ands	r3, r2
 8005ea8:	d1f0      	bne.n	8005e8c <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6a1b      	ldr	r3, [r3, #32]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d100      	bne.n	8005eb4 <HAL_RCC_OscConfig+0x518>
 8005eb2:	e0cc      	b.n	800604e <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005eb4:	4b44      	ldr	r3, [pc, #272]	@ (8005fc8 <HAL_RCC_OscConfig+0x62c>)
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	2238      	movs	r2, #56	@ 0x38
 8005eba:	4013      	ands	r3, r2
 8005ebc:	2b10      	cmp	r3, #16
 8005ebe:	d100      	bne.n	8005ec2 <HAL_RCC_OscConfig+0x526>
 8005ec0:	e07b      	b.n	8005fba <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6a1b      	ldr	r3, [r3, #32]
 8005ec6:	2b02      	cmp	r3, #2
 8005ec8:	d156      	bne.n	8005f78 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005eca:	4b3f      	ldr	r3, [pc, #252]	@ (8005fc8 <HAL_RCC_OscConfig+0x62c>)
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	4b3e      	ldr	r3, [pc, #248]	@ (8005fc8 <HAL_RCC_OscConfig+0x62c>)
 8005ed0:	4942      	ldr	r1, [pc, #264]	@ (8005fdc <HAL_RCC_OscConfig+0x640>)
 8005ed2:	400a      	ands	r2, r1
 8005ed4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ed6:	f7fe ff0d 	bl	8004cf4 <HAL_GetTick>
 8005eda:	0003      	movs	r3, r0
 8005edc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ede:	e008      	b.n	8005ef2 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ee0:	f7fe ff08 	bl	8004cf4 <HAL_GetTick>
 8005ee4:	0002      	movs	r2, r0
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	1ad3      	subs	r3, r2, r3
 8005eea:	2b02      	cmp	r3, #2
 8005eec:	d901      	bls.n	8005ef2 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8005eee:	2303      	movs	r3, #3
 8005ef0:	e0ae      	b.n	8006050 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ef2:	4b35      	ldr	r3, [pc, #212]	@ (8005fc8 <HAL_RCC_OscConfig+0x62c>)
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	2380      	movs	r3, #128	@ 0x80
 8005ef8:	049b      	lsls	r3, r3, #18
 8005efa:	4013      	ands	r3, r2
 8005efc:	d1f0      	bne.n	8005ee0 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005efe:	4b32      	ldr	r3, [pc, #200]	@ (8005fc8 <HAL_RCC_OscConfig+0x62c>)
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	4a37      	ldr	r2, [pc, #220]	@ (8005fe0 <HAL_RCC_OscConfig+0x644>)
 8005f04:	4013      	ands	r3, r2
 8005f06:	0019      	movs	r1, r3
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f10:	431a      	orrs	r2, r3
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f16:	021b      	lsls	r3, r3, #8
 8005f18:	431a      	orrs	r2, r3
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f1e:	431a      	orrs	r2, r3
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f24:	431a      	orrs	r2, r3
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f2a:	431a      	orrs	r2, r3
 8005f2c:	4b26      	ldr	r3, [pc, #152]	@ (8005fc8 <HAL_RCC_OscConfig+0x62c>)
 8005f2e:	430a      	orrs	r2, r1
 8005f30:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f32:	4b25      	ldr	r3, [pc, #148]	@ (8005fc8 <HAL_RCC_OscConfig+0x62c>)
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	4b24      	ldr	r3, [pc, #144]	@ (8005fc8 <HAL_RCC_OscConfig+0x62c>)
 8005f38:	2180      	movs	r1, #128	@ 0x80
 8005f3a:	0449      	lsls	r1, r1, #17
 8005f3c:	430a      	orrs	r2, r1
 8005f3e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8005f40:	4b21      	ldr	r3, [pc, #132]	@ (8005fc8 <HAL_RCC_OscConfig+0x62c>)
 8005f42:	68da      	ldr	r2, [r3, #12]
 8005f44:	4b20      	ldr	r3, [pc, #128]	@ (8005fc8 <HAL_RCC_OscConfig+0x62c>)
 8005f46:	2180      	movs	r1, #128	@ 0x80
 8005f48:	0549      	lsls	r1, r1, #21
 8005f4a:	430a      	orrs	r2, r1
 8005f4c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f4e:	f7fe fed1 	bl	8004cf4 <HAL_GetTick>
 8005f52:	0003      	movs	r3, r0
 8005f54:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f56:	e008      	b.n	8005f6a <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f58:	f7fe fecc 	bl	8004cf4 <HAL_GetTick>
 8005f5c:	0002      	movs	r2, r0
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	1ad3      	subs	r3, r2, r3
 8005f62:	2b02      	cmp	r3, #2
 8005f64:	d901      	bls.n	8005f6a <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8005f66:	2303      	movs	r3, #3
 8005f68:	e072      	b.n	8006050 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f6a:	4b17      	ldr	r3, [pc, #92]	@ (8005fc8 <HAL_RCC_OscConfig+0x62c>)
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	2380      	movs	r3, #128	@ 0x80
 8005f70:	049b      	lsls	r3, r3, #18
 8005f72:	4013      	ands	r3, r2
 8005f74:	d0f0      	beq.n	8005f58 <HAL_RCC_OscConfig+0x5bc>
 8005f76:	e06a      	b.n	800604e <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f78:	4b13      	ldr	r3, [pc, #76]	@ (8005fc8 <HAL_RCC_OscConfig+0x62c>)
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	4b12      	ldr	r3, [pc, #72]	@ (8005fc8 <HAL_RCC_OscConfig+0x62c>)
 8005f7e:	4917      	ldr	r1, [pc, #92]	@ (8005fdc <HAL_RCC_OscConfig+0x640>)
 8005f80:	400a      	ands	r2, r1
 8005f82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f84:	f7fe feb6 	bl	8004cf4 <HAL_GetTick>
 8005f88:	0003      	movs	r3, r0
 8005f8a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f8c:	e008      	b.n	8005fa0 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f8e:	f7fe feb1 	bl	8004cf4 <HAL_GetTick>
 8005f92:	0002      	movs	r2, r0
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	1ad3      	subs	r3, r2, r3
 8005f98:	2b02      	cmp	r3, #2
 8005f9a:	d901      	bls.n	8005fa0 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8005f9c:	2303      	movs	r3, #3
 8005f9e:	e057      	b.n	8006050 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005fa0:	4b09      	ldr	r3, [pc, #36]	@ (8005fc8 <HAL_RCC_OscConfig+0x62c>)
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	2380      	movs	r3, #128	@ 0x80
 8005fa6:	049b      	lsls	r3, r3, #18
 8005fa8:	4013      	ands	r3, r2
 8005faa:	d1f0      	bne.n	8005f8e <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8005fac:	4b06      	ldr	r3, [pc, #24]	@ (8005fc8 <HAL_RCC_OscConfig+0x62c>)
 8005fae:	68da      	ldr	r2, [r3, #12]
 8005fb0:	4b05      	ldr	r3, [pc, #20]	@ (8005fc8 <HAL_RCC_OscConfig+0x62c>)
 8005fb2:	490c      	ldr	r1, [pc, #48]	@ (8005fe4 <HAL_RCC_OscConfig+0x648>)
 8005fb4:	400a      	ands	r2, r1
 8005fb6:	60da      	str	r2, [r3, #12]
 8005fb8:	e049      	b.n	800604e <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6a1b      	ldr	r3, [r3, #32]
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d112      	bne.n	8005fe8 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e044      	b.n	8006050 <HAL_RCC_OscConfig+0x6b4>
 8005fc6:	46c0      	nop			@ (mov r8, r8)
 8005fc8:	40021000 	.word	0x40021000
 8005fcc:	40007000 	.word	0x40007000
 8005fd0:	00001388 	.word	0x00001388
 8005fd4:	efffffff 	.word	0xefffffff
 8005fd8:	ffbfffff 	.word	0xffbfffff
 8005fdc:	feffffff 	.word	0xfeffffff
 8005fe0:	11c1808c 	.word	0x11c1808c
 8005fe4:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8005fe8:	4b1b      	ldr	r3, [pc, #108]	@ (8006058 <HAL_RCC_OscConfig+0x6bc>)
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	2203      	movs	r2, #3
 8005ff2:	401a      	ands	r2, r3
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d126      	bne.n	800604a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	2270      	movs	r2, #112	@ 0x70
 8006000:	401a      	ands	r2, r3
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006006:	429a      	cmp	r2, r3
 8006008:	d11f      	bne.n	800604a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800600a:	697a      	ldr	r2, [r7, #20]
 800600c:	23fe      	movs	r3, #254	@ 0xfe
 800600e:	01db      	lsls	r3, r3, #7
 8006010:	401a      	ands	r2, r3
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006016:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006018:	429a      	cmp	r2, r3
 800601a:	d116      	bne.n	800604a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800601c:	697a      	ldr	r2, [r7, #20]
 800601e:	23f8      	movs	r3, #248	@ 0xf8
 8006020:	039b      	lsls	r3, r3, #14
 8006022:	401a      	ands	r2, r3
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006028:	429a      	cmp	r2, r3
 800602a:	d10e      	bne.n	800604a <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800602c:	697a      	ldr	r2, [r7, #20]
 800602e:	23e0      	movs	r3, #224	@ 0xe0
 8006030:	051b      	lsls	r3, r3, #20
 8006032:	401a      	ands	r2, r3
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006038:	429a      	cmp	r2, r3
 800603a:	d106      	bne.n	800604a <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	0f5b      	lsrs	r3, r3, #29
 8006040:	075a      	lsls	r2, r3, #29
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006046:	429a      	cmp	r2, r3
 8006048:	d001      	beq.n	800604e <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	e000      	b.n	8006050 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 800604e:	2300      	movs	r3, #0
}
 8006050:	0018      	movs	r0, r3
 8006052:	46bd      	mov	sp, r7
 8006054:	b008      	add	sp, #32
 8006056:	bd80      	pop	{r7, pc}
 8006058:	40021000 	.word	0x40021000

0800605c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b084      	sub	sp, #16
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d101      	bne.n	8006070 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	e0e9      	b.n	8006244 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006070:	4b76      	ldr	r3, [pc, #472]	@ (800624c <HAL_RCC_ClockConfig+0x1f0>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	2207      	movs	r2, #7
 8006076:	4013      	ands	r3, r2
 8006078:	683a      	ldr	r2, [r7, #0]
 800607a:	429a      	cmp	r2, r3
 800607c:	d91e      	bls.n	80060bc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800607e:	4b73      	ldr	r3, [pc, #460]	@ (800624c <HAL_RCC_ClockConfig+0x1f0>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	2207      	movs	r2, #7
 8006084:	4393      	bics	r3, r2
 8006086:	0019      	movs	r1, r3
 8006088:	4b70      	ldr	r3, [pc, #448]	@ (800624c <HAL_RCC_ClockConfig+0x1f0>)
 800608a:	683a      	ldr	r2, [r7, #0]
 800608c:	430a      	orrs	r2, r1
 800608e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006090:	f7fe fe30 	bl	8004cf4 <HAL_GetTick>
 8006094:	0003      	movs	r3, r0
 8006096:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006098:	e009      	b.n	80060ae <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800609a:	f7fe fe2b 	bl	8004cf4 <HAL_GetTick>
 800609e:	0002      	movs	r2, r0
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	1ad3      	subs	r3, r2, r3
 80060a4:	4a6a      	ldr	r2, [pc, #424]	@ (8006250 <HAL_RCC_ClockConfig+0x1f4>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d901      	bls.n	80060ae <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80060aa:	2303      	movs	r3, #3
 80060ac:	e0ca      	b.n	8006244 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80060ae:	4b67      	ldr	r3, [pc, #412]	@ (800624c <HAL_RCC_ClockConfig+0x1f0>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	2207      	movs	r2, #7
 80060b4:	4013      	ands	r3, r2
 80060b6:	683a      	ldr	r2, [r7, #0]
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d1ee      	bne.n	800609a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	2202      	movs	r2, #2
 80060c2:	4013      	ands	r3, r2
 80060c4:	d015      	beq.n	80060f2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	2204      	movs	r2, #4
 80060cc:	4013      	ands	r3, r2
 80060ce:	d006      	beq.n	80060de <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80060d0:	4b60      	ldr	r3, [pc, #384]	@ (8006254 <HAL_RCC_ClockConfig+0x1f8>)
 80060d2:	689a      	ldr	r2, [r3, #8]
 80060d4:	4b5f      	ldr	r3, [pc, #380]	@ (8006254 <HAL_RCC_ClockConfig+0x1f8>)
 80060d6:	21e0      	movs	r1, #224	@ 0xe0
 80060d8:	01c9      	lsls	r1, r1, #7
 80060da:	430a      	orrs	r2, r1
 80060dc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060de:	4b5d      	ldr	r3, [pc, #372]	@ (8006254 <HAL_RCC_ClockConfig+0x1f8>)
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	4a5d      	ldr	r2, [pc, #372]	@ (8006258 <HAL_RCC_ClockConfig+0x1fc>)
 80060e4:	4013      	ands	r3, r2
 80060e6:	0019      	movs	r1, r3
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	689a      	ldr	r2, [r3, #8]
 80060ec:	4b59      	ldr	r3, [pc, #356]	@ (8006254 <HAL_RCC_ClockConfig+0x1f8>)
 80060ee:	430a      	orrs	r2, r1
 80060f0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	2201      	movs	r2, #1
 80060f8:	4013      	ands	r3, r2
 80060fa:	d057      	beq.n	80061ac <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	2b01      	cmp	r3, #1
 8006102:	d107      	bne.n	8006114 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006104:	4b53      	ldr	r3, [pc, #332]	@ (8006254 <HAL_RCC_ClockConfig+0x1f8>)
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	2380      	movs	r3, #128	@ 0x80
 800610a:	029b      	lsls	r3, r3, #10
 800610c:	4013      	ands	r3, r2
 800610e:	d12b      	bne.n	8006168 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	e097      	b.n	8006244 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	2b02      	cmp	r3, #2
 800611a:	d107      	bne.n	800612c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800611c:	4b4d      	ldr	r3, [pc, #308]	@ (8006254 <HAL_RCC_ClockConfig+0x1f8>)
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	2380      	movs	r3, #128	@ 0x80
 8006122:	049b      	lsls	r3, r3, #18
 8006124:	4013      	ands	r3, r2
 8006126:	d11f      	bne.n	8006168 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006128:	2301      	movs	r3, #1
 800612a:	e08b      	b.n	8006244 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d107      	bne.n	8006144 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006134:	4b47      	ldr	r3, [pc, #284]	@ (8006254 <HAL_RCC_ClockConfig+0x1f8>)
 8006136:	681a      	ldr	r2, [r3, #0]
 8006138:	2380      	movs	r3, #128	@ 0x80
 800613a:	00db      	lsls	r3, r3, #3
 800613c:	4013      	ands	r3, r2
 800613e:	d113      	bne.n	8006168 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	e07f      	b.n	8006244 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	2b03      	cmp	r3, #3
 800614a:	d106      	bne.n	800615a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800614c:	4b41      	ldr	r3, [pc, #260]	@ (8006254 <HAL_RCC_ClockConfig+0x1f8>)
 800614e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006150:	2202      	movs	r2, #2
 8006152:	4013      	ands	r3, r2
 8006154:	d108      	bne.n	8006168 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	e074      	b.n	8006244 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800615a:	4b3e      	ldr	r3, [pc, #248]	@ (8006254 <HAL_RCC_ClockConfig+0x1f8>)
 800615c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800615e:	2202      	movs	r2, #2
 8006160:	4013      	ands	r3, r2
 8006162:	d101      	bne.n	8006168 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	e06d      	b.n	8006244 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006168:	4b3a      	ldr	r3, [pc, #232]	@ (8006254 <HAL_RCC_ClockConfig+0x1f8>)
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	2207      	movs	r2, #7
 800616e:	4393      	bics	r3, r2
 8006170:	0019      	movs	r1, r3
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	685a      	ldr	r2, [r3, #4]
 8006176:	4b37      	ldr	r3, [pc, #220]	@ (8006254 <HAL_RCC_ClockConfig+0x1f8>)
 8006178:	430a      	orrs	r2, r1
 800617a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800617c:	f7fe fdba 	bl	8004cf4 <HAL_GetTick>
 8006180:	0003      	movs	r3, r0
 8006182:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006184:	e009      	b.n	800619a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006186:	f7fe fdb5 	bl	8004cf4 <HAL_GetTick>
 800618a:	0002      	movs	r2, r0
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	1ad3      	subs	r3, r2, r3
 8006190:	4a2f      	ldr	r2, [pc, #188]	@ (8006250 <HAL_RCC_ClockConfig+0x1f4>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d901      	bls.n	800619a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8006196:	2303      	movs	r3, #3
 8006198:	e054      	b.n	8006244 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800619a:	4b2e      	ldr	r3, [pc, #184]	@ (8006254 <HAL_RCC_ClockConfig+0x1f8>)
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	2238      	movs	r2, #56	@ 0x38
 80061a0:	401a      	ands	r2, r3
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	00db      	lsls	r3, r3, #3
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d1ec      	bne.n	8006186 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80061ac:	4b27      	ldr	r3, [pc, #156]	@ (800624c <HAL_RCC_ClockConfig+0x1f0>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	2207      	movs	r2, #7
 80061b2:	4013      	ands	r3, r2
 80061b4:	683a      	ldr	r2, [r7, #0]
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d21e      	bcs.n	80061f8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061ba:	4b24      	ldr	r3, [pc, #144]	@ (800624c <HAL_RCC_ClockConfig+0x1f0>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	2207      	movs	r2, #7
 80061c0:	4393      	bics	r3, r2
 80061c2:	0019      	movs	r1, r3
 80061c4:	4b21      	ldr	r3, [pc, #132]	@ (800624c <HAL_RCC_ClockConfig+0x1f0>)
 80061c6:	683a      	ldr	r2, [r7, #0]
 80061c8:	430a      	orrs	r2, r1
 80061ca:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80061cc:	f7fe fd92 	bl	8004cf4 <HAL_GetTick>
 80061d0:	0003      	movs	r3, r0
 80061d2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80061d4:	e009      	b.n	80061ea <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061d6:	f7fe fd8d 	bl	8004cf4 <HAL_GetTick>
 80061da:	0002      	movs	r2, r0
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	1ad3      	subs	r3, r2, r3
 80061e0:	4a1b      	ldr	r2, [pc, #108]	@ (8006250 <HAL_RCC_ClockConfig+0x1f4>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d901      	bls.n	80061ea <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80061e6:	2303      	movs	r3, #3
 80061e8:	e02c      	b.n	8006244 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80061ea:	4b18      	ldr	r3, [pc, #96]	@ (800624c <HAL_RCC_ClockConfig+0x1f0>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	2207      	movs	r2, #7
 80061f0:	4013      	ands	r3, r2
 80061f2:	683a      	ldr	r2, [r7, #0]
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d1ee      	bne.n	80061d6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	2204      	movs	r2, #4
 80061fe:	4013      	ands	r3, r2
 8006200:	d009      	beq.n	8006216 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8006202:	4b14      	ldr	r3, [pc, #80]	@ (8006254 <HAL_RCC_ClockConfig+0x1f8>)
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	4a15      	ldr	r2, [pc, #84]	@ (800625c <HAL_RCC_ClockConfig+0x200>)
 8006208:	4013      	ands	r3, r2
 800620a:	0019      	movs	r1, r3
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	68da      	ldr	r2, [r3, #12]
 8006210:	4b10      	ldr	r3, [pc, #64]	@ (8006254 <HAL_RCC_ClockConfig+0x1f8>)
 8006212:	430a      	orrs	r2, r1
 8006214:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8006216:	f000 f829 	bl	800626c <HAL_RCC_GetSysClockFreq>
 800621a:	0001      	movs	r1, r0
 800621c:	4b0d      	ldr	r3, [pc, #52]	@ (8006254 <HAL_RCC_ClockConfig+0x1f8>)
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	0a1b      	lsrs	r3, r3, #8
 8006222:	220f      	movs	r2, #15
 8006224:	401a      	ands	r2, r3
 8006226:	4b0e      	ldr	r3, [pc, #56]	@ (8006260 <HAL_RCC_ClockConfig+0x204>)
 8006228:	0092      	lsls	r2, r2, #2
 800622a:	58d3      	ldr	r3, [r2, r3]
 800622c:	221f      	movs	r2, #31
 800622e:	4013      	ands	r3, r2
 8006230:	000a      	movs	r2, r1
 8006232:	40da      	lsrs	r2, r3
 8006234:	4b0b      	ldr	r3, [pc, #44]	@ (8006264 <HAL_RCC_ClockConfig+0x208>)
 8006236:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006238:	4b0b      	ldr	r3, [pc, #44]	@ (8006268 <HAL_RCC_ClockConfig+0x20c>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	0018      	movs	r0, r3
 800623e:	f7fe fcfd 	bl	8004c3c <HAL_InitTick>
 8006242:	0003      	movs	r3, r0
}
 8006244:	0018      	movs	r0, r3
 8006246:	46bd      	mov	sp, r7
 8006248:	b004      	add	sp, #16
 800624a:	bd80      	pop	{r7, pc}
 800624c:	40022000 	.word	0x40022000
 8006250:	00001388 	.word	0x00001388
 8006254:	40021000 	.word	0x40021000
 8006258:	fffff0ff 	.word	0xfffff0ff
 800625c:	ffff8fff 	.word	0xffff8fff
 8006260:	0800768c 	.word	0x0800768c
 8006264:	20000000 	.word	0x20000000
 8006268:	20000004 	.word	0x20000004

0800626c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b086      	sub	sp, #24
 8006270:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006272:	4b3c      	ldr	r3, [pc, #240]	@ (8006364 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	2238      	movs	r2, #56	@ 0x38
 8006278:	4013      	ands	r3, r2
 800627a:	d10f      	bne.n	800629c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800627c:	4b39      	ldr	r3, [pc, #228]	@ (8006364 <HAL_RCC_GetSysClockFreq+0xf8>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	0adb      	lsrs	r3, r3, #11
 8006282:	2207      	movs	r2, #7
 8006284:	4013      	ands	r3, r2
 8006286:	2201      	movs	r2, #1
 8006288:	409a      	lsls	r2, r3
 800628a:	0013      	movs	r3, r2
 800628c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800628e:	6839      	ldr	r1, [r7, #0]
 8006290:	4835      	ldr	r0, [pc, #212]	@ (8006368 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006292:	f7fd ff37 	bl	8004104 <__udivsi3>
 8006296:	0003      	movs	r3, r0
 8006298:	613b      	str	r3, [r7, #16]
 800629a:	e05d      	b.n	8006358 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800629c:	4b31      	ldr	r3, [pc, #196]	@ (8006364 <HAL_RCC_GetSysClockFreq+0xf8>)
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	2238      	movs	r2, #56	@ 0x38
 80062a2:	4013      	ands	r3, r2
 80062a4:	2b08      	cmp	r3, #8
 80062a6:	d102      	bne.n	80062ae <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80062a8:	4b30      	ldr	r3, [pc, #192]	@ (800636c <HAL_RCC_GetSysClockFreq+0x100>)
 80062aa:	613b      	str	r3, [r7, #16]
 80062ac:	e054      	b.n	8006358 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80062ae:	4b2d      	ldr	r3, [pc, #180]	@ (8006364 <HAL_RCC_GetSysClockFreq+0xf8>)
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	2238      	movs	r2, #56	@ 0x38
 80062b4:	4013      	ands	r3, r2
 80062b6:	2b10      	cmp	r3, #16
 80062b8:	d138      	bne.n	800632c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80062ba:	4b2a      	ldr	r3, [pc, #168]	@ (8006364 <HAL_RCC_GetSysClockFreq+0xf8>)
 80062bc:	68db      	ldr	r3, [r3, #12]
 80062be:	2203      	movs	r2, #3
 80062c0:	4013      	ands	r3, r2
 80062c2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80062c4:	4b27      	ldr	r3, [pc, #156]	@ (8006364 <HAL_RCC_GetSysClockFreq+0xf8>)
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	091b      	lsrs	r3, r3, #4
 80062ca:	2207      	movs	r2, #7
 80062cc:	4013      	ands	r3, r2
 80062ce:	3301      	adds	r3, #1
 80062d0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2b03      	cmp	r3, #3
 80062d6:	d10d      	bne.n	80062f4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80062d8:	68b9      	ldr	r1, [r7, #8]
 80062da:	4824      	ldr	r0, [pc, #144]	@ (800636c <HAL_RCC_GetSysClockFreq+0x100>)
 80062dc:	f7fd ff12 	bl	8004104 <__udivsi3>
 80062e0:	0003      	movs	r3, r0
 80062e2:	0019      	movs	r1, r3
 80062e4:	4b1f      	ldr	r3, [pc, #124]	@ (8006364 <HAL_RCC_GetSysClockFreq+0xf8>)
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	0a1b      	lsrs	r3, r3, #8
 80062ea:	227f      	movs	r2, #127	@ 0x7f
 80062ec:	4013      	ands	r3, r2
 80062ee:	434b      	muls	r3, r1
 80062f0:	617b      	str	r3, [r7, #20]
        break;
 80062f2:	e00d      	b.n	8006310 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80062f4:	68b9      	ldr	r1, [r7, #8]
 80062f6:	481c      	ldr	r0, [pc, #112]	@ (8006368 <HAL_RCC_GetSysClockFreq+0xfc>)
 80062f8:	f7fd ff04 	bl	8004104 <__udivsi3>
 80062fc:	0003      	movs	r3, r0
 80062fe:	0019      	movs	r1, r3
 8006300:	4b18      	ldr	r3, [pc, #96]	@ (8006364 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	0a1b      	lsrs	r3, r3, #8
 8006306:	227f      	movs	r2, #127	@ 0x7f
 8006308:	4013      	ands	r3, r2
 800630a:	434b      	muls	r3, r1
 800630c:	617b      	str	r3, [r7, #20]
        break;
 800630e:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8006310:	4b14      	ldr	r3, [pc, #80]	@ (8006364 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	0f5b      	lsrs	r3, r3, #29
 8006316:	2207      	movs	r2, #7
 8006318:	4013      	ands	r3, r2
 800631a:	3301      	adds	r3, #1
 800631c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800631e:	6879      	ldr	r1, [r7, #4]
 8006320:	6978      	ldr	r0, [r7, #20]
 8006322:	f7fd feef 	bl	8004104 <__udivsi3>
 8006326:	0003      	movs	r3, r0
 8006328:	613b      	str	r3, [r7, #16]
 800632a:	e015      	b.n	8006358 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800632c:	4b0d      	ldr	r3, [pc, #52]	@ (8006364 <HAL_RCC_GetSysClockFreq+0xf8>)
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	2238      	movs	r2, #56	@ 0x38
 8006332:	4013      	ands	r3, r2
 8006334:	2b20      	cmp	r3, #32
 8006336:	d103      	bne.n	8006340 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8006338:	2380      	movs	r3, #128	@ 0x80
 800633a:	021b      	lsls	r3, r3, #8
 800633c:	613b      	str	r3, [r7, #16]
 800633e:	e00b      	b.n	8006358 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8006340:	4b08      	ldr	r3, [pc, #32]	@ (8006364 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	2238      	movs	r2, #56	@ 0x38
 8006346:	4013      	ands	r3, r2
 8006348:	2b18      	cmp	r3, #24
 800634a:	d103      	bne.n	8006354 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800634c:	23fa      	movs	r3, #250	@ 0xfa
 800634e:	01db      	lsls	r3, r3, #7
 8006350:	613b      	str	r3, [r7, #16]
 8006352:	e001      	b.n	8006358 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8006354:	2300      	movs	r3, #0
 8006356:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006358:	693b      	ldr	r3, [r7, #16]
}
 800635a:	0018      	movs	r0, r3
 800635c:	46bd      	mov	sp, r7
 800635e:	b006      	add	sp, #24
 8006360:	bd80      	pop	{r7, pc}
 8006362:	46c0      	nop			@ (mov r8, r8)
 8006364:	40021000 	.word	0x40021000
 8006368:	00f42400 	.word	0x00f42400
 800636c:	007a1200 	.word	0x007a1200

08006370 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006374:	4b02      	ldr	r3, [pc, #8]	@ (8006380 <HAL_RCC_GetHCLKFreq+0x10>)
 8006376:	681b      	ldr	r3, [r3, #0]
}
 8006378:	0018      	movs	r0, r3
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
 800637e:	46c0      	nop			@ (mov r8, r8)
 8006380:	20000000 	.word	0x20000000

08006384 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006384:	b5b0      	push	{r4, r5, r7, lr}
 8006386:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006388:	f7ff fff2 	bl	8006370 <HAL_RCC_GetHCLKFreq>
 800638c:	0004      	movs	r4, r0
 800638e:	f7ff faf9 	bl	8005984 <LL_RCC_GetAPB1Prescaler>
 8006392:	0003      	movs	r3, r0
 8006394:	0b1a      	lsrs	r2, r3, #12
 8006396:	4b05      	ldr	r3, [pc, #20]	@ (80063ac <HAL_RCC_GetPCLK1Freq+0x28>)
 8006398:	0092      	lsls	r2, r2, #2
 800639a:	58d3      	ldr	r3, [r2, r3]
 800639c:	221f      	movs	r2, #31
 800639e:	4013      	ands	r3, r2
 80063a0:	40dc      	lsrs	r4, r3
 80063a2:	0023      	movs	r3, r4
}
 80063a4:	0018      	movs	r0, r3
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bdb0      	pop	{r4, r5, r7, pc}
 80063aa:	46c0      	nop			@ (mov r8, r8)
 80063ac:	080076cc 	.word	0x080076cc

080063b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b086      	sub	sp, #24
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80063b8:	2313      	movs	r3, #19
 80063ba:	18fb      	adds	r3, r7, r3
 80063bc:	2200      	movs	r2, #0
 80063be:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80063c0:	2312      	movs	r3, #18
 80063c2:	18fb      	adds	r3, r7, r3
 80063c4:	2200      	movs	r2, #0
 80063c6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	2380      	movs	r3, #128	@ 0x80
 80063ce:	029b      	lsls	r3, r3, #10
 80063d0:	4013      	ands	r3, r2
 80063d2:	d100      	bne.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80063d4:	e0ad      	b.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 80063d6:	2011      	movs	r0, #17
 80063d8:	183b      	adds	r3, r7, r0
 80063da:	2200      	movs	r2, #0
 80063dc:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80063de:	4b47      	ldr	r3, [pc, #284]	@ (80064fc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80063e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80063e2:	2380      	movs	r3, #128	@ 0x80
 80063e4:	055b      	lsls	r3, r3, #21
 80063e6:	4013      	ands	r3, r2
 80063e8:	d110      	bne.n	800640c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80063ea:	4b44      	ldr	r3, [pc, #272]	@ (80064fc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80063ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80063ee:	4b43      	ldr	r3, [pc, #268]	@ (80064fc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80063f0:	2180      	movs	r1, #128	@ 0x80
 80063f2:	0549      	lsls	r1, r1, #21
 80063f4:	430a      	orrs	r2, r1
 80063f6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80063f8:	4b40      	ldr	r3, [pc, #256]	@ (80064fc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80063fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80063fc:	2380      	movs	r3, #128	@ 0x80
 80063fe:	055b      	lsls	r3, r3, #21
 8006400:	4013      	ands	r3, r2
 8006402:	60bb      	str	r3, [r7, #8]
 8006404:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006406:	183b      	adds	r3, r7, r0
 8006408:	2201      	movs	r2, #1
 800640a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800640c:	4b3c      	ldr	r3, [pc, #240]	@ (8006500 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	4b3b      	ldr	r3, [pc, #236]	@ (8006500 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8006412:	2180      	movs	r1, #128	@ 0x80
 8006414:	0049      	lsls	r1, r1, #1
 8006416:	430a      	orrs	r2, r1
 8006418:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800641a:	f7fe fc6b 	bl	8004cf4 <HAL_GetTick>
 800641e:	0003      	movs	r3, r0
 8006420:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006422:	e00b      	b.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006424:	f7fe fc66 	bl	8004cf4 <HAL_GetTick>
 8006428:	0002      	movs	r2, r0
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	1ad3      	subs	r3, r2, r3
 800642e:	2b02      	cmp	r3, #2
 8006430:	d904      	bls.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8006432:	2313      	movs	r3, #19
 8006434:	18fb      	adds	r3, r7, r3
 8006436:	2203      	movs	r2, #3
 8006438:	701a      	strb	r2, [r3, #0]
        break;
 800643a:	e005      	b.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800643c:	4b30      	ldr	r3, [pc, #192]	@ (8006500 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	2380      	movs	r3, #128	@ 0x80
 8006442:	005b      	lsls	r3, r3, #1
 8006444:	4013      	ands	r3, r2
 8006446:	d0ed      	beq.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8006448:	2313      	movs	r3, #19
 800644a:	18fb      	adds	r3, r7, r3
 800644c:	781b      	ldrb	r3, [r3, #0]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d15e      	bne.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006452:	4b2a      	ldr	r3, [pc, #168]	@ (80064fc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006454:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006456:	23c0      	movs	r3, #192	@ 0xc0
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	4013      	ands	r3, r2
 800645c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d019      	beq.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006468:	697a      	ldr	r2, [r7, #20]
 800646a:	429a      	cmp	r2, r3
 800646c:	d014      	beq.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800646e:	4b23      	ldr	r3, [pc, #140]	@ (80064fc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006470:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006472:	4a24      	ldr	r2, [pc, #144]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8006474:	4013      	ands	r3, r2
 8006476:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006478:	4b20      	ldr	r3, [pc, #128]	@ (80064fc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800647a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800647c:	4b1f      	ldr	r3, [pc, #124]	@ (80064fc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800647e:	2180      	movs	r1, #128	@ 0x80
 8006480:	0249      	lsls	r1, r1, #9
 8006482:	430a      	orrs	r2, r1
 8006484:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006486:	4b1d      	ldr	r3, [pc, #116]	@ (80064fc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006488:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800648a:	4b1c      	ldr	r3, [pc, #112]	@ (80064fc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800648c:	491e      	ldr	r1, [pc, #120]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800648e:	400a      	ands	r2, r1
 8006490:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006492:	4b1a      	ldr	r3, [pc, #104]	@ (80064fc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006494:	697a      	ldr	r2, [r7, #20]
 8006496:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	2201      	movs	r2, #1
 800649c:	4013      	ands	r3, r2
 800649e:	d016      	beq.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064a0:	f7fe fc28 	bl	8004cf4 <HAL_GetTick>
 80064a4:	0003      	movs	r3, r0
 80064a6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80064a8:	e00c      	b.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064aa:	f7fe fc23 	bl	8004cf4 <HAL_GetTick>
 80064ae:	0002      	movs	r2, r0
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	1ad3      	subs	r3, r2, r3
 80064b4:	4a15      	ldr	r2, [pc, #84]	@ (800650c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d904      	bls.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80064ba:	2313      	movs	r3, #19
 80064bc:	18fb      	adds	r3, r7, r3
 80064be:	2203      	movs	r2, #3
 80064c0:	701a      	strb	r2, [r3, #0]
            break;
 80064c2:	e004      	b.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80064c4:	4b0d      	ldr	r3, [pc, #52]	@ (80064fc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80064c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064c8:	2202      	movs	r2, #2
 80064ca:	4013      	ands	r3, r2
 80064cc:	d0ed      	beq.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80064ce:	2313      	movs	r3, #19
 80064d0:	18fb      	adds	r3, r7, r3
 80064d2:	781b      	ldrb	r3, [r3, #0]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d10a      	bne.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80064d8:	4b08      	ldr	r3, [pc, #32]	@ (80064fc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80064da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064dc:	4a09      	ldr	r2, [pc, #36]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80064de:	4013      	ands	r3, r2
 80064e0:	0019      	movs	r1, r3
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80064e6:	4b05      	ldr	r3, [pc, #20]	@ (80064fc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80064e8:	430a      	orrs	r2, r1
 80064ea:	65da      	str	r2, [r3, #92]	@ 0x5c
 80064ec:	e016      	b.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80064ee:	2312      	movs	r3, #18
 80064f0:	18fb      	adds	r3, r7, r3
 80064f2:	2213      	movs	r2, #19
 80064f4:	18ba      	adds	r2, r7, r2
 80064f6:	7812      	ldrb	r2, [r2, #0]
 80064f8:	701a      	strb	r2, [r3, #0]
 80064fa:	e00f      	b.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80064fc:	40021000 	.word	0x40021000
 8006500:	40007000 	.word	0x40007000
 8006504:	fffffcff 	.word	0xfffffcff
 8006508:	fffeffff 	.word	0xfffeffff
 800650c:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006510:	2312      	movs	r3, #18
 8006512:	18fb      	adds	r3, r7, r3
 8006514:	2213      	movs	r2, #19
 8006516:	18ba      	adds	r2, r7, r2
 8006518:	7812      	ldrb	r2, [r2, #0]
 800651a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800651c:	2311      	movs	r3, #17
 800651e:	18fb      	adds	r3, r7, r3
 8006520:	781b      	ldrb	r3, [r3, #0]
 8006522:	2b01      	cmp	r3, #1
 8006524:	d105      	bne.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006526:	4bb6      	ldr	r3, [pc, #728]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006528:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800652a:	4bb5      	ldr	r3, [pc, #724]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800652c:	49b5      	ldr	r1, [pc, #724]	@ (8006804 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800652e:	400a      	ands	r2, r1
 8006530:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	2201      	movs	r2, #1
 8006538:	4013      	ands	r3, r2
 800653a:	d009      	beq.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800653c:	4bb0      	ldr	r3, [pc, #704]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800653e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006540:	2203      	movs	r2, #3
 8006542:	4393      	bics	r3, r2
 8006544:	0019      	movs	r1, r3
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	685a      	ldr	r2, [r3, #4]
 800654a:	4bad      	ldr	r3, [pc, #692]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800654c:	430a      	orrs	r2, r1
 800654e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	2202      	movs	r2, #2
 8006556:	4013      	ands	r3, r2
 8006558:	d009      	beq.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800655a:	4ba9      	ldr	r3, [pc, #676]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800655c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800655e:	220c      	movs	r2, #12
 8006560:	4393      	bics	r3, r2
 8006562:	0019      	movs	r1, r3
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	689a      	ldr	r2, [r3, #8]
 8006568:	4ba5      	ldr	r3, [pc, #660]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800656a:	430a      	orrs	r2, r1
 800656c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	2204      	movs	r2, #4
 8006574:	4013      	ands	r3, r2
 8006576:	d009      	beq.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006578:	4ba1      	ldr	r3, [pc, #644]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800657a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800657c:	2230      	movs	r2, #48	@ 0x30
 800657e:	4393      	bics	r3, r2
 8006580:	0019      	movs	r1, r3
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	68da      	ldr	r2, [r3, #12]
 8006586:	4b9e      	ldr	r3, [pc, #632]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006588:	430a      	orrs	r2, r1
 800658a:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	2210      	movs	r2, #16
 8006592:	4013      	ands	r3, r2
 8006594:	d009      	beq.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006596:	4b9a      	ldr	r3, [pc, #616]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006598:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800659a:	4a9b      	ldr	r2, [pc, #620]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800659c:	4013      	ands	r3, r2
 800659e:	0019      	movs	r1, r3
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	691a      	ldr	r2, [r3, #16]
 80065a4:	4b96      	ldr	r3, [pc, #600]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80065a6:	430a      	orrs	r2, r1
 80065a8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	2380      	movs	r3, #128	@ 0x80
 80065b0:	015b      	lsls	r3, r3, #5
 80065b2:	4013      	ands	r3, r2
 80065b4:	d009      	beq.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 80065b6:	4b92      	ldr	r3, [pc, #584]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80065b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065ba:	4a94      	ldr	r2, [pc, #592]	@ (800680c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80065bc:	4013      	ands	r3, r2
 80065be:	0019      	movs	r1, r3
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	695a      	ldr	r2, [r3, #20]
 80065c4:	4b8e      	ldr	r3, [pc, #568]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80065c6:	430a      	orrs	r2, r1
 80065c8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	2380      	movs	r3, #128	@ 0x80
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	4013      	ands	r3, r2
 80065d4:	d009      	beq.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80065d6:	4b8a      	ldr	r3, [pc, #552]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80065d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065da:	4a8d      	ldr	r2, [pc, #564]	@ (8006810 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 80065dc:	4013      	ands	r3, r2
 80065de:	0019      	movs	r1, r3
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80065e4:	4b86      	ldr	r3, [pc, #536]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80065e6:	430a      	orrs	r2, r1
 80065e8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	2380      	movs	r3, #128	@ 0x80
 80065f0:	00db      	lsls	r3, r3, #3
 80065f2:	4013      	ands	r3, r2
 80065f4:	d009      	beq.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80065f6:	4b82      	ldr	r3, [pc, #520]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80065f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065fa:	4a86      	ldr	r2, [pc, #536]	@ (8006814 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 80065fc:	4013      	ands	r3, r2
 80065fe:	0019      	movs	r1, r3
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006604:	4b7e      	ldr	r3, [pc, #504]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006606:	430a      	orrs	r2, r1
 8006608:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	2220      	movs	r2, #32
 8006610:	4013      	ands	r3, r2
 8006612:	d009      	beq.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006614:	4b7a      	ldr	r3, [pc, #488]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006616:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006618:	4a7f      	ldr	r2, [pc, #508]	@ (8006818 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800661a:	4013      	ands	r3, r2
 800661c:	0019      	movs	r1, r3
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	699a      	ldr	r2, [r3, #24]
 8006622:	4b77      	ldr	r3, [pc, #476]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006624:	430a      	orrs	r2, r1
 8006626:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	2240      	movs	r2, #64	@ 0x40
 800662e:	4013      	ands	r3, r2
 8006630:	d009      	beq.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006632:	4b73      	ldr	r3, [pc, #460]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006634:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006636:	4a79      	ldr	r2, [pc, #484]	@ (800681c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8006638:	4013      	ands	r3, r2
 800663a:	0019      	movs	r1, r3
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	69da      	ldr	r2, [r3, #28]
 8006640:	4b6f      	ldr	r3, [pc, #444]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006642:	430a      	orrs	r2, r1
 8006644:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	2380      	movs	r3, #128	@ 0x80
 800664c:	01db      	lsls	r3, r3, #7
 800664e:	4013      	ands	r3, r2
 8006650:	d015      	beq.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006652:	4b6b      	ldr	r3, [pc, #428]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006654:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006656:	009b      	lsls	r3, r3, #2
 8006658:	0899      	lsrs	r1, r3, #2
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800665e:	4b68      	ldr	r3, [pc, #416]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006660:	430a      	orrs	r2, r1
 8006662:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006668:	2380      	movs	r3, #128	@ 0x80
 800666a:	05db      	lsls	r3, r3, #23
 800666c:	429a      	cmp	r2, r3
 800666e:	d106      	bne.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006670:	4b63      	ldr	r3, [pc, #396]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006672:	68da      	ldr	r2, [r3, #12]
 8006674:	4b62      	ldr	r3, [pc, #392]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006676:	2180      	movs	r1, #128	@ 0x80
 8006678:	0249      	lsls	r1, r1, #9
 800667a:	430a      	orrs	r2, r1
 800667c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	2380      	movs	r3, #128	@ 0x80
 8006684:	031b      	lsls	r3, r3, #12
 8006686:	4013      	ands	r3, r2
 8006688:	d009      	beq.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800668a:	4b5d      	ldr	r3, [pc, #372]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800668c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800668e:	2240      	movs	r2, #64	@ 0x40
 8006690:	4393      	bics	r3, r2
 8006692:	0019      	movs	r1, r3
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006698:	4b59      	ldr	r3, [pc, #356]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800669a:	430a      	orrs	r2, r1
 800669c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	2380      	movs	r3, #128	@ 0x80
 80066a4:	039b      	lsls	r3, r3, #14
 80066a6:	4013      	ands	r3, r2
 80066a8:	d016      	beq.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80066aa:	4b55      	ldr	r3, [pc, #340]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80066ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066ae:	4a5c      	ldr	r2, [pc, #368]	@ (8006820 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80066b0:	4013      	ands	r3, r2
 80066b2:	0019      	movs	r1, r3
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80066b8:	4b51      	ldr	r3, [pc, #324]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80066ba:	430a      	orrs	r2, r1
 80066bc:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80066c2:	2380      	movs	r3, #128	@ 0x80
 80066c4:	03db      	lsls	r3, r3, #15
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d106      	bne.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80066ca:	4b4d      	ldr	r3, [pc, #308]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80066cc:	68da      	ldr	r2, [r3, #12]
 80066ce:	4b4c      	ldr	r3, [pc, #304]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80066d0:	2180      	movs	r1, #128	@ 0x80
 80066d2:	0449      	lsls	r1, r1, #17
 80066d4:	430a      	orrs	r2, r1
 80066d6:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	2380      	movs	r3, #128	@ 0x80
 80066de:	03db      	lsls	r3, r3, #15
 80066e0:	4013      	ands	r3, r2
 80066e2:	d016      	beq.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80066e4:	4b46      	ldr	r3, [pc, #280]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80066e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066e8:	4a4e      	ldr	r2, [pc, #312]	@ (8006824 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80066ea:	4013      	ands	r3, r2
 80066ec:	0019      	movs	r1, r3
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80066f2:	4b43      	ldr	r3, [pc, #268]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80066f4:	430a      	orrs	r2, r1
 80066f6:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80066fc:	2380      	movs	r3, #128	@ 0x80
 80066fe:	045b      	lsls	r3, r3, #17
 8006700:	429a      	cmp	r2, r3
 8006702:	d106      	bne.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8006704:	4b3e      	ldr	r3, [pc, #248]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006706:	68da      	ldr	r2, [r3, #12]
 8006708:	4b3d      	ldr	r3, [pc, #244]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800670a:	2180      	movs	r1, #128	@ 0x80
 800670c:	0449      	lsls	r1, r1, #17
 800670e:	430a      	orrs	r2, r1
 8006710:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	2380      	movs	r3, #128	@ 0x80
 8006718:	011b      	lsls	r3, r3, #4
 800671a:	4013      	ands	r3, r2
 800671c:	d014      	beq.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800671e:	4b38      	ldr	r3, [pc, #224]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006720:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006722:	2203      	movs	r2, #3
 8006724:	4393      	bics	r3, r2
 8006726:	0019      	movs	r1, r3
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6a1a      	ldr	r2, [r3, #32]
 800672c:	4b34      	ldr	r3, [pc, #208]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800672e:	430a      	orrs	r2, r1
 8006730:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6a1b      	ldr	r3, [r3, #32]
 8006736:	2b01      	cmp	r3, #1
 8006738:	d106      	bne.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800673a:	4b31      	ldr	r3, [pc, #196]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800673c:	68da      	ldr	r2, [r3, #12]
 800673e:	4b30      	ldr	r3, [pc, #192]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006740:	2180      	movs	r1, #128	@ 0x80
 8006742:	0249      	lsls	r1, r1, #9
 8006744:	430a      	orrs	r2, r1
 8006746:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	2380      	movs	r3, #128	@ 0x80
 800674e:	019b      	lsls	r3, r3, #6
 8006750:	4013      	ands	r3, r2
 8006752:	d014      	beq.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8006754:	4b2a      	ldr	r3, [pc, #168]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006756:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006758:	220c      	movs	r2, #12
 800675a:	4393      	bics	r3, r2
 800675c:	0019      	movs	r1, r3
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006762:	4b27      	ldr	r3, [pc, #156]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006764:	430a      	orrs	r2, r1
 8006766:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800676c:	2b04      	cmp	r3, #4
 800676e:	d106      	bne.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006770:	4b23      	ldr	r3, [pc, #140]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006772:	68da      	ldr	r2, [r3, #12]
 8006774:	4b22      	ldr	r3, [pc, #136]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006776:	2180      	movs	r1, #128	@ 0x80
 8006778:	0249      	lsls	r1, r1, #9
 800677a:	430a      	orrs	r2, r1
 800677c:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	2380      	movs	r3, #128	@ 0x80
 8006784:	045b      	lsls	r3, r3, #17
 8006786:	4013      	ands	r3, r2
 8006788:	d016      	beq.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800678a:	4b1d      	ldr	r3, [pc, #116]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800678c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800678e:	4a22      	ldr	r2, [pc, #136]	@ (8006818 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006790:	4013      	ands	r3, r2
 8006792:	0019      	movs	r1, r3
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006798:	4b19      	ldr	r3, [pc, #100]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800679a:	430a      	orrs	r2, r1
 800679c:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80067a2:	2380      	movs	r3, #128	@ 0x80
 80067a4:	019b      	lsls	r3, r3, #6
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d106      	bne.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80067aa:	4b15      	ldr	r3, [pc, #84]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80067ac:	68da      	ldr	r2, [r3, #12]
 80067ae:	4b14      	ldr	r3, [pc, #80]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80067b0:	2180      	movs	r1, #128	@ 0x80
 80067b2:	0449      	lsls	r1, r1, #17
 80067b4:	430a      	orrs	r2, r1
 80067b6:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	2380      	movs	r3, #128	@ 0x80
 80067be:	049b      	lsls	r3, r3, #18
 80067c0:	4013      	ands	r3, r2
 80067c2:	d016      	beq.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80067c4:	4b0e      	ldr	r3, [pc, #56]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80067c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067c8:	4a10      	ldr	r2, [pc, #64]	@ (800680c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80067ca:	4013      	ands	r3, r2
 80067cc:	0019      	movs	r1, r3
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80067d2:	4b0b      	ldr	r3, [pc, #44]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80067d4:	430a      	orrs	r2, r1
 80067d6:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80067dc:	2380      	movs	r3, #128	@ 0x80
 80067de:	005b      	lsls	r3, r3, #1
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d106      	bne.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80067e4:	4b06      	ldr	r3, [pc, #24]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80067e6:	68da      	ldr	r2, [r3, #12]
 80067e8:	4b05      	ldr	r3, [pc, #20]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80067ea:	2180      	movs	r1, #128	@ 0x80
 80067ec:	0449      	lsls	r1, r1, #17
 80067ee:	430a      	orrs	r2, r1
 80067f0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80067f2:	2312      	movs	r3, #18
 80067f4:	18fb      	adds	r3, r7, r3
 80067f6:	781b      	ldrb	r3, [r3, #0]
}
 80067f8:	0018      	movs	r0, r3
 80067fa:	46bd      	mov	sp, r7
 80067fc:	b006      	add	sp, #24
 80067fe:	bd80      	pop	{r7, pc}
 8006800:	40021000 	.word	0x40021000
 8006804:	efffffff 	.word	0xefffffff
 8006808:	fffff3ff 	.word	0xfffff3ff
 800680c:	fffffcff 	.word	0xfffffcff
 8006810:	fff3ffff 	.word	0xfff3ffff
 8006814:	ffcfffff 	.word	0xffcfffff
 8006818:	ffffcfff 	.word	0xffffcfff
 800681c:	ffff3fff 	.word	0xffff3fff
 8006820:	ffbfffff 	.word	0xffbfffff
 8006824:	feffffff 	.word	0xfeffffff

08006828 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b082      	sub	sp, #8
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d101      	bne.n	800683a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	e046      	b.n	80068c8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2288      	movs	r2, #136	@ 0x88
 800683e:	589b      	ldr	r3, [r3, r2]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d107      	bne.n	8006854 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2284      	movs	r2, #132	@ 0x84
 8006848:	2100      	movs	r1, #0
 800684a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	0018      	movs	r0, r3
 8006850:	f7fe f92c 	bl	8004aac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2288      	movs	r2, #136	@ 0x88
 8006858:	2124      	movs	r1, #36	@ 0x24
 800685a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	681a      	ldr	r2, [r3, #0]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	2101      	movs	r1, #1
 8006868:	438a      	bics	r2, r1
 800686a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006870:	2b00      	cmp	r3, #0
 8006872:	d003      	beq.n	800687c <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	0018      	movs	r0, r3
 8006878:	f000 fb82 	bl	8006f80 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	0018      	movs	r0, r3
 8006880:	f000 f828 	bl	80068d4 <UART_SetConfig>
 8006884:	0003      	movs	r3, r0
 8006886:	2b01      	cmp	r3, #1
 8006888:	d101      	bne.n	800688e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	e01c      	b.n	80068c8 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	685a      	ldr	r2, [r3, #4]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	490d      	ldr	r1, [pc, #52]	@ (80068d0 <HAL_UART_Init+0xa8>)
 800689a:	400a      	ands	r2, r1
 800689c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	689a      	ldr	r2, [r3, #8]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	212a      	movs	r1, #42	@ 0x2a
 80068aa:	438a      	bics	r2, r1
 80068ac:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	2101      	movs	r1, #1
 80068ba:	430a      	orrs	r2, r1
 80068bc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	0018      	movs	r0, r3
 80068c2:	f000 fc11 	bl	80070e8 <UART_CheckIdleState>
 80068c6:	0003      	movs	r3, r0
}
 80068c8:	0018      	movs	r0, r3
 80068ca:	46bd      	mov	sp, r7
 80068cc:	b002      	add	sp, #8
 80068ce:	bd80      	pop	{r7, pc}
 80068d0:	ffffb7ff 	.word	0xffffb7ff

080068d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068d4:	b5b0      	push	{r4, r5, r7, lr}
 80068d6:	b090      	sub	sp, #64	@ 0x40
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80068dc:	231a      	movs	r3, #26
 80068de:	2220      	movs	r2, #32
 80068e0:	189b      	adds	r3, r3, r2
 80068e2:	19db      	adds	r3, r3, r7
 80068e4:	2200      	movs	r2, #0
 80068e6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80068e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ea:	689a      	ldr	r2, [r3, #8]
 80068ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ee:	691b      	ldr	r3, [r3, #16]
 80068f0:	431a      	orrs	r2, r3
 80068f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068f4:	695b      	ldr	r3, [r3, #20]
 80068f6:	431a      	orrs	r2, r3
 80068f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068fa:	69db      	ldr	r3, [r3, #28]
 80068fc:	4313      	orrs	r3, r2
 80068fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4ac1      	ldr	r2, [pc, #772]	@ (8006c0c <UART_SetConfig+0x338>)
 8006908:	4013      	ands	r3, r2
 800690a:	0019      	movs	r1, r3
 800690c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006912:	430b      	orrs	r3, r1
 8006914:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	4abc      	ldr	r2, [pc, #752]	@ (8006c10 <UART_SetConfig+0x33c>)
 800691e:	4013      	ands	r3, r2
 8006920:	0018      	movs	r0, r3
 8006922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006924:	68d9      	ldr	r1, [r3, #12]
 8006926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	0003      	movs	r3, r0
 800692c:	430b      	orrs	r3, r1
 800692e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006932:	699b      	ldr	r3, [r3, #24]
 8006934:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4ab6      	ldr	r2, [pc, #728]	@ (8006c14 <UART_SetConfig+0x340>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d009      	beq.n	8006954 <UART_SetConfig+0x80>
 8006940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4ab4      	ldr	r2, [pc, #720]	@ (8006c18 <UART_SetConfig+0x344>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d004      	beq.n	8006954 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800694a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800694c:	6a1b      	ldr	r3, [r3, #32]
 800694e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006950:	4313      	orrs	r3, r2
 8006952:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	4ab0      	ldr	r2, [pc, #704]	@ (8006c1c <UART_SetConfig+0x348>)
 800695c:	4013      	ands	r3, r2
 800695e:	0019      	movs	r1, r3
 8006960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006966:	430b      	orrs	r3, r1
 8006968:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800696a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006970:	220f      	movs	r2, #15
 8006972:	4393      	bics	r3, r2
 8006974:	0018      	movs	r0, r3
 8006976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006978:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800697a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	0003      	movs	r3, r0
 8006980:	430b      	orrs	r3, r1
 8006982:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4aa5      	ldr	r2, [pc, #660]	@ (8006c20 <UART_SetConfig+0x34c>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d131      	bne.n	80069f2 <UART_SetConfig+0x11e>
 800698e:	4ba5      	ldr	r3, [pc, #660]	@ (8006c24 <UART_SetConfig+0x350>)
 8006990:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006992:	2203      	movs	r2, #3
 8006994:	4013      	ands	r3, r2
 8006996:	2b03      	cmp	r3, #3
 8006998:	d01d      	beq.n	80069d6 <UART_SetConfig+0x102>
 800699a:	d823      	bhi.n	80069e4 <UART_SetConfig+0x110>
 800699c:	2b02      	cmp	r3, #2
 800699e:	d00c      	beq.n	80069ba <UART_SetConfig+0xe6>
 80069a0:	d820      	bhi.n	80069e4 <UART_SetConfig+0x110>
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d002      	beq.n	80069ac <UART_SetConfig+0xd8>
 80069a6:	2b01      	cmp	r3, #1
 80069a8:	d00e      	beq.n	80069c8 <UART_SetConfig+0xf4>
 80069aa:	e01b      	b.n	80069e4 <UART_SetConfig+0x110>
 80069ac:	231b      	movs	r3, #27
 80069ae:	2220      	movs	r2, #32
 80069b0:	189b      	adds	r3, r3, r2
 80069b2:	19db      	adds	r3, r3, r7
 80069b4:	2200      	movs	r2, #0
 80069b6:	701a      	strb	r2, [r3, #0]
 80069b8:	e154      	b.n	8006c64 <UART_SetConfig+0x390>
 80069ba:	231b      	movs	r3, #27
 80069bc:	2220      	movs	r2, #32
 80069be:	189b      	adds	r3, r3, r2
 80069c0:	19db      	adds	r3, r3, r7
 80069c2:	2202      	movs	r2, #2
 80069c4:	701a      	strb	r2, [r3, #0]
 80069c6:	e14d      	b.n	8006c64 <UART_SetConfig+0x390>
 80069c8:	231b      	movs	r3, #27
 80069ca:	2220      	movs	r2, #32
 80069cc:	189b      	adds	r3, r3, r2
 80069ce:	19db      	adds	r3, r3, r7
 80069d0:	2204      	movs	r2, #4
 80069d2:	701a      	strb	r2, [r3, #0]
 80069d4:	e146      	b.n	8006c64 <UART_SetConfig+0x390>
 80069d6:	231b      	movs	r3, #27
 80069d8:	2220      	movs	r2, #32
 80069da:	189b      	adds	r3, r3, r2
 80069dc:	19db      	adds	r3, r3, r7
 80069de:	2208      	movs	r2, #8
 80069e0:	701a      	strb	r2, [r3, #0]
 80069e2:	e13f      	b.n	8006c64 <UART_SetConfig+0x390>
 80069e4:	231b      	movs	r3, #27
 80069e6:	2220      	movs	r2, #32
 80069e8:	189b      	adds	r3, r3, r2
 80069ea:	19db      	adds	r3, r3, r7
 80069ec:	2210      	movs	r2, #16
 80069ee:	701a      	strb	r2, [r3, #0]
 80069f0:	e138      	b.n	8006c64 <UART_SetConfig+0x390>
 80069f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a8c      	ldr	r2, [pc, #560]	@ (8006c28 <UART_SetConfig+0x354>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d131      	bne.n	8006a60 <UART_SetConfig+0x18c>
 80069fc:	4b89      	ldr	r3, [pc, #548]	@ (8006c24 <UART_SetConfig+0x350>)
 80069fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a00:	220c      	movs	r2, #12
 8006a02:	4013      	ands	r3, r2
 8006a04:	2b0c      	cmp	r3, #12
 8006a06:	d01d      	beq.n	8006a44 <UART_SetConfig+0x170>
 8006a08:	d823      	bhi.n	8006a52 <UART_SetConfig+0x17e>
 8006a0a:	2b08      	cmp	r3, #8
 8006a0c:	d00c      	beq.n	8006a28 <UART_SetConfig+0x154>
 8006a0e:	d820      	bhi.n	8006a52 <UART_SetConfig+0x17e>
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d002      	beq.n	8006a1a <UART_SetConfig+0x146>
 8006a14:	2b04      	cmp	r3, #4
 8006a16:	d00e      	beq.n	8006a36 <UART_SetConfig+0x162>
 8006a18:	e01b      	b.n	8006a52 <UART_SetConfig+0x17e>
 8006a1a:	231b      	movs	r3, #27
 8006a1c:	2220      	movs	r2, #32
 8006a1e:	189b      	adds	r3, r3, r2
 8006a20:	19db      	adds	r3, r3, r7
 8006a22:	2200      	movs	r2, #0
 8006a24:	701a      	strb	r2, [r3, #0]
 8006a26:	e11d      	b.n	8006c64 <UART_SetConfig+0x390>
 8006a28:	231b      	movs	r3, #27
 8006a2a:	2220      	movs	r2, #32
 8006a2c:	189b      	adds	r3, r3, r2
 8006a2e:	19db      	adds	r3, r3, r7
 8006a30:	2202      	movs	r2, #2
 8006a32:	701a      	strb	r2, [r3, #0]
 8006a34:	e116      	b.n	8006c64 <UART_SetConfig+0x390>
 8006a36:	231b      	movs	r3, #27
 8006a38:	2220      	movs	r2, #32
 8006a3a:	189b      	adds	r3, r3, r2
 8006a3c:	19db      	adds	r3, r3, r7
 8006a3e:	2204      	movs	r2, #4
 8006a40:	701a      	strb	r2, [r3, #0]
 8006a42:	e10f      	b.n	8006c64 <UART_SetConfig+0x390>
 8006a44:	231b      	movs	r3, #27
 8006a46:	2220      	movs	r2, #32
 8006a48:	189b      	adds	r3, r3, r2
 8006a4a:	19db      	adds	r3, r3, r7
 8006a4c:	2208      	movs	r2, #8
 8006a4e:	701a      	strb	r2, [r3, #0]
 8006a50:	e108      	b.n	8006c64 <UART_SetConfig+0x390>
 8006a52:	231b      	movs	r3, #27
 8006a54:	2220      	movs	r2, #32
 8006a56:	189b      	adds	r3, r3, r2
 8006a58:	19db      	adds	r3, r3, r7
 8006a5a:	2210      	movs	r2, #16
 8006a5c:	701a      	strb	r2, [r3, #0]
 8006a5e:	e101      	b.n	8006c64 <UART_SetConfig+0x390>
 8006a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a71      	ldr	r2, [pc, #452]	@ (8006c2c <UART_SetConfig+0x358>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d131      	bne.n	8006ace <UART_SetConfig+0x1fa>
 8006a6a:	4b6e      	ldr	r3, [pc, #440]	@ (8006c24 <UART_SetConfig+0x350>)
 8006a6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a6e:	2230      	movs	r2, #48	@ 0x30
 8006a70:	4013      	ands	r3, r2
 8006a72:	2b30      	cmp	r3, #48	@ 0x30
 8006a74:	d01d      	beq.n	8006ab2 <UART_SetConfig+0x1de>
 8006a76:	d823      	bhi.n	8006ac0 <UART_SetConfig+0x1ec>
 8006a78:	2b20      	cmp	r3, #32
 8006a7a:	d00c      	beq.n	8006a96 <UART_SetConfig+0x1c2>
 8006a7c:	d820      	bhi.n	8006ac0 <UART_SetConfig+0x1ec>
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d002      	beq.n	8006a88 <UART_SetConfig+0x1b4>
 8006a82:	2b10      	cmp	r3, #16
 8006a84:	d00e      	beq.n	8006aa4 <UART_SetConfig+0x1d0>
 8006a86:	e01b      	b.n	8006ac0 <UART_SetConfig+0x1ec>
 8006a88:	231b      	movs	r3, #27
 8006a8a:	2220      	movs	r2, #32
 8006a8c:	189b      	adds	r3, r3, r2
 8006a8e:	19db      	adds	r3, r3, r7
 8006a90:	2200      	movs	r2, #0
 8006a92:	701a      	strb	r2, [r3, #0]
 8006a94:	e0e6      	b.n	8006c64 <UART_SetConfig+0x390>
 8006a96:	231b      	movs	r3, #27
 8006a98:	2220      	movs	r2, #32
 8006a9a:	189b      	adds	r3, r3, r2
 8006a9c:	19db      	adds	r3, r3, r7
 8006a9e:	2202      	movs	r2, #2
 8006aa0:	701a      	strb	r2, [r3, #0]
 8006aa2:	e0df      	b.n	8006c64 <UART_SetConfig+0x390>
 8006aa4:	231b      	movs	r3, #27
 8006aa6:	2220      	movs	r2, #32
 8006aa8:	189b      	adds	r3, r3, r2
 8006aaa:	19db      	adds	r3, r3, r7
 8006aac:	2204      	movs	r2, #4
 8006aae:	701a      	strb	r2, [r3, #0]
 8006ab0:	e0d8      	b.n	8006c64 <UART_SetConfig+0x390>
 8006ab2:	231b      	movs	r3, #27
 8006ab4:	2220      	movs	r2, #32
 8006ab6:	189b      	adds	r3, r3, r2
 8006ab8:	19db      	adds	r3, r3, r7
 8006aba:	2208      	movs	r2, #8
 8006abc:	701a      	strb	r2, [r3, #0]
 8006abe:	e0d1      	b.n	8006c64 <UART_SetConfig+0x390>
 8006ac0:	231b      	movs	r3, #27
 8006ac2:	2220      	movs	r2, #32
 8006ac4:	189b      	adds	r3, r3, r2
 8006ac6:	19db      	adds	r3, r3, r7
 8006ac8:	2210      	movs	r2, #16
 8006aca:	701a      	strb	r2, [r3, #0]
 8006acc:	e0ca      	b.n	8006c64 <UART_SetConfig+0x390>
 8006ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a57      	ldr	r2, [pc, #348]	@ (8006c30 <UART_SetConfig+0x35c>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d106      	bne.n	8006ae6 <UART_SetConfig+0x212>
 8006ad8:	231b      	movs	r3, #27
 8006ada:	2220      	movs	r2, #32
 8006adc:	189b      	adds	r3, r3, r2
 8006ade:	19db      	adds	r3, r3, r7
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	701a      	strb	r2, [r3, #0]
 8006ae4:	e0be      	b.n	8006c64 <UART_SetConfig+0x390>
 8006ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a52      	ldr	r2, [pc, #328]	@ (8006c34 <UART_SetConfig+0x360>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d106      	bne.n	8006afe <UART_SetConfig+0x22a>
 8006af0:	231b      	movs	r3, #27
 8006af2:	2220      	movs	r2, #32
 8006af4:	189b      	adds	r3, r3, r2
 8006af6:	19db      	adds	r3, r3, r7
 8006af8:	2200      	movs	r2, #0
 8006afa:	701a      	strb	r2, [r3, #0]
 8006afc:	e0b2      	b.n	8006c64 <UART_SetConfig+0x390>
 8006afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a4d      	ldr	r2, [pc, #308]	@ (8006c38 <UART_SetConfig+0x364>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d106      	bne.n	8006b16 <UART_SetConfig+0x242>
 8006b08:	231b      	movs	r3, #27
 8006b0a:	2220      	movs	r2, #32
 8006b0c:	189b      	adds	r3, r3, r2
 8006b0e:	19db      	adds	r3, r3, r7
 8006b10:	2200      	movs	r2, #0
 8006b12:	701a      	strb	r2, [r3, #0]
 8006b14:	e0a6      	b.n	8006c64 <UART_SetConfig+0x390>
 8006b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a3e      	ldr	r2, [pc, #248]	@ (8006c14 <UART_SetConfig+0x340>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d13e      	bne.n	8006b9e <UART_SetConfig+0x2ca>
 8006b20:	4b40      	ldr	r3, [pc, #256]	@ (8006c24 <UART_SetConfig+0x350>)
 8006b22:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006b24:	23c0      	movs	r3, #192	@ 0xc0
 8006b26:	011b      	lsls	r3, r3, #4
 8006b28:	4013      	ands	r3, r2
 8006b2a:	22c0      	movs	r2, #192	@ 0xc0
 8006b2c:	0112      	lsls	r2, r2, #4
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d027      	beq.n	8006b82 <UART_SetConfig+0x2ae>
 8006b32:	22c0      	movs	r2, #192	@ 0xc0
 8006b34:	0112      	lsls	r2, r2, #4
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d82a      	bhi.n	8006b90 <UART_SetConfig+0x2bc>
 8006b3a:	2280      	movs	r2, #128	@ 0x80
 8006b3c:	0112      	lsls	r2, r2, #4
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d011      	beq.n	8006b66 <UART_SetConfig+0x292>
 8006b42:	2280      	movs	r2, #128	@ 0x80
 8006b44:	0112      	lsls	r2, r2, #4
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d822      	bhi.n	8006b90 <UART_SetConfig+0x2bc>
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d004      	beq.n	8006b58 <UART_SetConfig+0x284>
 8006b4e:	2280      	movs	r2, #128	@ 0x80
 8006b50:	00d2      	lsls	r2, r2, #3
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d00e      	beq.n	8006b74 <UART_SetConfig+0x2a0>
 8006b56:	e01b      	b.n	8006b90 <UART_SetConfig+0x2bc>
 8006b58:	231b      	movs	r3, #27
 8006b5a:	2220      	movs	r2, #32
 8006b5c:	189b      	adds	r3, r3, r2
 8006b5e:	19db      	adds	r3, r3, r7
 8006b60:	2200      	movs	r2, #0
 8006b62:	701a      	strb	r2, [r3, #0]
 8006b64:	e07e      	b.n	8006c64 <UART_SetConfig+0x390>
 8006b66:	231b      	movs	r3, #27
 8006b68:	2220      	movs	r2, #32
 8006b6a:	189b      	adds	r3, r3, r2
 8006b6c:	19db      	adds	r3, r3, r7
 8006b6e:	2202      	movs	r2, #2
 8006b70:	701a      	strb	r2, [r3, #0]
 8006b72:	e077      	b.n	8006c64 <UART_SetConfig+0x390>
 8006b74:	231b      	movs	r3, #27
 8006b76:	2220      	movs	r2, #32
 8006b78:	189b      	adds	r3, r3, r2
 8006b7a:	19db      	adds	r3, r3, r7
 8006b7c:	2204      	movs	r2, #4
 8006b7e:	701a      	strb	r2, [r3, #0]
 8006b80:	e070      	b.n	8006c64 <UART_SetConfig+0x390>
 8006b82:	231b      	movs	r3, #27
 8006b84:	2220      	movs	r2, #32
 8006b86:	189b      	adds	r3, r3, r2
 8006b88:	19db      	adds	r3, r3, r7
 8006b8a:	2208      	movs	r2, #8
 8006b8c:	701a      	strb	r2, [r3, #0]
 8006b8e:	e069      	b.n	8006c64 <UART_SetConfig+0x390>
 8006b90:	231b      	movs	r3, #27
 8006b92:	2220      	movs	r2, #32
 8006b94:	189b      	adds	r3, r3, r2
 8006b96:	19db      	adds	r3, r3, r7
 8006b98:	2210      	movs	r2, #16
 8006b9a:	701a      	strb	r2, [r3, #0]
 8006b9c:	e062      	b.n	8006c64 <UART_SetConfig+0x390>
 8006b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a1d      	ldr	r2, [pc, #116]	@ (8006c18 <UART_SetConfig+0x344>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d157      	bne.n	8006c58 <UART_SetConfig+0x384>
 8006ba8:	4b1e      	ldr	r3, [pc, #120]	@ (8006c24 <UART_SetConfig+0x350>)
 8006baa:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006bac:	23c0      	movs	r3, #192	@ 0xc0
 8006bae:	009b      	lsls	r3, r3, #2
 8006bb0:	4013      	ands	r3, r2
 8006bb2:	22c0      	movs	r2, #192	@ 0xc0
 8006bb4:	0092      	lsls	r2, r2, #2
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d040      	beq.n	8006c3c <UART_SetConfig+0x368>
 8006bba:	22c0      	movs	r2, #192	@ 0xc0
 8006bbc:	0092      	lsls	r2, r2, #2
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d843      	bhi.n	8006c4a <UART_SetConfig+0x376>
 8006bc2:	2280      	movs	r2, #128	@ 0x80
 8006bc4:	0092      	lsls	r2, r2, #2
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d011      	beq.n	8006bee <UART_SetConfig+0x31a>
 8006bca:	2280      	movs	r2, #128	@ 0x80
 8006bcc:	0092      	lsls	r2, r2, #2
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d83b      	bhi.n	8006c4a <UART_SetConfig+0x376>
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d004      	beq.n	8006be0 <UART_SetConfig+0x30c>
 8006bd6:	2280      	movs	r2, #128	@ 0x80
 8006bd8:	0052      	lsls	r2, r2, #1
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d00e      	beq.n	8006bfc <UART_SetConfig+0x328>
 8006bde:	e034      	b.n	8006c4a <UART_SetConfig+0x376>
 8006be0:	231b      	movs	r3, #27
 8006be2:	2220      	movs	r2, #32
 8006be4:	189b      	adds	r3, r3, r2
 8006be6:	19db      	adds	r3, r3, r7
 8006be8:	2200      	movs	r2, #0
 8006bea:	701a      	strb	r2, [r3, #0]
 8006bec:	e03a      	b.n	8006c64 <UART_SetConfig+0x390>
 8006bee:	231b      	movs	r3, #27
 8006bf0:	2220      	movs	r2, #32
 8006bf2:	189b      	adds	r3, r3, r2
 8006bf4:	19db      	adds	r3, r3, r7
 8006bf6:	2202      	movs	r2, #2
 8006bf8:	701a      	strb	r2, [r3, #0]
 8006bfa:	e033      	b.n	8006c64 <UART_SetConfig+0x390>
 8006bfc:	231b      	movs	r3, #27
 8006bfe:	2220      	movs	r2, #32
 8006c00:	189b      	adds	r3, r3, r2
 8006c02:	19db      	adds	r3, r3, r7
 8006c04:	2204      	movs	r2, #4
 8006c06:	701a      	strb	r2, [r3, #0]
 8006c08:	e02c      	b.n	8006c64 <UART_SetConfig+0x390>
 8006c0a:	46c0      	nop			@ (mov r8, r8)
 8006c0c:	cfff69f3 	.word	0xcfff69f3
 8006c10:	ffffcfff 	.word	0xffffcfff
 8006c14:	40008000 	.word	0x40008000
 8006c18:	40008400 	.word	0x40008400
 8006c1c:	11fff4ff 	.word	0x11fff4ff
 8006c20:	40013800 	.word	0x40013800
 8006c24:	40021000 	.word	0x40021000
 8006c28:	40004400 	.word	0x40004400
 8006c2c:	40004800 	.word	0x40004800
 8006c30:	40004c00 	.word	0x40004c00
 8006c34:	40005000 	.word	0x40005000
 8006c38:	40013c00 	.word	0x40013c00
 8006c3c:	231b      	movs	r3, #27
 8006c3e:	2220      	movs	r2, #32
 8006c40:	189b      	adds	r3, r3, r2
 8006c42:	19db      	adds	r3, r3, r7
 8006c44:	2208      	movs	r2, #8
 8006c46:	701a      	strb	r2, [r3, #0]
 8006c48:	e00c      	b.n	8006c64 <UART_SetConfig+0x390>
 8006c4a:	231b      	movs	r3, #27
 8006c4c:	2220      	movs	r2, #32
 8006c4e:	189b      	adds	r3, r3, r2
 8006c50:	19db      	adds	r3, r3, r7
 8006c52:	2210      	movs	r2, #16
 8006c54:	701a      	strb	r2, [r3, #0]
 8006c56:	e005      	b.n	8006c64 <UART_SetConfig+0x390>
 8006c58:	231b      	movs	r3, #27
 8006c5a:	2220      	movs	r2, #32
 8006c5c:	189b      	adds	r3, r3, r2
 8006c5e:	19db      	adds	r3, r3, r7
 8006c60:	2210      	movs	r2, #16
 8006c62:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4ac1      	ldr	r2, [pc, #772]	@ (8006f70 <UART_SetConfig+0x69c>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d005      	beq.n	8006c7a <UART_SetConfig+0x3a6>
 8006c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4ac0      	ldr	r2, [pc, #768]	@ (8006f74 <UART_SetConfig+0x6a0>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d000      	beq.n	8006c7a <UART_SetConfig+0x3a6>
 8006c78:	e093      	b.n	8006da2 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006c7a:	231b      	movs	r3, #27
 8006c7c:	2220      	movs	r2, #32
 8006c7e:	189b      	adds	r3, r3, r2
 8006c80:	19db      	adds	r3, r3, r7
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	2b08      	cmp	r3, #8
 8006c86:	d015      	beq.n	8006cb4 <UART_SetConfig+0x3e0>
 8006c88:	dc18      	bgt.n	8006cbc <UART_SetConfig+0x3e8>
 8006c8a:	2b04      	cmp	r3, #4
 8006c8c:	d00d      	beq.n	8006caa <UART_SetConfig+0x3d6>
 8006c8e:	dc15      	bgt.n	8006cbc <UART_SetConfig+0x3e8>
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d002      	beq.n	8006c9a <UART_SetConfig+0x3c6>
 8006c94:	2b02      	cmp	r3, #2
 8006c96:	d005      	beq.n	8006ca4 <UART_SetConfig+0x3d0>
 8006c98:	e010      	b.n	8006cbc <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c9a:	f7ff fb73 	bl	8006384 <HAL_RCC_GetPCLK1Freq>
 8006c9e:	0003      	movs	r3, r0
 8006ca0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ca2:	e014      	b.n	8006cce <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ca4:	4bb4      	ldr	r3, [pc, #720]	@ (8006f78 <UART_SetConfig+0x6a4>)
 8006ca6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ca8:	e011      	b.n	8006cce <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006caa:	f7ff fadf 	bl	800626c <HAL_RCC_GetSysClockFreq>
 8006cae:	0003      	movs	r3, r0
 8006cb0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006cb2:	e00c      	b.n	8006cce <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cb4:	2380      	movs	r3, #128	@ 0x80
 8006cb6:	021b      	lsls	r3, r3, #8
 8006cb8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006cba:	e008      	b.n	8006cce <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8006cc0:	231a      	movs	r3, #26
 8006cc2:	2220      	movs	r2, #32
 8006cc4:	189b      	adds	r3, r3, r2
 8006cc6:	19db      	adds	r3, r3, r7
 8006cc8:	2201      	movs	r2, #1
 8006cca:	701a      	strb	r2, [r3, #0]
        break;
 8006ccc:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006cce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d100      	bne.n	8006cd6 <UART_SetConfig+0x402>
 8006cd4:	e135      	b.n	8006f42 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cd8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006cda:	4ba8      	ldr	r3, [pc, #672]	@ (8006f7c <UART_SetConfig+0x6a8>)
 8006cdc:	0052      	lsls	r2, r2, #1
 8006cde:	5ad3      	ldrh	r3, [r2, r3]
 8006ce0:	0019      	movs	r1, r3
 8006ce2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8006ce4:	f7fd fa0e 	bl	8004104 <__udivsi3>
 8006ce8:	0003      	movs	r3, r0
 8006cea:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cee:	685a      	ldr	r2, [r3, #4]
 8006cf0:	0013      	movs	r3, r2
 8006cf2:	005b      	lsls	r3, r3, #1
 8006cf4:	189b      	adds	r3, r3, r2
 8006cf6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d305      	bcc.n	8006d08 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d02:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006d04:	429a      	cmp	r2, r3
 8006d06:	d906      	bls.n	8006d16 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8006d08:	231a      	movs	r3, #26
 8006d0a:	2220      	movs	r2, #32
 8006d0c:	189b      	adds	r3, r3, r2
 8006d0e:	19db      	adds	r3, r3, r7
 8006d10:	2201      	movs	r2, #1
 8006d12:	701a      	strb	r2, [r3, #0]
 8006d14:	e044      	b.n	8006da0 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d18:	61bb      	str	r3, [r7, #24]
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	61fb      	str	r3, [r7, #28]
 8006d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d20:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006d22:	4b96      	ldr	r3, [pc, #600]	@ (8006f7c <UART_SetConfig+0x6a8>)
 8006d24:	0052      	lsls	r2, r2, #1
 8006d26:	5ad3      	ldrh	r3, [r2, r3]
 8006d28:	613b      	str	r3, [r7, #16]
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	617b      	str	r3, [r7, #20]
 8006d2e:	693a      	ldr	r2, [r7, #16]
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	69b8      	ldr	r0, [r7, #24]
 8006d34:	69f9      	ldr	r1, [r7, #28]
 8006d36:	f7fd fb5b 	bl	80043f0 <__aeabi_uldivmod>
 8006d3a:	0002      	movs	r2, r0
 8006d3c:	000b      	movs	r3, r1
 8006d3e:	0e11      	lsrs	r1, r2, #24
 8006d40:	021d      	lsls	r5, r3, #8
 8006d42:	430d      	orrs	r5, r1
 8006d44:	0214      	lsls	r4, r2, #8
 8006d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	085b      	lsrs	r3, r3, #1
 8006d4c:	60bb      	str	r3, [r7, #8]
 8006d4e:	2300      	movs	r3, #0
 8006d50:	60fb      	str	r3, [r7, #12]
 8006d52:	68b8      	ldr	r0, [r7, #8]
 8006d54:	68f9      	ldr	r1, [r7, #12]
 8006d56:	1900      	adds	r0, r0, r4
 8006d58:	4169      	adcs	r1, r5
 8006d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	603b      	str	r3, [r7, #0]
 8006d60:	2300      	movs	r3, #0
 8006d62:	607b      	str	r3, [r7, #4]
 8006d64:	683a      	ldr	r2, [r7, #0]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f7fd fb42 	bl	80043f0 <__aeabi_uldivmod>
 8006d6c:	0002      	movs	r2, r0
 8006d6e:	000b      	movs	r3, r1
 8006d70:	0013      	movs	r3, r2
 8006d72:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006d74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d76:	23c0      	movs	r3, #192	@ 0xc0
 8006d78:	009b      	lsls	r3, r3, #2
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	d309      	bcc.n	8006d92 <UART_SetConfig+0x4be>
 8006d7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d80:	2380      	movs	r3, #128	@ 0x80
 8006d82:	035b      	lsls	r3, r3, #13
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d204      	bcs.n	8006d92 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8006d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d8e:	60da      	str	r2, [r3, #12]
 8006d90:	e006      	b.n	8006da0 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8006d92:	231a      	movs	r3, #26
 8006d94:	2220      	movs	r2, #32
 8006d96:	189b      	adds	r3, r3, r2
 8006d98:	19db      	adds	r3, r3, r7
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8006d9e:	e0d0      	b.n	8006f42 <UART_SetConfig+0x66e>
 8006da0:	e0cf      	b.n	8006f42 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006da4:	69da      	ldr	r2, [r3, #28]
 8006da6:	2380      	movs	r3, #128	@ 0x80
 8006da8:	021b      	lsls	r3, r3, #8
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d000      	beq.n	8006db0 <UART_SetConfig+0x4dc>
 8006dae:	e070      	b.n	8006e92 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8006db0:	231b      	movs	r3, #27
 8006db2:	2220      	movs	r2, #32
 8006db4:	189b      	adds	r3, r3, r2
 8006db6:	19db      	adds	r3, r3, r7
 8006db8:	781b      	ldrb	r3, [r3, #0]
 8006dba:	2b08      	cmp	r3, #8
 8006dbc:	d015      	beq.n	8006dea <UART_SetConfig+0x516>
 8006dbe:	dc18      	bgt.n	8006df2 <UART_SetConfig+0x51e>
 8006dc0:	2b04      	cmp	r3, #4
 8006dc2:	d00d      	beq.n	8006de0 <UART_SetConfig+0x50c>
 8006dc4:	dc15      	bgt.n	8006df2 <UART_SetConfig+0x51e>
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d002      	beq.n	8006dd0 <UART_SetConfig+0x4fc>
 8006dca:	2b02      	cmp	r3, #2
 8006dcc:	d005      	beq.n	8006dda <UART_SetConfig+0x506>
 8006dce:	e010      	b.n	8006df2 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006dd0:	f7ff fad8 	bl	8006384 <HAL_RCC_GetPCLK1Freq>
 8006dd4:	0003      	movs	r3, r0
 8006dd6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006dd8:	e014      	b.n	8006e04 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006dda:	4b67      	ldr	r3, [pc, #412]	@ (8006f78 <UART_SetConfig+0x6a4>)
 8006ddc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006dde:	e011      	b.n	8006e04 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006de0:	f7ff fa44 	bl	800626c <HAL_RCC_GetSysClockFreq>
 8006de4:	0003      	movs	r3, r0
 8006de6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006de8:	e00c      	b.n	8006e04 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006dea:	2380      	movs	r3, #128	@ 0x80
 8006dec:	021b      	lsls	r3, r3, #8
 8006dee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006df0:	e008      	b.n	8006e04 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 8006df2:	2300      	movs	r3, #0
 8006df4:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8006df6:	231a      	movs	r3, #26
 8006df8:	2220      	movs	r2, #32
 8006dfa:	189b      	adds	r3, r3, r2
 8006dfc:	19db      	adds	r3, r3, r7
 8006dfe:	2201      	movs	r2, #1
 8006e00:	701a      	strb	r2, [r3, #0]
        break;
 8006e02:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d100      	bne.n	8006e0c <UART_SetConfig+0x538>
 8006e0a:	e09a      	b.n	8006f42 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e0e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006e10:	4b5a      	ldr	r3, [pc, #360]	@ (8006f7c <UART_SetConfig+0x6a8>)
 8006e12:	0052      	lsls	r2, r2, #1
 8006e14:	5ad3      	ldrh	r3, [r2, r3]
 8006e16:	0019      	movs	r1, r3
 8006e18:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8006e1a:	f7fd f973 	bl	8004104 <__udivsi3>
 8006e1e:	0003      	movs	r3, r0
 8006e20:	005a      	lsls	r2, r3, #1
 8006e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	085b      	lsrs	r3, r3, #1
 8006e28:	18d2      	adds	r2, r2, r3
 8006e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	0019      	movs	r1, r3
 8006e30:	0010      	movs	r0, r2
 8006e32:	f7fd f967 	bl	8004104 <__udivsi3>
 8006e36:	0003      	movs	r3, r0
 8006e38:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e3c:	2b0f      	cmp	r3, #15
 8006e3e:	d921      	bls.n	8006e84 <UART_SetConfig+0x5b0>
 8006e40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e42:	2380      	movs	r3, #128	@ 0x80
 8006e44:	025b      	lsls	r3, r3, #9
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d21c      	bcs.n	8006e84 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e4c:	b29a      	uxth	r2, r3
 8006e4e:	200e      	movs	r0, #14
 8006e50:	2420      	movs	r4, #32
 8006e52:	1903      	adds	r3, r0, r4
 8006e54:	19db      	adds	r3, r3, r7
 8006e56:	210f      	movs	r1, #15
 8006e58:	438a      	bics	r2, r1
 8006e5a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e5e:	085b      	lsrs	r3, r3, #1
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	2207      	movs	r2, #7
 8006e64:	4013      	ands	r3, r2
 8006e66:	b299      	uxth	r1, r3
 8006e68:	1903      	adds	r3, r0, r4
 8006e6a:	19db      	adds	r3, r3, r7
 8006e6c:	1902      	adds	r2, r0, r4
 8006e6e:	19d2      	adds	r2, r2, r7
 8006e70:	8812      	ldrh	r2, [r2, #0]
 8006e72:	430a      	orrs	r2, r1
 8006e74:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	1902      	adds	r2, r0, r4
 8006e7c:	19d2      	adds	r2, r2, r7
 8006e7e:	8812      	ldrh	r2, [r2, #0]
 8006e80:	60da      	str	r2, [r3, #12]
 8006e82:	e05e      	b.n	8006f42 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8006e84:	231a      	movs	r3, #26
 8006e86:	2220      	movs	r2, #32
 8006e88:	189b      	adds	r3, r3, r2
 8006e8a:	19db      	adds	r3, r3, r7
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	701a      	strb	r2, [r3, #0]
 8006e90:	e057      	b.n	8006f42 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006e92:	231b      	movs	r3, #27
 8006e94:	2220      	movs	r2, #32
 8006e96:	189b      	adds	r3, r3, r2
 8006e98:	19db      	adds	r3, r3, r7
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	2b08      	cmp	r3, #8
 8006e9e:	d015      	beq.n	8006ecc <UART_SetConfig+0x5f8>
 8006ea0:	dc18      	bgt.n	8006ed4 <UART_SetConfig+0x600>
 8006ea2:	2b04      	cmp	r3, #4
 8006ea4:	d00d      	beq.n	8006ec2 <UART_SetConfig+0x5ee>
 8006ea6:	dc15      	bgt.n	8006ed4 <UART_SetConfig+0x600>
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d002      	beq.n	8006eb2 <UART_SetConfig+0x5de>
 8006eac:	2b02      	cmp	r3, #2
 8006eae:	d005      	beq.n	8006ebc <UART_SetConfig+0x5e8>
 8006eb0:	e010      	b.n	8006ed4 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006eb2:	f7ff fa67 	bl	8006384 <HAL_RCC_GetPCLK1Freq>
 8006eb6:	0003      	movs	r3, r0
 8006eb8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006eba:	e014      	b.n	8006ee6 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ebc:	4b2e      	ldr	r3, [pc, #184]	@ (8006f78 <UART_SetConfig+0x6a4>)
 8006ebe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ec0:	e011      	b.n	8006ee6 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ec2:	f7ff f9d3 	bl	800626c <HAL_RCC_GetSysClockFreq>
 8006ec6:	0003      	movs	r3, r0
 8006ec8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006eca:	e00c      	b.n	8006ee6 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ecc:	2380      	movs	r3, #128	@ 0x80
 8006ece:	021b      	lsls	r3, r3, #8
 8006ed0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ed2:	e008      	b.n	8006ee6 <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8006ed8:	231a      	movs	r3, #26
 8006eda:	2220      	movs	r2, #32
 8006edc:	189b      	adds	r3, r3, r2
 8006ede:	19db      	adds	r3, r3, r7
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	701a      	strb	r2, [r3, #0]
        break;
 8006ee4:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8006ee6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d02a      	beq.n	8006f42 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006ef0:	4b22      	ldr	r3, [pc, #136]	@ (8006f7c <UART_SetConfig+0x6a8>)
 8006ef2:	0052      	lsls	r2, r2, #1
 8006ef4:	5ad3      	ldrh	r3, [r2, r3]
 8006ef6:	0019      	movs	r1, r3
 8006ef8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8006efa:	f7fd f903 	bl	8004104 <__udivsi3>
 8006efe:	0003      	movs	r3, r0
 8006f00:	001a      	movs	r2, r3
 8006f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	085b      	lsrs	r3, r3, #1
 8006f08:	18d2      	adds	r2, r2, r3
 8006f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	0019      	movs	r1, r3
 8006f10:	0010      	movs	r0, r2
 8006f12:	f7fd f8f7 	bl	8004104 <__udivsi3>
 8006f16:	0003      	movs	r3, r0
 8006f18:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f1c:	2b0f      	cmp	r3, #15
 8006f1e:	d90a      	bls.n	8006f36 <UART_SetConfig+0x662>
 8006f20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f22:	2380      	movs	r3, #128	@ 0x80
 8006f24:	025b      	lsls	r3, r3, #9
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d205      	bcs.n	8006f36 <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f2c:	b29a      	uxth	r2, r3
 8006f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	60da      	str	r2, [r3, #12]
 8006f34:	e005      	b.n	8006f42 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8006f36:	231a      	movs	r3, #26
 8006f38:	2220      	movs	r2, #32
 8006f3a:	189b      	adds	r3, r3, r2
 8006f3c:	19db      	adds	r3, r3, r7
 8006f3e:	2201      	movs	r2, #1
 8006f40:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f44:	226a      	movs	r2, #106	@ 0x6a
 8006f46:	2101      	movs	r1, #1
 8006f48:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8006f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f4c:	2268      	movs	r2, #104	@ 0x68
 8006f4e:	2101      	movs	r1, #1
 8006f50:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f54:	2200      	movs	r2, #0
 8006f56:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006f5e:	231a      	movs	r3, #26
 8006f60:	2220      	movs	r2, #32
 8006f62:	189b      	adds	r3, r3, r2
 8006f64:	19db      	adds	r3, r3, r7
 8006f66:	781b      	ldrb	r3, [r3, #0]
}
 8006f68:	0018      	movs	r0, r3
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	b010      	add	sp, #64	@ 0x40
 8006f6e:	bdb0      	pop	{r4, r5, r7, pc}
 8006f70:	40008000 	.word	0x40008000
 8006f74:	40008400 	.word	0x40008400
 8006f78:	00f42400 	.word	0x00f42400
 8006f7c:	080076ec 	.word	0x080076ec

08006f80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b082      	sub	sp, #8
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f8c:	2208      	movs	r2, #8
 8006f8e:	4013      	ands	r3, r2
 8006f90:	d00b      	beq.n	8006faa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	4a4a      	ldr	r2, [pc, #296]	@ (80070c4 <UART_AdvFeatureConfig+0x144>)
 8006f9a:	4013      	ands	r3, r2
 8006f9c:	0019      	movs	r1, r3
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	430a      	orrs	r2, r1
 8006fa8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fae:	2201      	movs	r2, #1
 8006fb0:	4013      	ands	r3, r2
 8006fb2:	d00b      	beq.n	8006fcc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	4a43      	ldr	r2, [pc, #268]	@ (80070c8 <UART_AdvFeatureConfig+0x148>)
 8006fbc:	4013      	ands	r3, r2
 8006fbe:	0019      	movs	r1, r3
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	430a      	orrs	r2, r1
 8006fca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fd0:	2202      	movs	r2, #2
 8006fd2:	4013      	ands	r3, r2
 8006fd4:	d00b      	beq.n	8006fee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	4a3b      	ldr	r2, [pc, #236]	@ (80070cc <UART_AdvFeatureConfig+0x14c>)
 8006fde:	4013      	ands	r3, r2
 8006fe0:	0019      	movs	r1, r3
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	430a      	orrs	r2, r1
 8006fec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ff2:	2204      	movs	r2, #4
 8006ff4:	4013      	ands	r3, r2
 8006ff6:	d00b      	beq.n	8007010 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	4a34      	ldr	r2, [pc, #208]	@ (80070d0 <UART_AdvFeatureConfig+0x150>)
 8007000:	4013      	ands	r3, r2
 8007002:	0019      	movs	r1, r3
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	430a      	orrs	r2, r1
 800700e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007014:	2210      	movs	r2, #16
 8007016:	4013      	ands	r3, r2
 8007018:	d00b      	beq.n	8007032 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	689b      	ldr	r3, [r3, #8]
 8007020:	4a2c      	ldr	r2, [pc, #176]	@ (80070d4 <UART_AdvFeatureConfig+0x154>)
 8007022:	4013      	ands	r3, r2
 8007024:	0019      	movs	r1, r3
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	430a      	orrs	r2, r1
 8007030:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007036:	2220      	movs	r2, #32
 8007038:	4013      	ands	r3, r2
 800703a:	d00b      	beq.n	8007054 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	689b      	ldr	r3, [r3, #8]
 8007042:	4a25      	ldr	r2, [pc, #148]	@ (80070d8 <UART_AdvFeatureConfig+0x158>)
 8007044:	4013      	ands	r3, r2
 8007046:	0019      	movs	r1, r3
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	430a      	orrs	r2, r1
 8007052:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007058:	2240      	movs	r2, #64	@ 0x40
 800705a:	4013      	ands	r3, r2
 800705c:	d01d      	beq.n	800709a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	4a1d      	ldr	r2, [pc, #116]	@ (80070dc <UART_AdvFeatureConfig+0x15c>)
 8007066:	4013      	ands	r3, r2
 8007068:	0019      	movs	r1, r3
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	430a      	orrs	r2, r1
 8007074:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800707a:	2380      	movs	r3, #128	@ 0x80
 800707c:	035b      	lsls	r3, r3, #13
 800707e:	429a      	cmp	r2, r3
 8007080:	d10b      	bne.n	800709a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	4a15      	ldr	r2, [pc, #84]	@ (80070e0 <UART_AdvFeatureConfig+0x160>)
 800708a:	4013      	ands	r3, r2
 800708c:	0019      	movs	r1, r3
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	430a      	orrs	r2, r1
 8007098:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800709e:	2280      	movs	r2, #128	@ 0x80
 80070a0:	4013      	ands	r3, r2
 80070a2:	d00b      	beq.n	80070bc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	4a0e      	ldr	r2, [pc, #56]	@ (80070e4 <UART_AdvFeatureConfig+0x164>)
 80070ac:	4013      	ands	r3, r2
 80070ae:	0019      	movs	r1, r3
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	430a      	orrs	r2, r1
 80070ba:	605a      	str	r2, [r3, #4]
  }
}
 80070bc:	46c0      	nop			@ (mov r8, r8)
 80070be:	46bd      	mov	sp, r7
 80070c0:	b002      	add	sp, #8
 80070c2:	bd80      	pop	{r7, pc}
 80070c4:	ffff7fff 	.word	0xffff7fff
 80070c8:	fffdffff 	.word	0xfffdffff
 80070cc:	fffeffff 	.word	0xfffeffff
 80070d0:	fffbffff 	.word	0xfffbffff
 80070d4:	ffffefff 	.word	0xffffefff
 80070d8:	ffffdfff 	.word	0xffffdfff
 80070dc:	ffefffff 	.word	0xffefffff
 80070e0:	ff9fffff 	.word	0xff9fffff
 80070e4:	fff7ffff 	.word	0xfff7ffff

080070e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b092      	sub	sp, #72	@ 0x48
 80070ec:	af02      	add	r7, sp, #8
 80070ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2290      	movs	r2, #144	@ 0x90
 80070f4:	2100      	movs	r1, #0
 80070f6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80070f8:	f7fd fdfc 	bl	8004cf4 <HAL_GetTick>
 80070fc:	0003      	movs	r3, r0
 80070fe:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	2208      	movs	r2, #8
 8007108:	4013      	ands	r3, r2
 800710a:	2b08      	cmp	r3, #8
 800710c:	d12d      	bne.n	800716a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800710e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007110:	2280      	movs	r2, #128	@ 0x80
 8007112:	0391      	lsls	r1, r2, #14
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	4a47      	ldr	r2, [pc, #284]	@ (8007234 <UART_CheckIdleState+0x14c>)
 8007118:	9200      	str	r2, [sp, #0]
 800711a:	2200      	movs	r2, #0
 800711c:	f000 f88e 	bl	800723c <UART_WaitOnFlagUntilTimeout>
 8007120:	1e03      	subs	r3, r0, #0
 8007122:	d022      	beq.n	800716a <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007124:	f3ef 8310 	mrs	r3, PRIMASK
 8007128:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800712a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800712c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800712e:	2301      	movs	r3, #1
 8007130:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007134:	f383 8810 	msr	PRIMASK, r3
}
 8007138:	46c0      	nop			@ (mov r8, r8)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	681a      	ldr	r2, [r3, #0]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	2180      	movs	r1, #128	@ 0x80
 8007146:	438a      	bics	r2, r1
 8007148:	601a      	str	r2, [r3, #0]
 800714a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800714c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800714e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007150:	f383 8810 	msr	PRIMASK, r3
}
 8007154:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2288      	movs	r2, #136	@ 0x88
 800715a:	2120      	movs	r1, #32
 800715c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2284      	movs	r2, #132	@ 0x84
 8007162:	2100      	movs	r1, #0
 8007164:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007166:	2303      	movs	r3, #3
 8007168:	e060      	b.n	800722c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	2204      	movs	r2, #4
 8007172:	4013      	ands	r3, r2
 8007174:	2b04      	cmp	r3, #4
 8007176:	d146      	bne.n	8007206 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007178:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800717a:	2280      	movs	r2, #128	@ 0x80
 800717c:	03d1      	lsls	r1, r2, #15
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	4a2c      	ldr	r2, [pc, #176]	@ (8007234 <UART_CheckIdleState+0x14c>)
 8007182:	9200      	str	r2, [sp, #0]
 8007184:	2200      	movs	r2, #0
 8007186:	f000 f859 	bl	800723c <UART_WaitOnFlagUntilTimeout>
 800718a:	1e03      	subs	r3, r0, #0
 800718c:	d03b      	beq.n	8007206 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800718e:	f3ef 8310 	mrs	r3, PRIMASK
 8007192:	60fb      	str	r3, [r7, #12]
  return(result);
 8007194:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007196:	637b      	str	r3, [r7, #52]	@ 0x34
 8007198:	2301      	movs	r3, #1
 800719a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	f383 8810 	msr	PRIMASK, r3
}
 80071a2:	46c0      	nop			@ (mov r8, r8)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4922      	ldr	r1, [pc, #136]	@ (8007238 <UART_CheckIdleState+0x150>)
 80071b0:	400a      	ands	r2, r1
 80071b2:	601a      	str	r2, [r3, #0]
 80071b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	f383 8810 	msr	PRIMASK, r3
}
 80071be:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071c0:	f3ef 8310 	mrs	r3, PRIMASK
 80071c4:	61bb      	str	r3, [r7, #24]
  return(result);
 80071c6:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80071ca:	2301      	movs	r3, #1
 80071cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071ce:	69fb      	ldr	r3, [r7, #28]
 80071d0:	f383 8810 	msr	PRIMASK, r3
}
 80071d4:	46c0      	nop			@ (mov r8, r8)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	689a      	ldr	r2, [r3, #8]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	2101      	movs	r1, #1
 80071e2:	438a      	bics	r2, r1
 80071e4:	609a      	str	r2, [r3, #8]
 80071e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071e8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071ea:	6a3b      	ldr	r3, [r7, #32]
 80071ec:	f383 8810 	msr	PRIMASK, r3
}
 80071f0:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	228c      	movs	r2, #140	@ 0x8c
 80071f6:	2120      	movs	r1, #32
 80071f8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2284      	movs	r2, #132	@ 0x84
 80071fe:	2100      	movs	r1, #0
 8007200:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007202:	2303      	movs	r3, #3
 8007204:	e012      	b.n	800722c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2288      	movs	r2, #136	@ 0x88
 800720a:	2120      	movs	r1, #32
 800720c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	228c      	movs	r2, #140	@ 0x8c
 8007212:	2120      	movs	r1, #32
 8007214:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2284      	movs	r2, #132	@ 0x84
 8007226:	2100      	movs	r1, #0
 8007228:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800722a:	2300      	movs	r3, #0
}
 800722c:	0018      	movs	r0, r3
 800722e:	46bd      	mov	sp, r7
 8007230:	b010      	add	sp, #64	@ 0x40
 8007232:	bd80      	pop	{r7, pc}
 8007234:	01ffffff 	.word	0x01ffffff
 8007238:	fffffedf 	.word	0xfffffedf

0800723c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b084      	sub	sp, #16
 8007240:	af00      	add	r7, sp, #0
 8007242:	60f8      	str	r0, [r7, #12]
 8007244:	60b9      	str	r1, [r7, #8]
 8007246:	603b      	str	r3, [r7, #0]
 8007248:	1dfb      	adds	r3, r7, #7
 800724a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800724c:	e051      	b.n	80072f2 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800724e:	69bb      	ldr	r3, [r7, #24]
 8007250:	3301      	adds	r3, #1
 8007252:	d04e      	beq.n	80072f2 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007254:	f7fd fd4e 	bl	8004cf4 <HAL_GetTick>
 8007258:	0002      	movs	r2, r0
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	1ad3      	subs	r3, r2, r3
 800725e:	69ba      	ldr	r2, [r7, #24]
 8007260:	429a      	cmp	r2, r3
 8007262:	d302      	bcc.n	800726a <UART_WaitOnFlagUntilTimeout+0x2e>
 8007264:	69bb      	ldr	r3, [r7, #24]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d101      	bne.n	800726e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800726a:	2303      	movs	r3, #3
 800726c:	e051      	b.n	8007312 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	2204      	movs	r2, #4
 8007276:	4013      	ands	r3, r2
 8007278:	d03b      	beq.n	80072f2 <UART_WaitOnFlagUntilTimeout+0xb6>
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	2b80      	cmp	r3, #128	@ 0x80
 800727e:	d038      	beq.n	80072f2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	2b40      	cmp	r3, #64	@ 0x40
 8007284:	d035      	beq.n	80072f2 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	69db      	ldr	r3, [r3, #28]
 800728c:	2208      	movs	r2, #8
 800728e:	4013      	ands	r3, r2
 8007290:	2b08      	cmp	r3, #8
 8007292:	d111      	bne.n	80072b8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	2208      	movs	r2, #8
 800729a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	0018      	movs	r0, r3
 80072a0:	f000 f83c 	bl	800731c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2290      	movs	r2, #144	@ 0x90
 80072a8:	2108      	movs	r1, #8
 80072aa:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2284      	movs	r2, #132	@ 0x84
 80072b0:	2100      	movs	r1, #0
 80072b2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80072b4:	2301      	movs	r3, #1
 80072b6:	e02c      	b.n	8007312 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	69da      	ldr	r2, [r3, #28]
 80072be:	2380      	movs	r3, #128	@ 0x80
 80072c0:	011b      	lsls	r3, r3, #4
 80072c2:	401a      	ands	r2, r3
 80072c4:	2380      	movs	r3, #128	@ 0x80
 80072c6:	011b      	lsls	r3, r3, #4
 80072c8:	429a      	cmp	r2, r3
 80072ca:	d112      	bne.n	80072f2 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	2280      	movs	r2, #128	@ 0x80
 80072d2:	0112      	lsls	r2, r2, #4
 80072d4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	0018      	movs	r0, r3
 80072da:	f000 f81f 	bl	800731c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2290      	movs	r2, #144	@ 0x90
 80072e2:	2120      	movs	r1, #32
 80072e4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2284      	movs	r2, #132	@ 0x84
 80072ea:	2100      	movs	r1, #0
 80072ec:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80072ee:	2303      	movs	r3, #3
 80072f0:	e00f      	b.n	8007312 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	69db      	ldr	r3, [r3, #28]
 80072f8:	68ba      	ldr	r2, [r7, #8]
 80072fa:	4013      	ands	r3, r2
 80072fc:	68ba      	ldr	r2, [r7, #8]
 80072fe:	1ad3      	subs	r3, r2, r3
 8007300:	425a      	negs	r2, r3
 8007302:	4153      	adcs	r3, r2
 8007304:	b2db      	uxtb	r3, r3
 8007306:	001a      	movs	r2, r3
 8007308:	1dfb      	adds	r3, r7, #7
 800730a:	781b      	ldrb	r3, [r3, #0]
 800730c:	429a      	cmp	r2, r3
 800730e:	d09e      	beq.n	800724e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007310:	2300      	movs	r3, #0
}
 8007312:	0018      	movs	r0, r3
 8007314:	46bd      	mov	sp, r7
 8007316:	b004      	add	sp, #16
 8007318:	bd80      	pop	{r7, pc}
	...

0800731c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b08e      	sub	sp, #56	@ 0x38
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007324:	f3ef 8310 	mrs	r3, PRIMASK
 8007328:	617b      	str	r3, [r7, #20]
  return(result);
 800732a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800732c:	637b      	str	r3, [r7, #52]	@ 0x34
 800732e:	2301      	movs	r3, #1
 8007330:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007332:	69bb      	ldr	r3, [r7, #24]
 8007334:	f383 8810 	msr	PRIMASK, r3
}
 8007338:	46c0      	nop			@ (mov r8, r8)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	681a      	ldr	r2, [r3, #0]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4926      	ldr	r1, [pc, #152]	@ (80073e0 <UART_EndRxTransfer+0xc4>)
 8007346:	400a      	ands	r2, r1
 8007348:	601a      	str	r2, [r3, #0]
 800734a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800734c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800734e:	69fb      	ldr	r3, [r7, #28]
 8007350:	f383 8810 	msr	PRIMASK, r3
}
 8007354:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007356:	f3ef 8310 	mrs	r3, PRIMASK
 800735a:	623b      	str	r3, [r7, #32]
  return(result);
 800735c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800735e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007360:	2301      	movs	r3, #1
 8007362:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007366:	f383 8810 	msr	PRIMASK, r3
}
 800736a:	46c0      	nop			@ (mov r8, r8)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	689a      	ldr	r2, [r3, #8]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	491b      	ldr	r1, [pc, #108]	@ (80073e4 <UART_EndRxTransfer+0xc8>)
 8007378:	400a      	ands	r2, r1
 800737a:	609a      	str	r2, [r3, #8]
 800737c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800737e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007382:	f383 8810 	msr	PRIMASK, r3
}
 8007386:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800738c:	2b01      	cmp	r3, #1
 800738e:	d118      	bne.n	80073c2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007390:	f3ef 8310 	mrs	r3, PRIMASK
 8007394:	60bb      	str	r3, [r7, #8]
  return(result);
 8007396:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007398:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800739a:	2301      	movs	r3, #1
 800739c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	f383 8810 	msr	PRIMASK, r3
}
 80073a4:	46c0      	nop			@ (mov r8, r8)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	681a      	ldr	r2, [r3, #0]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	2110      	movs	r1, #16
 80073b2:	438a      	bics	r2, r1
 80073b4:	601a      	str	r2, [r3, #0]
 80073b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	f383 8810 	msr	PRIMASK, r3
}
 80073c0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	228c      	movs	r2, #140	@ 0x8c
 80073c6:	2120      	movs	r1, #32
 80073c8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2200      	movs	r2, #0
 80073ce:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2200      	movs	r2, #0
 80073d4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80073d6:	46c0      	nop			@ (mov r8, r8)
 80073d8:	46bd      	mov	sp, r7
 80073da:	b00e      	add	sp, #56	@ 0x38
 80073dc:	bd80      	pop	{r7, pc}
 80073de:	46c0      	nop			@ (mov r8, r8)
 80073e0:	fffffedf 	.word	0xfffffedf
 80073e4:	effffffe 	.word	0xeffffffe

080073e8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b084      	sub	sp, #16
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2284      	movs	r2, #132	@ 0x84
 80073f4:	5c9b      	ldrb	r3, [r3, r2]
 80073f6:	2b01      	cmp	r3, #1
 80073f8:	d101      	bne.n	80073fe <HAL_UARTEx_DisableFifoMode+0x16>
 80073fa:	2302      	movs	r3, #2
 80073fc:	e027      	b.n	800744e <HAL_UARTEx_DisableFifoMode+0x66>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2284      	movs	r2, #132	@ 0x84
 8007402:	2101      	movs	r1, #1
 8007404:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2288      	movs	r2, #136	@ 0x88
 800740a:	2124      	movs	r1, #36	@ 0x24
 800740c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	2101      	movs	r1, #1
 8007422:	438a      	bics	r2, r1
 8007424:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	4a0b      	ldr	r2, [pc, #44]	@ (8007458 <HAL_UARTEx_DisableFifoMode+0x70>)
 800742a:	4013      	ands	r3, r2
 800742c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2200      	movs	r2, #0
 8007432:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	68fa      	ldr	r2, [r7, #12]
 800743a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2288      	movs	r2, #136	@ 0x88
 8007440:	2120      	movs	r1, #32
 8007442:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2284      	movs	r2, #132	@ 0x84
 8007448:	2100      	movs	r1, #0
 800744a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800744c:	2300      	movs	r3, #0
}
 800744e:	0018      	movs	r0, r3
 8007450:	46bd      	mov	sp, r7
 8007452:	b004      	add	sp, #16
 8007454:	bd80      	pop	{r7, pc}
 8007456:	46c0      	nop			@ (mov r8, r8)
 8007458:	dfffffff 	.word	0xdfffffff

0800745c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b084      	sub	sp, #16
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2284      	movs	r2, #132	@ 0x84
 800746a:	5c9b      	ldrb	r3, [r3, r2]
 800746c:	2b01      	cmp	r3, #1
 800746e:	d101      	bne.n	8007474 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007470:	2302      	movs	r3, #2
 8007472:	e02e      	b.n	80074d2 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2284      	movs	r2, #132	@ 0x84
 8007478:	2101      	movs	r1, #1
 800747a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2288      	movs	r2, #136	@ 0x88
 8007480:	2124      	movs	r1, #36	@ 0x24
 8007482:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	2101      	movs	r1, #1
 8007498:	438a      	bics	r2, r1
 800749a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	689b      	ldr	r3, [r3, #8]
 80074a2:	00db      	lsls	r3, r3, #3
 80074a4:	08d9      	lsrs	r1, r3, #3
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	683a      	ldr	r2, [r7, #0]
 80074ac:	430a      	orrs	r2, r1
 80074ae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	0018      	movs	r0, r3
 80074b4:	f000 f854 	bl	8007560 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	68fa      	ldr	r2, [r7, #12]
 80074be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2288      	movs	r2, #136	@ 0x88
 80074c4:	2120      	movs	r1, #32
 80074c6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2284      	movs	r2, #132	@ 0x84
 80074cc:	2100      	movs	r1, #0
 80074ce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80074d0:	2300      	movs	r3, #0
}
 80074d2:	0018      	movs	r0, r3
 80074d4:	46bd      	mov	sp, r7
 80074d6:	b004      	add	sp, #16
 80074d8:	bd80      	pop	{r7, pc}
	...

080074dc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b084      	sub	sp, #16
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2284      	movs	r2, #132	@ 0x84
 80074ea:	5c9b      	ldrb	r3, [r3, r2]
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	d101      	bne.n	80074f4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80074f0:	2302      	movs	r3, #2
 80074f2:	e02f      	b.n	8007554 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2284      	movs	r2, #132	@ 0x84
 80074f8:	2101      	movs	r1, #1
 80074fa:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2288      	movs	r2, #136	@ 0x88
 8007500:	2124      	movs	r1, #36	@ 0x24
 8007502:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	681a      	ldr	r2, [r3, #0]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	2101      	movs	r1, #1
 8007518:	438a      	bics	r2, r1
 800751a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	689b      	ldr	r3, [r3, #8]
 8007522:	4a0e      	ldr	r2, [pc, #56]	@ (800755c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8007524:	4013      	ands	r3, r2
 8007526:	0019      	movs	r1, r3
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	683a      	ldr	r2, [r7, #0]
 800752e:	430a      	orrs	r2, r1
 8007530:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	0018      	movs	r0, r3
 8007536:	f000 f813 	bl	8007560 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	68fa      	ldr	r2, [r7, #12]
 8007540:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2288      	movs	r2, #136	@ 0x88
 8007546:	2120      	movs	r1, #32
 8007548:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2284      	movs	r2, #132	@ 0x84
 800754e:	2100      	movs	r1, #0
 8007550:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007552:	2300      	movs	r3, #0
}
 8007554:	0018      	movs	r0, r3
 8007556:	46bd      	mov	sp, r7
 8007558:	b004      	add	sp, #16
 800755a:	bd80      	pop	{r7, pc}
 800755c:	f1ffffff 	.word	0xf1ffffff

08007560 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007562:	b085      	sub	sp, #20
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800756c:	2b00      	cmp	r3, #0
 800756e:	d108      	bne.n	8007582 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	226a      	movs	r2, #106	@ 0x6a
 8007574:	2101      	movs	r1, #1
 8007576:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2268      	movs	r2, #104	@ 0x68
 800757c:	2101      	movs	r1, #1
 800757e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007580:	e043      	b.n	800760a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007582:	260f      	movs	r6, #15
 8007584:	19bb      	adds	r3, r7, r6
 8007586:	2208      	movs	r2, #8
 8007588:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800758a:	200e      	movs	r0, #14
 800758c:	183b      	adds	r3, r7, r0
 800758e:	2208      	movs	r2, #8
 8007590:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	0e5b      	lsrs	r3, r3, #25
 800759a:	b2da      	uxtb	r2, r3
 800759c:	240d      	movs	r4, #13
 800759e:	193b      	adds	r3, r7, r4
 80075a0:	2107      	movs	r1, #7
 80075a2:	400a      	ands	r2, r1
 80075a4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	689b      	ldr	r3, [r3, #8]
 80075ac:	0f5b      	lsrs	r3, r3, #29
 80075ae:	b2da      	uxtb	r2, r3
 80075b0:	250c      	movs	r5, #12
 80075b2:	197b      	adds	r3, r7, r5
 80075b4:	2107      	movs	r1, #7
 80075b6:	400a      	ands	r2, r1
 80075b8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80075ba:	183b      	adds	r3, r7, r0
 80075bc:	781b      	ldrb	r3, [r3, #0]
 80075be:	197a      	adds	r2, r7, r5
 80075c0:	7812      	ldrb	r2, [r2, #0]
 80075c2:	4914      	ldr	r1, [pc, #80]	@ (8007614 <UARTEx_SetNbDataToProcess+0xb4>)
 80075c4:	5c8a      	ldrb	r2, [r1, r2]
 80075c6:	435a      	muls	r2, r3
 80075c8:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80075ca:	197b      	adds	r3, r7, r5
 80075cc:	781b      	ldrb	r3, [r3, #0]
 80075ce:	4a12      	ldr	r2, [pc, #72]	@ (8007618 <UARTEx_SetNbDataToProcess+0xb8>)
 80075d0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80075d2:	0019      	movs	r1, r3
 80075d4:	f7fc fe20 	bl	8004218 <__divsi3>
 80075d8:	0003      	movs	r3, r0
 80075da:	b299      	uxth	r1, r3
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	226a      	movs	r2, #106	@ 0x6a
 80075e0:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80075e2:	19bb      	adds	r3, r7, r6
 80075e4:	781b      	ldrb	r3, [r3, #0]
 80075e6:	193a      	adds	r2, r7, r4
 80075e8:	7812      	ldrb	r2, [r2, #0]
 80075ea:	490a      	ldr	r1, [pc, #40]	@ (8007614 <UARTEx_SetNbDataToProcess+0xb4>)
 80075ec:	5c8a      	ldrb	r2, [r1, r2]
 80075ee:	435a      	muls	r2, r3
 80075f0:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80075f2:	193b      	adds	r3, r7, r4
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	4a08      	ldr	r2, [pc, #32]	@ (8007618 <UARTEx_SetNbDataToProcess+0xb8>)
 80075f8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80075fa:	0019      	movs	r1, r3
 80075fc:	f7fc fe0c 	bl	8004218 <__divsi3>
 8007600:	0003      	movs	r3, r0
 8007602:	b299      	uxth	r1, r3
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2268      	movs	r2, #104	@ 0x68
 8007608:	5299      	strh	r1, [r3, r2]
}
 800760a:	46c0      	nop			@ (mov r8, r8)
 800760c:	46bd      	mov	sp, r7
 800760e:	b005      	add	sp, #20
 8007610:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007612:	46c0      	nop			@ (mov r8, r8)
 8007614:	08007704 	.word	0x08007704
 8007618:	0800770c 	.word	0x0800770c

0800761c <memset>:
 800761c:	0003      	movs	r3, r0
 800761e:	1882      	adds	r2, r0, r2
 8007620:	4293      	cmp	r3, r2
 8007622:	d100      	bne.n	8007626 <memset+0xa>
 8007624:	4770      	bx	lr
 8007626:	7019      	strb	r1, [r3, #0]
 8007628:	3301      	adds	r3, #1
 800762a:	e7f9      	b.n	8007620 <memset+0x4>

0800762c <__libc_init_array>:
 800762c:	b570      	push	{r4, r5, r6, lr}
 800762e:	2600      	movs	r6, #0
 8007630:	4c0c      	ldr	r4, [pc, #48]	@ (8007664 <__libc_init_array+0x38>)
 8007632:	4d0d      	ldr	r5, [pc, #52]	@ (8007668 <__libc_init_array+0x3c>)
 8007634:	1b64      	subs	r4, r4, r5
 8007636:	10a4      	asrs	r4, r4, #2
 8007638:	42a6      	cmp	r6, r4
 800763a:	d109      	bne.n	8007650 <__libc_init_array+0x24>
 800763c:	2600      	movs	r6, #0
 800763e:	f000 f819 	bl	8007674 <_init>
 8007642:	4c0a      	ldr	r4, [pc, #40]	@ (800766c <__libc_init_array+0x40>)
 8007644:	4d0a      	ldr	r5, [pc, #40]	@ (8007670 <__libc_init_array+0x44>)
 8007646:	1b64      	subs	r4, r4, r5
 8007648:	10a4      	asrs	r4, r4, #2
 800764a:	42a6      	cmp	r6, r4
 800764c:	d105      	bne.n	800765a <__libc_init_array+0x2e>
 800764e:	bd70      	pop	{r4, r5, r6, pc}
 8007650:	00b3      	lsls	r3, r6, #2
 8007652:	58eb      	ldr	r3, [r5, r3]
 8007654:	4798      	blx	r3
 8007656:	3601      	adds	r6, #1
 8007658:	e7ee      	b.n	8007638 <__libc_init_array+0xc>
 800765a:	00b3      	lsls	r3, r6, #2
 800765c:	58eb      	ldr	r3, [r5, r3]
 800765e:	4798      	blx	r3
 8007660:	3601      	adds	r6, #1
 8007662:	e7f2      	b.n	800764a <__libc_init_array+0x1e>
 8007664:	0800771c 	.word	0x0800771c
 8007668:	0800771c 	.word	0x0800771c
 800766c:	08007720 	.word	0x08007720
 8007670:	0800771c 	.word	0x0800771c

08007674 <_init>:
 8007674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007676:	46c0      	nop			@ (mov r8, r8)
 8007678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800767a:	bc08      	pop	{r3}
 800767c:	469e      	mov	lr, r3
 800767e:	4770      	bx	lr

08007680 <_fini>:
 8007680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007682:	46c0      	nop			@ (mov r8, r8)
 8007684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007686:	bc08      	pop	{r3}
 8007688:	469e      	mov	lr, r3
 800768a:	4770      	bx	lr
